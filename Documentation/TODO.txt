Concept:
- Find a way to express dependencies between different trafos (must occur after x and must occur before y, etc) and ideally implement an according scheduler/ optimizer

General:
- Lib/ Inc Blocks in HW Knowledge
- reserve C keywords in lexer

- find a way to eliminate StatementBlocks, etc without breaking expand functionality

- check uniform usage over 'override' keyword
- check 'var' usage
- check ';' usage

- Add possibility to specify trafos, that don't exchange nodes, i.e. read-only or only node-internal modification; goal is not having to return a result (for more readability and deep matches)

L3:

L4:
- getLevel@level
- leveled variables
- add val to l4 => extend DataType and/or VariableDeclarationStatement

- Check BinOp PowerOf
- extend Repeat statement with optional ident and optional lower bound

- SetStencilCoeff (id, offset, coeff)
- StencilFields/ CoeffFields

IR:
- add one distinct communicator per (sub)domain
- add special node to express 'curFragment.'

ISL:
- L4 constraints to ISL mapping
- Mark loops from ISL with OMP_PotentiallyParallel
- Mimic optimizations and criteria for OMP_PotentiallyParallel from LoopOverDomains.expand in ISL trafo
