Concept:
- Find a way to express dependencies between different trafos (must occur after x and must occur before y, etc) and ideally implement an according scheduler/ optimizer
- Use nodes by reference or apply deep copy? -> automatically apply duplicate for subclasses of node; all other objects (esp fields, stencils and other knowledge objects) should be copied by reference

Framework:
- Lib/ Inc Blocks in HW Knowledge
- reserve C keywords in lexer
- Extend Settings parser to support floating point numbers

- add possibility to specify trafos, that don't exchange nodes, i.e. read-only or only node-internal modification; goal is not having to return a result (for more readability and deep matches)
- add delete node functionality

- check uniform usage over 'override' keyword
- check 'var' usage
- check ';' usage

L3:

L4:
- leveled variables
- add Value/Val to l4 => extend DataType and/or VariableDeclarationStatement

- SetStencilCoeff (id, offset, coeff)

IR:
- add one distinct communicator per (sub)domain

ISL:
- L4 constraints to ISL mapping
- add tiling
- add vectorization
- long term: reduce optimization runtime
