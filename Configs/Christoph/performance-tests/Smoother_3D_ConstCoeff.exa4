Domain global< [ 0, 0, 0 ] to [ 1, 1, 1 ] >

// innerPoints muss dem Wert in LUPs unten übereinstimmen
Layout FullTempBlockable< Real, Node >@finest {
    innerPoints = [ 512, 512, 512 ]
	ghostLayers = [ 5, 5, 5 ]
	duplicateLayers = [ 1, 1, 1 ]
}
Layout PartTempBlockable< Real, Node >@finest {
    innerPoints = [ 512, 512, 512 ]
	ghostLayers = [ 4, 4, 4 ]
	duplicateLayers = [ 1, 1, 1 ]
}

Field SolutionT< global, FullTempBlockable, 0.0 >[2]@finest
Field RHST< global, PartTempBlockable, None >@finest

Stencil Laplace@finest {
	[ 0,  0,  0] => 4.8
	[ 1,  0,  0] => -0.8
	[-1,  0,  0] => -0.8
	[ 0,  1,  0] => -0.8
	[ 0, -1,  0] => -0.8
	[ 0,  0,  1] => -0.8
	[ 0,  0, -1] => -0.8
}

Globals {
}

Function LUPs() : Real {
	Variable dimSize : Integer = 512 // der Wert hier muss mit den innerPoints oben in den Layout Angaben übereinstimmen
	return(dimSize * dimSize * dimSize)
}

Function SmootherT() : Unit {
	loop over fragments {
		repeat 1 times with contraction [1,1,1] { // marker; Die 5 zeigt an, wie viele Schleifen mittels temporal Blocking kombiniert werden sollen
			loop over SolutionT@finest {
				SolutionT[nextSlot]@finest = SolutionT[active]@finest + (0.8 / diag(Laplace@finest) * (RHST@finest - Laplace@finest * SolutionT[active]@finest))
			}
			advance SolutionT@finest
		}
	}
}

Function InitFields ( ) : Unit {
	loop over SolutionT@finest sequentially {
		SolutionT[active]@finest = native('((double)std::rand()/RAND_MAX)')
	}
	loop over RHST@finest sequentially {
		RHST@finest = 0
	}
}

Function BenchmarkT() : Unit {
	print('Cache warmup')
	repeat 1 times {
		SmootherT()
	}
	print('Starting benchmark (temporal blocking)')
	startTimer(benchTTimer)
	repeat 10 times { // marker
		SmootherT()
	}
	stopTimer(benchTTimer)
	Variable time : Real = getTotalFromTimer(benchTTimer)
	print('Runtime: ', time)
	print('MLUPs: ', (LUPs() * 10) / time / 1e3) // TODO: die 10 hier ergibt sich aus dem Produkt der Schleifeniterationen bei den obigen beiden "marker"n
}

Function Application() : Unit {
	startTimer(setupWatch)
	initGlobals()
	initDomain()
	InitFields()
	stopTimer(setupWatch)
	print('Total time to setup: ', getTotalFromTimer(setupWatch))
	BenchmarkT()
	destroyGlobals()
}
