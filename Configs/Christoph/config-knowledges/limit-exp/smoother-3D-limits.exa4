Domain global< [ 0, 0, 0 ] to [ 1, 1, 1 ] >

// innerPoints muss dem Wert in LUPs unten übereinstimmen
Layout FullTempBlockable< Real, Node >@finest {
    innerPoints = [ 512, 512, 512 ]
    ghostLayers = [ 5, 5, 5 ]
    duplicateLayers = [ 1, 1, 1 ]
}
Layout PartTempBlockable< Real, Node >@finest {
    innerPoints = [ 512, 512, 512 ]
    ghostLayers = [ 4, 4, 4 ]
    duplicateLayers = [ 1, 1, 1 ]
}

Field SolutionT< global, FullTempBlockable, 0.0 >[2]@finest
Field RHST< global, PartTempBlockable, None >@finest

Stencil Laplace@finest {
    [ 0,  0,  0] => 4.8
    [ 1,  0,  0] => -0.8
    [-1,  0,  0] => -0.8
    [ 0,  1,  0] => -0.8
    [ 0, -1,  0] => -0.8
    [ 0,  0,  1] => -0.8
    [ 0,  0, -1] => -0.8
}

Globals {
}

Function LUPs() : Real {
    Variable dimSize : Integer = 512 // der Wert hier muss mit den innerPoints oben in den Layout Angaben übereinstimmen
    return(dimSize * dimSize * dimSize)
}

Function SmootherTBlock() : Unit {
    loop over fragments {
        loop over SolutionT@finest {
            SolutionT[nextSlot]@finest = SolutionT[active]@finest + (0.8 / diag(Laplace@finest) * (RHST@finest - Laplace@finest * SolutionT[active]@finest))
        }
        advance SolutionT@finest
    }
}

Function InitFields ( ) : Unit {
    loop over SolutionT@finest sequentially {
        SolutionT[active]@finest = native('((double)std::rand()/RAND_MAX)')
    }
    loop over RHST@finest sequentially {
        RHST@finest = 0
    }
}

Function BenchmarkT() : Unit {
    print('-------------------------------')
    print('Smoother 3D')
    print('Cache warmup')
    repeat 1 times {
        SmootherTBlock()
    }

    print('Starting benchmark')
    startTimer(benchTTimer)
    repeat 9 times { // marker
        SmootherTBlock()
    }
    stopTimer(benchTTimer)

    Variable time : Real = getTotalFromTimer(benchTTimer)
    print('Smoother runtime for 9 runs: ', time)
    print('Smoother MLUPs for 9 runs: ', (LUPs() * 9) / time / 1e3) // TODO: der Faktor 9 hier ergibt sich aus dem Produkt der Schleifeniterationen bei den obigen beiden "marker"n
}

Function Application() : Unit {
    startTimer(setupWatch)
    initGlobals()
    initDomain()
    InitFields()
    stopTimer(setupWatch)
    print('Total time to setup: ', getTotalFromTimer(setupWatch))
    BenchmarkT()
    destroyGlobals()
}
