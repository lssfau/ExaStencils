// layer 4 code

Domain global< [ 0, 0, 0 ] to [ 0.05, 0.05, 0.05 ] >

Layout DefCellLayout < Real , Cell > @all {
	duplicateLayers	= [ 0, 0, 0 ]
	ghostLayers		= [ 1, 1, 1 ] with communication
}

Layout DefFaceXLayout < Real , Face_x > @all {
	duplicateLayers	= [ 1, 0, 0 ] with communication
	ghostLayers		= [ 1, 1, 1 ] with communication
}

Layout DefFaceYLayout < Real , Face_y > @all {
	duplicateLayers	= [ 0, 1, 0 ] with communication
	ghostLayers		= [ 1, 1, 1 ] with communication
}

Layout DefFaceZLayout < Real , Face_z > @all {
	duplicateLayers	= [ 0, 0, 1 ] with communication
	ghostLayers		= [ 1, 1, 1 ] with communication
}

Layout CellStencilLayout < Vector<Real, 7>, Cell > @all {
	duplicateLayers	= [ 0, 0, 0 ]
	ghostLayers		= [ 1, 1, 1 ] // no communication necessary since only required for subexpression re-usage
}

Layout FaceXStencilLayout < Vector<Real, 7>, Face_x > @all {
	duplicateLayers	= [ 1, 0, 0 ] with communication
	ghostLayers		= [ 1, 1, 1 ] with communication	// only communicate face dim's ghost layers -> fix in communicate call
}

Layout FaceYStencilLayout < Vector<Real, 7>, Face_y > @all {
	duplicateLayers	= [ 0, 1, 0 ] with communication
	ghostLayers		= [ 1, 1, 1 ] with communication
}

Layout FaceZStencilLayout < Vector<Real, 7>, Face_z > @all {
	duplicateLayers	= [ 0, 0, 1 ] with communication
	ghostLayers		= [ 1, 1, 1 ] with communication
}

// values associated with u, ie face_x

Field u < global, DefFaceXLayout, 0.0 >[2] @all
Field du < global, DefFaceXLayout, 0.0 > @finest

Field residual_u < global, DefFaceXLayout, 0.0 > @all
Field rhs_u < global, DefFaceXLayout, None > @all

Field AuStencilData< global, FaceXStencilLayout, None > @all
StencilField AuStencil< AuStencilData => SevenPointStencil > @all

// values associated with v, ie face_y

Field v < global, DefFaceYLayout, 0.0 >[2] @all
Field dv < global, DefFaceYLayout, 0.0 > @finest

Field residual_v < global, DefFaceYLayout, 0.0 > @all
Field rhs_v < global, DefFaceYLayout, None > @all

Field AvStencilData< global, FaceYStencilLayout, None > @all
StencilField AvStencil< AvStencilData => SevenPointStencil > @all

// values associated with w, ie face_z

Field w < global, DefFaceZLayout, 0.0 >[2] @all
Field dw < global, DefFaceZLayout, 0.0 > @finest

Field residual_w < global, DefFaceZLayout, 0.0 > @all
Field rhs_w < global, DefFaceZLayout, None > @all

Field AwStencilData< global, FaceZStencilLayout, None > @all
StencilField AwStencil< AwStencilData => SevenPointStencil > @all

// values associated with p and rho, ie cell center

Field rho < global, DefCellLayout, Neumann >[2] @finest
Field p < global, DefCellLayout, Neumann > @finest
Field pc < global, DefCellLayout, Neumann > @all

Field residual_pc < global, DefCellLayout, Neumann > @all
Field rhs_pc < global, DefCellLayout, None > @all

Field ApcStencilData< global, CellStencilLayout, None > @all
StencilField ApcStencil< ApcStencilData => SevenPointStencil > @all

// values associated with phi7, ie cell center

Field phi7 < global, DefCellLayout, applyBC_t@current ( ) >[2] @all
Field residual_t < global, DefCellLayout, Neumann > @all
Field rhs_t < global, DefCellLayout, None > @all

Field AtStencilData< global, CellStencilLayout, None > @all
StencilField AtStencil< AtStencilData => SevenPointStencil > @all

// auxilary fields

Field vis < global, DefCellLayout, Neumann > @finest
Field miu < global, DefCellLayout, Neumann > @finest

Field gamma < global, DefCellLayout, Neumann > @finest

// stencils and stencils templates

Stencil SevenPointStencil@all {
	[ 0,  0,  0] =>  6.0
	[-1,  0,  0] => -1.0
	[ 1,  0,  0] => -1.0
	[ 0, -1,  0] => -1.0
	[ 0,  1,  0] => -1.0
	[ 0,  0, -1] => -1.0
	[ 0,  0,  1] => -1.0
}

Stencil RestrictionCell@all from default restriction on Cell with 'linear'
Stencil CorrectionCell@all from default prolongation on Cell with 'linear'

Stencil RestrictionFaceX@all from default restriction on Face_x with 'linear'
Stencil CorrectionFaceX@all from default prolongation on Face_x with 'linear'

Stencil RestrictionFaceY@all from default restriction on Face_y with 'linear'
Stencil CorrectionFaceY@all from default prolongation on Face_y with 'linear'

Stencil RestrictionFaceZ@all from default restriction on Face_z with 'linear'
Stencil CorrectionFaceZ@all from default prolongation on Face_z with 'linear'

Function Application ( ) : Unit {
	initGlobals ( )
	initDomain ( )
	initFieldsWithZero ( )

	initGeometry ( )

	Test@finest ( )
	
	//printAllTimers ( )
	destroyGlobals ( )
}

Function Test@finest ( ) {
	loop over p {
		print ( 'eval regular faces' )
		p = evalAtEastFace ( p )
		p = evalAtWestFace ( p )
		p = evalAtNorthFace ( p )
		p = evalAtSouthFace ( p )
		p = evalAtTopFace ( p )
		p = evalAtBottomFace ( p )

		print ( 'eval xStag faces' )
		p = evalAtXStaggeredEastFace ( p )
		p = evalAtXStaggeredWestFace ( p )
		//p = evalAtXStaggeredNorthFace ( p )
		//p = evalAtXStaggeredSouthFace ( p )
		//p = evalAtXStaggeredTopFace ( p )
		//p = evalAtXStaggeredBottomFace ( p )

		print ( 'eval yStag faces' )
		//p = evalAtYStaggeredEastFace ( p )
		//p = evalAtYStaggeredWestFace ( p )
		p = evalAtYStaggeredNorthFace ( p )
		p = evalAtYStaggeredSouthFace ( p )
		//p = evalAtYStaggeredTopFace ( p )
		//p = evalAtYStaggeredBottomFace ( p )

		print ( 'eval zStag faces' )
		//p = evalAtZStaggeredEastFace ( p )
		//p = evalAtZStaggeredWestFace ( p )
		//p = evalAtZStaggeredNorthFace ( p )
		//p = evalAtZStaggeredSouthFace ( p )
		p = evalAtZStaggeredTopFace ( p )
		p = evalAtZStaggeredBottomFace ( p )

		print ( 'integrate regular faces' )
		p = integrateOverEastFace ( p )
		p = integrateOverWestFace ( p )
		p = integrateOverNorthFace ( p )
		p = integrateOverSouthFace ( p )
		p = integrateOverTopFace ( p )
		p = integrateOverBottomFace ( p )

		print ( 'integrate xStag faces' )
		p = integrateOverXStaggeredEastFace ( p )
		p = integrateOverXStaggeredWestFace ( p )
		p = integrateOverXStaggeredNorthFace ( p )
		p = integrateOverXStaggeredSouthFace ( p )
		p = integrateOverXStaggeredTopFace ( p )
		p = integrateOverXStaggeredBottomFace ( p )

		print ( 'integrate yStag faces' )
		p = integrateOverYStaggeredEastFace ( p )
		p = integrateOverYStaggeredWestFace ( p )
		p = integrateOverYStaggeredNorthFace ( p )
		p = integrateOverYStaggeredSouthFace ( p )
		p = integrateOverYStaggeredTopFace ( p )
		p = integrateOverYStaggeredBottomFace ( p )

		print ( 'integrate zStag faces' )
		p = integrateOverZStaggeredEastFace ( p )
		p = integrateOverZStaggeredWestFace ( p )
		p = integrateOverZStaggeredNorthFace ( p )
		p = integrateOverZStaggeredSouthFace ( p )
		p = integrateOverZStaggeredTopFace ( p )
		p = integrateOverZStaggeredBottomFace ( p )

		print ( 'eval in integrate regular faces' )
		p = integrateOverEastFace ( evalAtEastFace ( p ) )
		p = integrateOverWestFace ( evalAtWestFace ( p ) )
		p = integrateOverNorthFace ( evalAtNorthFace ( p ) )
		p = integrateOverSouthFace ( evalAtSouthFace ( p ) )
		p = integrateOverTopFace ( evalAtTopFace ( p ) )
		p = integrateOverBottomFace ( evalAtBottomFace ( p ) )

		print ( 'eval in integrate xStag faces' )
		p = integrateOverXStaggeredEastFace ( evalAtXStaggeredEastFace ( p ) )
		p = integrateOverXStaggeredWestFace ( evalAtXStaggeredWestFace ( p ) )
		p = integrateOverXStaggeredNorthFace ( evalAtXStaggeredNorthFace ( p ) )
		p = integrateOverXStaggeredSouthFace ( evalAtXStaggeredSouthFace ( p ) )
		p = integrateOverXStaggeredTopFace ( evalAtXStaggeredTopFace ( p ) )
		p = integrateOverXStaggeredBottomFace ( evalAtXStaggeredBottomFace ( p ) )

		print ( 'eval in integrate yStag faces' )
		p = integrateOverYStaggeredEastFace ( evalAtYStaggeredEastFace ( p ) )
		p = integrateOverYStaggeredWestFace ( evalAtYStaggeredWestFace ( p ) )
		p = integrateOverYStaggeredNorthFace ( evalAtYStaggeredNorthFace ( p ) )
		p = integrateOverYStaggeredSouthFace ( evalAtYStaggeredSouthFace ( p ) )
		p = integrateOverYStaggeredTopFace ( evalAtYStaggeredTopFace ( p ) )
		p = integrateOverYStaggeredBottomFace ( evalAtYStaggeredBottomFace ( p ) )

		print ( 'eval in integrate zStag faces' )
		p = integrateOverZStaggeredEastFace ( evalAtZStaggeredEastFace ( p ) )
		p = integrateOverZStaggeredWestFace ( evalAtZStaggeredWestFace ( p ) )
		p = integrateOverZStaggeredNorthFace ( evalAtZStaggeredNorthFace ( p ) )
		p = integrateOverZStaggeredSouthFace ( evalAtZStaggeredSouthFace ( p ) )
		p = integrateOverZStaggeredTopFace ( evalAtZStaggeredTopFace ( p ) )
		p = integrateOverZStaggeredBottomFace ( evalAtZStaggeredBottomFace ( p ) )
	}
}

