Globals {
	Var useVanka : Boolean = true
	Var vankaRelax : Real = 0.8
}



Function Application ( ) : Unit {
	startTimer ( 'setup' )

	initGlobals ( )
	initDomain ( )
	initFieldsWithZero ( )
	initGeometry ( )
	InitFields ( )

	stopTimer ( 'setup' )

	Solve@finest ( )

	//printAllTimers ( )
	destroyGlobals ( )
}

Function Solve@finest ( ) : Unit {
	// TODO: merge into norm
	UpdateResidual@finest ( )
	Var initRes : Real    = NormResidual_L2@current()
	Var initErr : Real    = NormError_Max@current ( )
	Var curRes  : Real    = initRes
	Var prevRes : Real    = curRes
	Var numIt   : Integer = 0

	//print ( 'Starting residual at 0', initRes )
	printVal ( initRes )
	startTimer ( 'timeToSolve' )

	// TODO: check with Lisa
	repeat until ( curRes <= 1e-8 * initRes || numIt >= 100 ) {
		startTimer ( 'cycle' )
		VCycle@finest (  )
		stopTimer ( 'cycle' )
		
		startTimer ( 'normalization' )
		NormalizePressure@finest ( )
		stopTimer ( 'normalization' )

		if (getTotalFromTimer ( 'cycle' ) > 1200000 ) {
			print ( 'Aborting solve after', getTotalFromTimer ( 'cycle' ), 'ms which exceeds the limit of', 1200000, 'ms' )
			return
		}

		startTimer ( 'convergenceChecking' )
		prevRes = curRes
		// TODO: merge into norm
		UpdateResidual@finest ( )
		curRes = NormResidual_L2@current()
		print ( 'Residual:', curRes, 'Residual reduction:', ( initRes / curRes ), 'Convergence factor:', ( curRes / prevRes ) )
		Var curErr : Real = NormError_Max@current ( )
		numIt += 1
		stopTimer ( 'convergenceChecking' )
	}

	stopTimer ( 'timeToSolve' )
	print ( 'Total time to solve in', numIt, 'steps :', getTotalFromTimer ( 'timeToSolve' ) )
	print ( 'Mean time per vCycle: ', getMeanFromTimer ( 'cycle' ) )

	if ( false ) {
		printField ( "u.csv", u@finest )
		printField ( "ru.csv", residual_u@finest )
		printField ( "v.csv", v@finest )
		printField ( "rv.csv", residual_v@finest )
		printField ( "w.csv", w@finest )
		printField ( "rw.csv", residual_w@finest )
		printField ( "p.csv", p@finest )
	}
}

Function printVal ( toPrint : Real ) : Unit {
    if ( toPrint <= 1e-12 ) {
		print ( "EFFECTIVELY ZERO" )
    } else if ( toPrint <= 1e-11 ) {
		native ( 'std::streamsize oldPrec = std::cout.precision()' )
		native ( 'std::cout.precision(1)' )
		print ( toPrint )
		native ( 'std::cout.precision(oldPrec)' )
    } else if ( toPrint <= 1e-10 ) {
		native ( 'std::streamsize oldPrec = std::cout.precision()' )
		native ( 'std::cout.precision(2)' )
		print ( toPrint )
		native ( 'std::cout.precision(oldPrec)' )
    } else if ( toPrint <= 1e-9 ) {
		native ( 'std::streamsize oldPrec = std::cout.precision()' )
		native ( 'std::cout.precision(3)' )
		print ( toPrint )
		native ( 'std::cout.precision(oldPrec)' )
    } else {
		native ( 'std::streamsize oldPrec = std::cout.precision()' )
		native ( 'std::cout.precision(4)' )
		print ( toPrint )
		native ( 'std::cout.precision(oldPrec)' )
    }
}

Function NormError_L2@finest ( ) : Real {
	Var err_u : Real = 0
	Var err_v : Real = 0
	Var err_w : Real = 0
	Var err_p : Real = 0
	
	loop over u with reduction( + : err_u ){
		Var curErr : Real = u - ( -4.0 * cos ( 4.0 * vf_cellCenter_z ) )
		err_u += curErr * curErr
	}
	loop over v with reduction( + : err_v ) {
		Var curErr : Real = v - ( 8.0 * cos ( 8.0 * vf_cellCenter_x ) )
		err_v += curErr * curErr
	}
	loop over w with reduction( + : err_w ) {
		Var curErr : Real = w - ( -2.0 * cos ( 2.0 * vf_cellCenter_y ) )
		err_w += curErr * curErr
	}
	loop over p with reduction( + : err_p ) {
		Var curErr : Real = p - ( sin ( 4.0 * vf_cellCenter_x ) * sin ( 8.0 * vf_cellCenter_y ) * sin ( 2.0 * vf_cellCenter_z ) )
		err_p += curErr * curErr
	}
	
	Var totalErr : Real = sqrt ( err_u + err_v + err_w + err_p )
	
	print ( 'Error:', totalErr, sqrt ( err_u ), sqrt ( err_v ), sqrt ( err_w ), sqrt ( err_p ) )
	
	return totalErr
}

Function NormError_Max@finest ( ) : Real {
	Var err_u : Real = 0
	Var err_v : Real = 0
	Var err_w : Real = 0
	Var err_p : Real = 0
	
	loop over u with reduction( max : err_u ){
		Var curErr : Real = u - ( -4.0 * cos ( 4.0 * vf_cellCenter_z ) )
		err_u = max ( curErr, err_u )
	}
	loop over v with reduction( max : err_v ) {
		Var curErr : Real = v - ( 8.0 * cos ( 8.0 * vf_cellCenter_x ) )
		err_v = max ( curErr, err_v )
	}
	loop over w with reduction( max : err_w ) {
		Var curErr : Real = w - ( -2.0 * cos ( 2.0 * vf_cellCenter_y ) )
		err_w = max ( curErr, err_w )
	}
	loop over p with reduction( max : err_p ) {
		Var curErr : Real = p - ( sin ( 4.0 * vf_cellCenter_x ) * sin ( 8.0 * vf_cellCenter_y ) * sin ( 2.0 * vf_cellCenter_z ) )
		err_p = max ( curErr, err_p )
	}
	
	Var totalErr : Real = max ( err_u, err_v, err_w, err_p )
	
	print ( 'Error:', totalErr, err_u, err_v, err_w, err_p )
	
	return totalErr
}

Function NormalizePressure@finest ( ) : Unit {
	// TODO: add language shortcut
	Val numCells_x : Int = ( 2 ** levels@current ( ) ) * getKnowledge ( 'domain_fragmentLength_x' ) * getKnowledge ( 'domain_rect_numBlocks_x' ) * getKnowledge ( 'domain_rect_numFragsPerBlock_x' )
	Val numCells_y : Int = ( 2 ** levels@current ( ) ) * getKnowledge ( 'domain_fragmentLength_y' ) * getKnowledge ( 'domain_rect_numBlocks_y' ) * getKnowledge ( 'domain_rect_numFragsPerBlock_y' )
	Val numCells_z : Int = ( 2 ** levels@current ( ) ) * getKnowledge ( 'domain_fragmentLength_z' ) * getKnowledge ( 'domain_rect_numBlocks_z' ) * getKnowledge ( 'domain_rect_numFragsPerBlock_z' )
	Val numCells : Int = numCells_x * numCells_y * numCells_z

	Var mean : Real = 0
	loop over p@current with reduction ( + : mean ) {
		mean += p@current
	}
	Var corr : Real = 0
	loop over p@current with reduction ( + : corr ) {
		corr += sin ( 4.0 * vf_cellCenter_x@current ) * sin ( 8.0 * vf_cellCenter_y@current ) * sin ( 2.0 * vf_cellCenter_z@current )
	}

	mean /= numCells
	corr /= numCells
	mean -= corr

	loop over p@current {
		p@current -= mean
	}
	communicate p@current
	apply bc to p@current
	
	print ( 'Pressure mean:', mean )
}


Function Distributive@all ( ) : Unit {
	color with {
		0 == ( i0 + i1 + i2 ) % 2,
		1 == ( i0 + i1 + i2 ) % 2,

		loop over u@current {
			u@current += ( ( rhs_u@current - dx_Cell_xStag@current * p@current - Laplace_xStag_xStag@current * u@current ) / Laplace_xStag_xStag@current:[0, 0, 0] )
		}

		communicate u@current
		apply bc to u@current
	}

	color with {
		0 == ( i0 + i1 + i2 ) % 2,
		1 == ( i0 + i1 + i2 ) % 2,

		loop over v@current {
			v@current += ( ( rhs_v@current - dy_Cell_yStag@current * p@current - Laplace_yStag_yStag@current * v@current ) / Laplace_yStag_yStag@current:[0, 0, 0] )
		}

		communicate v@current
		apply bc to v@current
	}

	color with {
		0 == ( i0 + i1 + i2 ) % 2,
		1 == ( i0 + i1 + i2 ) % 2,

		loop over w@current {
			w@current += ( ( rhs_w@current - dz_Cell_zStag@current * p@current - Laplace_zStag_zStag@current * w@current ) / Laplace_zStag_zStag@current:[0, 0, 0] )
		}

		communicate w@current
		apply bc to w@current
	}

	color with {
		0 == ( i0 + i1 + i2 ) % 2,
		1 == ( i0 + i1 + i2 ) % 2,

		loop over p@current {
			Var delta : Real = rhs_p@current - ( dx_xStag_Cell@current * u@current + dy_yStag_Cell@current * v@current + dz_zStag_Cell@current * w@current )
			//delta /= vf_cellVolume@current

			Var numNeigh : Int = 6
			//if ( isOnBoundaryOf ( p@current@[-1,  0,  0] ) ) { numNeigh -= 1 }
			//if ( isOnBoundaryOf ( p@current@[ 1,  0,  0] ) ) { numNeigh -= 1 }
			//if ( isOnBoundaryOf ( p@current@[ 0, -1,  0] ) ) { numNeigh -= 1 }
			//if ( isOnBoundaryOf ( p@current@[ 0,  1,  0] ) ) { numNeigh -= 1 }
			//if ( isOnBoundaryOf ( p@current@[ 0,  0, -1] ) ) { numNeigh -= 1 }
			//if ( isOnBoundaryOf ( p@current@[ 0,  0,  1] ) ) { numNeigh -= 1 }

			Var fac_x : Real = vf_cellWidth_y@current * vf_cellWidth_z@current
			Var fac_y : Real = vf_cellWidth_x@current * vf_cellWidth_z@current
			Var fac_z : Real = vf_cellWidth_x@current * vf_cellWidth_y@current
			Var area  : Real = 2.0 * ( fac_x + fac_y + fac_z )
			fac_x /= area
			fac_y /= area
			fac_z /= area

			if ( false ) {
				fac_x = 1.0 / 6.0
				fac_y = 1.0 / 6.0
				fac_z = 1.0 / 6.0
			}

			//delta /= numNeigh
			//if ( !isOnBoundaryOf ( p@current@[-1,  0,  0] ) ) {
				u@current@[ 0,  0,  0] -= fac_x * delta / ( vf_cellWidth_y@current * vf_cellWidth_z@current ) //* vf_cellWidth_x@current//@[ 0,  0,  0]
				p@current@[-1,  0,  0] -= fac_x * delta / vf_cellVolume@current
			//}
			//if ( !isOnBoundaryOf ( p@current@[ 1,  0,  0] ) ) {
				u@current@[ 1,  0,  0] += fac_x * delta / ( vf_cellWidth_y@current * vf_cellWidth_z@current ) //* vf_cellWidth_x@current//@[ 1,  0,  0]
				p@current@[ 1,  0,  0] -= fac_x * delta / vf_cellVolume@current
			//}

			//if ( !isOnBoundaryOf ( p@current@[ 0, -1,  0] ) ) {
				v@current@[ 0,  0,  0] -= fac_y * delta / ( vf_cellWidth_x@current * vf_cellWidth_z@current ) //* vf_cellWidth_y@current//@[ 0,  0,  0]
				p@current@[ 0, -1,  0] -= fac_y * delta / vf_cellVolume@current
			//}
			//if ( !isOnBoundaryOf ( p@current@[ 0,  1,  0] ) ) {
				v@current@[ 0,  1,  0] += fac_y * delta / ( vf_cellWidth_x@current * vf_cellWidth_z@current ) //* vf_cellWidth_y@current//@[ 0,  1,  0]
				p@current@[ 0,  1,  0] -= fac_y * delta / vf_cellVolume@current
			//}

			//if ( !isOnBoundaryOf ( p@current@[ 0,  0, -1] ) ) {
				w@current@[ 0,  0,  0] -= fac_z * delta / ( vf_cellWidth_x@current * vf_cellWidth_y@current ) //* vf_cellWidth_z@current//@[ 0,  0,  0]
				p@current@[ 0,  0, -1] -= fac_z * delta / vf_cellVolume@current
			//}
			//if ( !isOnBoundaryOf ( p@current@[ 0,  0,  1] ) ) {
				w@current@[ 0,  0,  1] += fac_z * delta / ( vf_cellWidth_x@current * vf_cellWidth_y@current ) //* vf_cellWidth_z@current//@[ 0,  0,  1]
				p@current@[ 0,  0,  1] -= fac_z * delta / vf_cellVolume@current
			//}

			p@current@[ 0,  0,  0] += delta / vf_cellVolume@current
		}

		communicate u@current
		apply bc to u@current
		communicate v@current
		apply bc to v@current
		communicate w@current
		apply bc to w@current
		communicate p@current
		apply bc to p@current
	}
}

Function Vanka@all ( ) : Unit {
	// currently allowed: [1,1,1]|[2,1,1] -> TODO: improve code through summarizing equations
	Val stride_x : Int = 1
	Val stride_y : Int = 1
	Val stride_z : Int = 1

	if ( 1 == stride_x && 1 == stride_y && 1 == stride_z ) {
		color with {
			0 == ( i0 + i1 + i2 ) % 2,
			1 == ( i0 + i1 + i2 ) % 2,

			/*( 0 == i0 % 3 && 0 == i1 % 3 && 0 == i2 % 3 ) ,
			( 1 == i0 % 3 && 0 == i1 % 3 && 0 == i2 % 3 ) ,
			( 2 == i0 % 3 && 0 == i1 % 3 && 0 == i2 % 3 ) ,
			( 0 == i0 % 3 && 1 == i1 % 3 && 0 == i2 % 3 ) ,
			( 1 == i0 % 3 && 1 == i1 % 3 && 0 == i2 % 3 ) ,
			( 2 == i0 % 3 && 1 == i1 % 3 && 0 == i2 % 3 ) ,
			( 0 == i0 % 3 && 2 == i1 % 3 && 0 == i2 % 3 ) ,
			( 1 == i0 % 3 && 2 == i1 % 3 && 0 == i2 % 3 ) ,
			( 2 == i0 % 3 && 2 == i1 % 3 && 0 == i2 % 3 ) ,
			( 0 == i0 % 3 && 0 == i1 % 3 && 1 == i2 % 3 ) ,
			( 1 == i0 % 3 && 0 == i1 % 3 && 1 == i2 % 3 ) ,
			( 2 == i0 % 3 && 0 == i1 % 3 && 1 == i2 % 3 ) ,
			( 0 == i0 % 3 && 1 == i1 % 3 && 1 == i2 % 3 ) ,
			( 1 == i0 % 3 && 1 == i1 % 3 && 1 == i2 % 3 ) ,
			( 2 == i0 % 3 && 1 == i1 % 3 && 1 == i2 % 3 ) ,
			( 0 == i0 % 3 && 2 == i1 % 3 && 1 == i2 % 3 ) ,
			( 1 == i0 % 3 && 2 == i1 % 3 && 1 == i2 % 3 ) ,
			( 2 == i0 % 3 && 2 == i1 % 3 && 1 == i2 % 3 ) ,
			( 0 == i0 % 3 && 0 == i1 % 3 && 2 == i2 % 3 ) ,
			( 1 == i0 % 3 && 0 == i1 % 3 && 2 == i2 % 3 ) ,
			( 2 == i0 % 3 && 0 == i1 % 3 && 2 == i2 % 3 ) ,
			( 0 == i0 % 3 && 1 == i1 % 3 && 2 == i2 % 3 ) ,
			( 1 == i0 % 3 && 1 == i1 % 3 && 2 == i2 % 3 ) ,
			( 2 == i0 % 3 && 1 == i1 % 3 && 2 == i2 % 3 ) ,
			( 0 == i0 % 3 && 2 == i1 % 3 && 2 == i2 % 3 ) ,
			( 1 == i0 % 3 && 2 == i1 % 3 && 2 == i2 % 3 ) ,
			( 2 == i0 % 3 && 2 == i1 % 3 && 2 == i2 % 3 ) ,*/

			loop over p@current {
				solve locally relax vankaRelax {
					// FIXME: inherit field access offset in stencil convolution
					
					u@current@[0, 0, 0] => Laplace_xStag_xStag@current@[0, 0, 0] * u@current@[0, 0, 0] + dx_Cell_xStag@current@[0, 0, 0] * p@current@[0, 0, 0] == rhs_u@current@[0, 0, 0]
					u@current@[1, 0, 0] => Laplace_xStag_xStag@current@[1, 0, 0] * u@current@[1, 0, 0] + dx_Cell_xStag@current@[1, 0, 0] * p@current@[1, 0, 0] == rhs_u@current@[1, 0, 0]

					v@current@[0, 0, 0] => Laplace_yStag_yStag@current@[0, 0, 0] * v@current@[0, 0, 0] + dy_Cell_yStag@current@[0, 0, 0] * p@current@[0, 0, 0] == rhs_v@current@[0, 0, 0]
					v@current@[0, 1, 0] => Laplace_yStag_yStag@current@[0, 1, 0] * v@current@[0, 1, 0] + dy_Cell_yStag@current@[0, 1, 0] * p@current@[0, 1, 0] == rhs_v@current@[0, 1, 0]

					w@current@[0, 0, 0] => Laplace_zStag_zStag@current@[0, 0, 0] * w@current@[0, 0, 0] + dz_Cell_zStag@current@[0, 0, 0] * p@current@[0, 0, 0] == rhs_w@current@[0, 0, 0]
					w@current@[0, 0, 1] => Laplace_zStag_zStag@current@[0, 0, 1] * w@current@[0, 0, 1] + dz_Cell_zStag@current@[0, 0, 1] * p@current@[0, 0, 1] == rhs_w@current@[0, 0, 1]

					p@current@[0, 0, 0] => dx_xStag_Cell@current@[0, 0, 0] * u@current@[0, 0, 0] + dy_yStag_Cell@current@[0, 0, 0] * v@current@[0, 0, 0] + dz_zStag_Cell@current@[0, 0, 0] * w@current@[0, 0, 0] == rhs_p@current@[0, 0, 0]
				}
			}

			communicate u@current
			apply bc to u@current
			communicate v@current
			apply bc to v@current
			communicate w@current
			apply bc to w@current
			communicate p@current
			apply bc to p@current
		}
	} else if ( 2 == stride_x && 1 == stride_y && 1 == stride_z ) {
		loop over p@current stepping [2, 1, 1] {
			solve locally relax vankaRelax {
				u@current@[0, 0, 0] => Laplace_xStag_xStag@current@[0, 0, 0] * u@current@[0, 0, 0] + dx_Cell_xStag@current@[0, 0, 0] * p@current@[0, 0, 0] == rhs_u@current@[0, 0, 0]
				u@current@[1, 0, 0] => Laplace_xStag_xStag@current@[1, 0, 0] * u@current@[1, 0, 0] + dx_Cell_xStag@current@[1, 0, 0] * p@current@[1, 0, 0] == rhs_u@current@[1, 0, 0]
				u@current@[2, 0, 0] => Laplace_xStag_xStag@current@[2, 0, 0] * u@current@[2, 0, 0] + dx_Cell_xStag@current@[2, 0, 0] * p@current@[2, 0, 0] == rhs_u@current@[2, 0, 0]

				v@current@[0, 0, 0] => Laplace_yStag_yStag@current@[0, 0, 0] * v@current@[0, 0, 0] + dy_Cell_yStag@current@[0, 0, 0] * p@current@[0, 0, 0] == rhs_v@current@[0, 0, 0]
				v@current@[0, 1, 0] => Laplace_yStag_yStag@current@[0, 1, 0] * v@current@[0, 1, 0] + dy_Cell_yStag@current@[0, 1, 0] * p@current@[0, 1, 0] == rhs_v@current@[0, 1, 0]
				v@current@[1, 0, 0] => Laplace_yStag_yStag@current@[1, 0, 0] * v@current@[1, 0, 0] + dy_Cell_yStag@current@[1, 0, 0] * p@current@[1, 0, 0] == rhs_v@current@[1, 0, 0]
				v@current@[1, 1, 0] => Laplace_yStag_yStag@current@[1, 1, 0] * v@current@[1, 1, 0] + dy_Cell_yStag@current@[1, 1, 0] * p@current@[1, 1, 0] == rhs_v@current@[1, 1, 0]

				w@current@[0, 0, 0] => Laplace_zStag_zStag@current@[0, 0, 0] * w@current@[0, 0, 0] + dz_Cell_zStag@current@[0, 0, 0] * p@current@[0, 0, 0] == rhs_w@current@[0, 0, 0]
				w@current@[0, 0, 1] => Laplace_zStag_zStag@current@[0, 0, 1] * w@current@[0, 0, 1] + dz_Cell_zStag@current@[0, 0, 1] * p@current@[0, 0, 1] == rhs_w@current@[0, 0, 1]
				w@current@[1, 0, 0] => Laplace_zStag_zStag@current@[1, 0, 0] * w@current@[1, 0, 0] + dz_Cell_zStag@current@[1, 0, 0] * p@current@[1, 0, 0] == rhs_w@current@[1, 0, 0]
				w@current@[1, 0, 1] => Laplace_zStag_zStag@current@[1, 0, 1] * w@current@[1, 0, 1] + dz_Cell_zStag@current@[1, 0, 1] * p@current@[1, 0, 1] == rhs_w@current@[1, 0, 1]

				p@current@[0, 0, 0] => dx_xStag_Cell@current@[0, 0, 0] * u@current@[0, 0, 0] + dy_yStag_Cell@current@[0, 0, 0] * v@current@[0, 0, 0] + dz_zStag_Cell@current@[0, 0, 0] * w@current@[0, 0, 0] == rhs_p@current@[0, 0, 0]
				p@current@[1, 0, 0] => dx_xStag_Cell@current@[1, 0, 0] * u@current@[1, 0, 0] + dy_yStag_Cell@current@[1, 0, 0] * v@current@[1, 0, 0] + dz_zStag_Cell@current@[1, 0, 0] * w@current@[1, 0, 0] == rhs_p@current@[1, 0, 0]
			}
		}
	}

	/*communicate u@current
	communicate v@current
	communicate w@current
	communicate p@current

	apply bc to u@current
	apply bc to v@current
	apply bc to w@current
	apply bc to p@current*/
}

/// templates for (multigrid) solver components

