// domain declarations

Domain global< [ 0.0, 0.0, 0.0 ] to [ 1.0, 1.0, 1.0 ] >

// field layout declarations

Layout defLayoutNode< Real, Node >@(1) {
	duplicateLayers = [1, 1, 1]
	ghostLayers = [0, 0, 0]
}

Layout defLayoutNode< Real, Node >@(2) {
	duplicateLayers = [1, 1, 1]
	ghostLayers = [0, 0, 0]
}

Layout defLayoutNode< Real, Node >@(3) {
	duplicateLayers = [1, 1, 1]
	ghostLayers = [0, 0, 0]
}

Layout defLayoutNode< Real, Node >@(4) {
	duplicateLayers = [1, 1, 1]
	ghostLayers = [0, 0, 0]
}

Layout defLayoutNode< Real, Node >@(5) {
	duplicateLayers = [1, 1, 1]
	ghostLayers = [0, 0, 0]
}

Layout defLayoutNode__1_1_1__1_1_1< Real, Node >@(1) {
	duplicateLayers = [1, 1, 1]
	ghostLayers = [1, 1, 1] with communication
}

Layout defLayoutNode__1_1_1__1_1_1< Real, Node >@(5) {
	duplicateLayers = [1, 1, 1]
	ghostLayers = [1, 1, 1] with communication
}

Layout defLayoutNode__1_1_1__1_1_1< Real, Node >@(2) {
	duplicateLayers = [1, 1, 1]
	ghostLayers = [1, 1, 1] with communication
}

Layout defLayoutNode__1_1_1__1_1_1< Real, Node >@(3) {
	duplicateLayers = [1, 1, 1]
	ghostLayers = [1, 1, 1] with communication
}

Layout defLayoutNode__1_1_1__1_1_1< Real, Node >@(4) {
	duplicateLayers = [1, 1, 1]
	ghostLayers = [1, 1, 1] with communication
}

Layout defLayoutNode__0_0_0__0_0_0< Real, Node >@(1) {
	duplicateLayers = [1, 1, 1]
	ghostLayers = [0, 0, 0]
}

Layout defLayoutNode__0_0_0__0_0_0< Real, Node >@(5) {
	duplicateLayers = [1, 1, 1]
	ghostLayers = [0, 0, 0]
}

Layout defLayoutNode__0_0_0__0_0_0< Real, Node >@(2) {
	duplicateLayers = [1, 1, 1]
	ghostLayers = [0, 0, 0]
}

Layout defLayoutNode__0_0_0__0_0_0< Real, Node >@(3) {
	duplicateLayers = [1, 1, 1]
	ghostLayers = [0, 0, 0]
}

Layout defLayoutNode__0_0_0__0_0_0< Real, Node >@(4) {
	duplicateLayers = [1, 1, 1]
	ghostLayers = [0, 0, 0]
}

// field declarations

Field Solution< global, defLayoutNode__1_1_1__1_1_1, 0.0 >@1

Field Solution< global, defLayoutNode__1_1_1__1_1_1, ((vf_boundaryCoord_x@current**2+(-0.5*vf_boundaryCoord_y@current**2))+(-0.5*vf_boundaryCoord_z@current**2)) >[2]@5

Field Solution< global, defLayoutNode__1_1_1__1_1_1, 0.0 >[2]@2

Field Solution< global, defLayoutNode__1_1_1__1_1_1, 0.0 >[2]@3

Field Solution< global, defLayoutNode__1_1_1__1_1_1, 0.0 >[2]@4

Field RHS< global, defLayoutNode__0_0_0__0_0_0, None >@1

Field RHS< global, defLayoutNode__0_0_0__0_0_0, None >@5

Field RHS< global, defLayoutNode__0_0_0__0_0_0, None >@2

Field RHS< global, defLayoutNode__0_0_0__0_0_0, None >@3

Field RHS< global, defLayoutNode__0_0_0__0_0_0, None >@4

Field Residual< global, defLayoutNode__0_0_0__0_0_0, 0.0 >@1

Field Residual< global, defLayoutNode__1_1_1__1_1_1, 0.0 >@2

Field Residual< global, defLayoutNode__1_1_1__1_1_1, 0.0 >@3

Field Residual< global, defLayoutNode__1_1_1__1_1_1, 0.0 >@4

Field Residual< global, defLayoutNode__1_1_1__1_1_1, 0.0 >@5

Field VecP< global, defLayoutNode__1_1_1__1_1_1, 0.0 >[2]@1

Field VecGradP< global, defLayoutNode__0_0_0__0_0_0, 0.0 >@1

// external field declarations

// stencil declarations

Stencil Laplace@(1) {
	[0, 0, 0] => (((2.0/vf_gridWidth_x@current**2)+(2.0/vf_gridWidth_y@current**2))+(2.0/vf_gridWidth_z@current**2))
	[-1, 0, 0] => (-1.0/vf_gridWidth_x@current**2)
	[1, 0, 0] => (-1.0/vf_gridWidth_x@current**2)
	[0, -1, 0] => (-1.0/vf_gridWidth_y@current**2)
	[0, 1, 0] => (-1.0/vf_gridWidth_y@current**2)
	[0, 0, -1] => (-1.0/vf_gridWidth_z@current**2)
	[0, 0, 1] => (-1.0/vf_gridWidth_z@current**2)
}

Stencil Laplace@(2) {
	[0, 0, 0] => (((2.0/vf_gridWidth_x@current**2)+(2.0/vf_gridWidth_y@current**2))+(2.0/vf_gridWidth_z@current**2))
	[-1, 0, 0] => (-1.0/vf_gridWidth_x@current**2)
	[1, 0, 0] => (-1.0/vf_gridWidth_x@current**2)
	[0, -1, 0] => (-1.0/vf_gridWidth_y@current**2)
	[0, 1, 0] => (-1.0/vf_gridWidth_y@current**2)
	[0, 0, -1] => (-1.0/vf_gridWidth_z@current**2)
	[0, 0, 1] => (-1.0/vf_gridWidth_z@current**2)
}

Stencil Laplace@(3) {
	[0, 0, 0] => (((2.0/vf_gridWidth_x@current**2)+(2.0/vf_gridWidth_y@current**2))+(2.0/vf_gridWidth_z@current**2))
	[-1, 0, 0] => (-1.0/vf_gridWidth_x@current**2)
	[1, 0, 0] => (-1.0/vf_gridWidth_x@current**2)
	[0, -1, 0] => (-1.0/vf_gridWidth_y@current**2)
	[0, 1, 0] => (-1.0/vf_gridWidth_y@current**2)
	[0, 0, -1] => (-1.0/vf_gridWidth_z@current**2)
	[0, 0, 1] => (-1.0/vf_gridWidth_z@current**2)
}

Stencil Laplace@(4) {
	[0, 0, 0] => (((2.0/vf_gridWidth_x@current**2)+(2.0/vf_gridWidth_y@current**2))+(2.0/vf_gridWidth_z@current**2))
	[-1, 0, 0] => (-1.0/vf_gridWidth_x@current**2)
	[1, 0, 0] => (-1.0/vf_gridWidth_x@current**2)
	[0, -1, 0] => (-1.0/vf_gridWidth_y@current**2)
	[0, 1, 0] => (-1.0/vf_gridWidth_y@current**2)
	[0, 0, -1] => (-1.0/vf_gridWidth_z@current**2)
	[0, 0, 1] => (-1.0/vf_gridWidth_z@current**2)
}

Stencil Laplace@(5) {
	[0, 0, 0] => (((2.0/vf_gridWidth_x@current**2)+(2.0/vf_gridWidth_y@current**2))+(2.0/vf_gridWidth_z@current**2))
	[-1, 0, 0] => (-1.0/vf_gridWidth_x@current**2)
	[1, 0, 0] => (-1.0/vf_gridWidth_x@current**2)
	[0, -1, 0] => (-1.0/vf_gridWidth_y@current**2)
	[0, 1, 0] => (-1.0/vf_gridWidth_y@current**2)
	[0, 0, -1] => (-1.0/vf_gridWidth_z@current**2)
	[0, 0, 1] => (-1.0/vf_gridWidth_z@current**2)
}

Stencil RestrictionStencil@(1) {
	[-1, -1, -1] => (0.25*(0.25*(0.25*1.0)))
	[-1, -1, 0] => (0.5*(0.25*(0.25*1.0)))
	[-1, -1, 1] => (0.25*(0.25*(0.25*1.0)))
	[-1, 0, -1] => (0.25*(0.5*(0.25*1.0)))
	[-1, 0, 0] => (0.5*(0.5*(0.25*1.0)))
	[-1, 0, 1] => (0.25*(0.5*(0.25*1.0)))
	[-1, 1, -1] => (0.25*(0.25*(0.25*1.0)))
	[-1, 1, 0] => (0.5*(0.25*(0.25*1.0)))
	[-1, 1, 1] => (0.25*(0.25*(0.25*1.0)))
	[0, -1, -1] => (0.25*(0.25*(0.5*1.0)))
	[0, -1, 0] => (0.5*(0.25*(0.5*1.0)))
	[0, -1, 1] => (0.25*(0.25*(0.5*1.0)))
	[0, 0, -1] => (0.25*(0.5*(0.5*1.0)))
	[0, 0, 0] => (0.5*(0.5*(0.5*1.0)))
	[0, 0, 1] => (0.25*(0.5*(0.5*1.0)))
	[0, 1, -1] => (0.25*(0.25*(0.5*1.0)))
	[0, 1, 0] => (0.5*(0.25*(0.5*1.0)))
	[0, 1, 1] => (0.25*(0.25*(0.5*1.0)))
	[1, -1, -1] => (0.25*(0.25*(0.25*1.0)))
	[1, -1, 0] => (0.5*(0.25*(0.25*1.0)))
	[1, -1, 1] => (0.25*(0.25*(0.25*1.0)))
	[1, 0, -1] => (0.25*(0.5*(0.25*1.0)))
	[1, 0, 0] => (0.5*(0.5*(0.25*1.0)))
	[1, 0, 1] => (0.25*(0.5*(0.25*1.0)))
	[1, 1, -1] => (0.25*(0.25*(0.25*1.0)))
	[1, 1, 0] => (0.5*(0.25*(0.25*1.0)))
	[1, 1, 1] => (0.25*(0.25*(0.25*1.0)))
}

Stencil RestrictionStencil@(2) {
	[-1, -1, -1] => (0.25*(0.25*(0.25*1.0)))
	[-1, -1, 0] => (0.5*(0.25*(0.25*1.0)))
	[-1, -1, 1] => (0.25*(0.25*(0.25*1.0)))
	[-1, 0, -1] => (0.25*(0.5*(0.25*1.0)))
	[-1, 0, 0] => (0.5*(0.5*(0.25*1.0)))
	[-1, 0, 1] => (0.25*(0.5*(0.25*1.0)))
	[-1, 1, -1] => (0.25*(0.25*(0.25*1.0)))
	[-1, 1, 0] => (0.5*(0.25*(0.25*1.0)))
	[-1, 1, 1] => (0.25*(0.25*(0.25*1.0)))
	[0, -1, -1] => (0.25*(0.25*(0.5*1.0)))
	[0, -1, 0] => (0.5*(0.25*(0.5*1.0)))
	[0, -1, 1] => (0.25*(0.25*(0.5*1.0)))
	[0, 0, -1] => (0.25*(0.5*(0.5*1.0)))
	[0, 0, 0] => (0.5*(0.5*(0.5*1.0)))
	[0, 0, 1] => (0.25*(0.5*(0.5*1.0)))
	[0, 1, -1] => (0.25*(0.25*(0.5*1.0)))
	[0, 1, 0] => (0.5*(0.25*(0.5*1.0)))
	[0, 1, 1] => (0.25*(0.25*(0.5*1.0)))
	[1, -1, -1] => (0.25*(0.25*(0.25*1.0)))
	[1, -1, 0] => (0.5*(0.25*(0.25*1.0)))
	[1, -1, 1] => (0.25*(0.25*(0.25*1.0)))
	[1, 0, -1] => (0.25*(0.5*(0.25*1.0)))
	[1, 0, 0] => (0.5*(0.5*(0.25*1.0)))
	[1, 0, 1] => (0.25*(0.5*(0.25*1.0)))
	[1, 1, -1] => (0.25*(0.25*(0.25*1.0)))
	[1, 1, 0] => (0.5*(0.25*(0.25*1.0)))
	[1, 1, 1] => (0.25*(0.25*(0.25*1.0)))
}

Stencil RestrictionStencil@(3) {
	[-1, -1, -1] => (0.25*(0.25*(0.25*1.0)))
	[-1, -1, 0] => (0.5*(0.25*(0.25*1.0)))
	[-1, -1, 1] => (0.25*(0.25*(0.25*1.0)))
	[-1, 0, -1] => (0.25*(0.5*(0.25*1.0)))
	[-1, 0, 0] => (0.5*(0.5*(0.25*1.0)))
	[-1, 0, 1] => (0.25*(0.5*(0.25*1.0)))
	[-1, 1, -1] => (0.25*(0.25*(0.25*1.0)))
	[-1, 1, 0] => (0.5*(0.25*(0.25*1.0)))
	[-1, 1, 1] => (0.25*(0.25*(0.25*1.0)))
	[0, -1, -1] => (0.25*(0.25*(0.5*1.0)))
	[0, -1, 0] => (0.5*(0.25*(0.5*1.0)))
	[0, -1, 1] => (0.25*(0.25*(0.5*1.0)))
	[0, 0, -1] => (0.25*(0.5*(0.5*1.0)))
	[0, 0, 0] => (0.5*(0.5*(0.5*1.0)))
	[0, 0, 1] => (0.25*(0.5*(0.5*1.0)))
	[0, 1, -1] => (0.25*(0.25*(0.5*1.0)))
	[0, 1, 0] => (0.5*(0.25*(0.5*1.0)))
	[0, 1, 1] => (0.25*(0.25*(0.5*1.0)))
	[1, -1, -1] => (0.25*(0.25*(0.25*1.0)))
	[1, -1, 0] => (0.5*(0.25*(0.25*1.0)))
	[1, -1, 1] => (0.25*(0.25*(0.25*1.0)))
	[1, 0, -1] => (0.25*(0.5*(0.25*1.0)))
	[1, 0, 0] => (0.5*(0.5*(0.25*1.0)))
	[1, 0, 1] => (0.25*(0.5*(0.25*1.0)))
	[1, 1, -1] => (0.25*(0.25*(0.25*1.0)))
	[1, 1, 0] => (0.5*(0.25*(0.25*1.0)))
	[1, 1, 1] => (0.25*(0.25*(0.25*1.0)))
}

Stencil RestrictionStencil@(4) {
	[-1, -1, -1] => (0.25*(0.25*(0.25*1.0)))
	[-1, -1, 0] => (0.5*(0.25*(0.25*1.0)))
	[-1, -1, 1] => (0.25*(0.25*(0.25*1.0)))
	[-1, 0, -1] => (0.25*(0.5*(0.25*1.0)))
	[-1, 0, 0] => (0.5*(0.5*(0.25*1.0)))
	[-1, 0, 1] => (0.25*(0.5*(0.25*1.0)))
	[-1, 1, -1] => (0.25*(0.25*(0.25*1.0)))
	[-1, 1, 0] => (0.5*(0.25*(0.25*1.0)))
	[-1, 1, 1] => (0.25*(0.25*(0.25*1.0)))
	[0, -1, -1] => (0.25*(0.25*(0.5*1.0)))
	[0, -1, 0] => (0.5*(0.25*(0.5*1.0)))
	[0, -1, 1] => (0.25*(0.25*(0.5*1.0)))
	[0, 0, -1] => (0.25*(0.5*(0.5*1.0)))
	[0, 0, 0] => (0.5*(0.5*(0.5*1.0)))
	[0, 0, 1] => (0.25*(0.5*(0.5*1.0)))
	[0, 1, -1] => (0.25*(0.25*(0.5*1.0)))
	[0, 1, 0] => (0.5*(0.25*(0.5*1.0)))
	[0, 1, 1] => (0.25*(0.25*(0.5*1.0)))
	[1, -1, -1] => (0.25*(0.25*(0.25*1.0)))
	[1, -1, 0] => (0.5*(0.25*(0.25*1.0)))
	[1, -1, 1] => (0.25*(0.25*(0.25*1.0)))
	[1, 0, -1] => (0.25*(0.5*(0.25*1.0)))
	[1, 0, 0] => (0.5*(0.5*(0.25*1.0)))
	[1, 0, 1] => (0.25*(0.5*(0.25*1.0)))
	[1, 1, -1] => (0.25*(0.25*(0.25*1.0)))
	[1, 1, 0] => (0.5*(0.25*(0.25*1.0)))
	[1, 1, 1] => (0.25*(0.25*(0.25*1.0)))
}

Stencil RestrictionStencil@(5) {
	[-1, -1, -1] => (0.25*(0.25*(0.25*1.0)))
	[-1, -1, 0] => (0.5*(0.25*(0.25*1.0)))
	[-1, -1, 1] => (0.25*(0.25*(0.25*1.0)))
	[-1, 0, -1] => (0.25*(0.5*(0.25*1.0)))
	[-1, 0, 0] => (0.5*(0.5*(0.25*1.0)))
	[-1, 0, 1] => (0.25*(0.5*(0.25*1.0)))
	[-1, 1, -1] => (0.25*(0.25*(0.25*1.0)))
	[-1, 1, 0] => (0.5*(0.25*(0.25*1.0)))
	[-1, 1, 1] => (0.25*(0.25*(0.25*1.0)))
	[0, -1, -1] => (0.25*(0.25*(0.5*1.0)))
	[0, -1, 0] => (0.5*(0.25*(0.5*1.0)))
	[0, -1, 1] => (0.25*(0.25*(0.5*1.0)))
	[0, 0, -1] => (0.25*(0.5*(0.5*1.0)))
	[0, 0, 0] => (0.5*(0.5*(0.5*1.0)))
	[0, 0, 1] => (0.25*(0.5*(0.5*1.0)))
	[0, 1, -1] => (0.25*(0.25*(0.5*1.0)))
	[0, 1, 0] => (0.5*(0.25*(0.5*1.0)))
	[0, 1, 1] => (0.25*(0.25*(0.5*1.0)))
	[1, -1, -1] => (0.25*(0.25*(0.25*1.0)))
	[1, -1, 0] => (0.5*(0.25*(0.25*1.0)))
	[1, -1, 1] => (0.25*(0.25*(0.25*1.0)))
	[1, 0, -1] => (0.25*(0.5*(0.25*1.0)))
	[1, 0, 0] => (0.5*(0.5*(0.25*1.0)))
	[1, 0, 1] => (0.25*(0.5*(0.25*1.0)))
	[1, 1, -1] => (0.25*(0.25*(0.25*1.0)))
	[1, 1, 0] => (0.5*(0.25*(0.25*1.0)))
	[1, 1, 1] => (0.25*(0.25*(0.25*1.0)))
}

Stencil CorrectionStencil@(1) {
	[0, 0, 0] => (0.5*(0.5*(0.5*1.0)))
	[0, 0, (z%2)] => (0.5*(0.5*(0.5*1.0)))
	[0, (y%2), 0] => (0.5*(0.5*(0.5*1.0)))
	[0, (y%2), (z%2)] => (0.5*(0.5*(0.5*1.0)))
	[(x%2), 0, 0] => (0.5*(0.5*(0.5*1.0)))
	[(x%2), 0, (z%2)] => (0.5*(0.5*(0.5*1.0)))
	[(x%2), (y%2), 0] => (0.5*(0.5*(0.5*1.0)))
	[(x%2), (y%2), (z%2)] => (0.5*(0.5*(0.5*1.0)))
}

Stencil CorrectionStencil@(2) {
	[0, 0, 0] => (0.5*(0.5*(0.5*1.0)))
	[0, 0, (z%2)] => (0.5*(0.5*(0.5*1.0)))
	[0, (y%2), 0] => (0.5*(0.5*(0.5*1.0)))
	[0, (y%2), (z%2)] => (0.5*(0.5*(0.5*1.0)))
	[(x%2), 0, 0] => (0.5*(0.5*(0.5*1.0)))
	[(x%2), 0, (z%2)] => (0.5*(0.5*(0.5*1.0)))
	[(x%2), (y%2), 0] => (0.5*(0.5*(0.5*1.0)))
	[(x%2), (y%2), (z%2)] => (0.5*(0.5*(0.5*1.0)))
}

Stencil CorrectionStencil@(3) {
	[0, 0, 0] => (0.5*(0.5*(0.5*1.0)))
	[0, 0, (z%2)] => (0.5*(0.5*(0.5*1.0)))
	[0, (y%2), 0] => (0.5*(0.5*(0.5*1.0)))
	[0, (y%2), (z%2)] => (0.5*(0.5*(0.5*1.0)))
	[(x%2), 0, 0] => (0.5*(0.5*(0.5*1.0)))
	[(x%2), 0, (z%2)] => (0.5*(0.5*(0.5*1.0)))
	[(x%2), (y%2), 0] => (0.5*(0.5*(0.5*1.0)))
	[(x%2), (y%2), (z%2)] => (0.5*(0.5*(0.5*1.0)))
}

Stencil CorrectionStencil@(4) {
	[0, 0, 0] => (0.5*(0.5*(0.5*1.0)))
	[0, 0, (z%2)] => (0.5*(0.5*(0.5*1.0)))
	[0, (y%2), 0] => (0.5*(0.5*(0.5*1.0)))
	[0, (y%2), (z%2)] => (0.5*(0.5*(0.5*1.0)))
	[(x%2), 0, 0] => (0.5*(0.5*(0.5*1.0)))
	[(x%2), 0, (z%2)] => (0.5*(0.5*(0.5*1.0)))
	[(x%2), (y%2), 0] => (0.5*(0.5*(0.5*1.0)))
	[(x%2), (y%2), (z%2)] => (0.5*(0.5*(0.5*1.0)))
}

Stencil CorrectionStencil@(5) {
	[0, 0, 0] => (0.5*(0.5*(0.5*1.0)))
	[0, 0, (z%2)] => (0.5*(0.5*(0.5*1.0)))
	[0, (y%2), 0] => (0.5*(0.5*(0.5*1.0)))
	[0, (y%2), (z%2)] => (0.5*(0.5*(0.5*1.0)))
	[(x%2), 0, 0] => (0.5*(0.5*(0.5*1.0)))
	[(x%2), 0, (z%2)] => (0.5*(0.5*(0.5*1.0)))
	[(x%2), (y%2), 0] => (0.5*(0.5*(0.5*1.0)))
	[(x%2), (y%2), (z%2)] => (0.5*(0.5*(0.5*1.0)))
}

// stencil field declarations

Domain global< [ 0.0, 0.0, 0.0 ] to [ 1.0, 1.0, 1.0 ] >

Function NormError@finest ( ) : Real {
	communicate Solution@current
	Variable err : Real = 0
	loop over Solution@current where (((x>0)&&(y>0))&&(z>0))with reduction ( + : err ) {
		Variable curErr : Real = (Solution[activeSlot]@current-(((vf_nodePosition_x@current*vf_nodePosition_x@current)-((0.5*vf_nodePosition_y@current)*vf_nodePosition_y@current))-((0.5*vf_nodePosition_z@current)*vf_nodePosition_z@current)))
		err += (curErr*curErr)
	}
	return sqrt ( err )
}

Function Application ( ) : Unit {
	initGlobals (  )
	initDomain (  )
	initFieldsWithZero (  )
	InitFields (  )
	apply bc to Solution[0]@finest
	apply bc to Solution[1]@finest
	Solve (  )
	destroyGlobals (  )
}

Function Solve ( ) : Unit {
	loop over Residual@5 {
		Residual@5 = (RHS@5-(Laplace@5*Solution@5))
	}
	Variable resStart_0 : Real = NormResidual@5 (  )
	Variable res_0 : Real = resStart_0
	Variable resOld_0 : Real = 0
	print ( "Starting residual at 0", resStart_0 )
	repeat until (res_0<(1.0E-5*resStart_0)){
		VCycle@5 (  )
		loop over Residual@5 {
			Residual@5 = (RHS@5-(Laplace@5*Solution@5))
		}
		resOld_0 = res_0
		res_0 = NormResidual@5 (  )
		print ( "Residual at 0:", res_0, "Residual reduction:", (resStart_0/res_0), "Convergence factor:", (res_0/resOld_0) )
		Variable curError_0 : Real = NormError@5 (  )
		print ( "Error at 0:", curError_0 )
	}
}

Function InitFields ( ) : Unit {
	loop over Solution@1 {
		Solution@1 = 0.0
	}
	loop over Solution@5 {
		Solution@5 = 0.0
	}
	loop over Solution@2 {
		Solution@2 = 0.0
	}
	loop over Solution@3 {
		Solution@3 = 0.0
	}
	loop over Solution@4 {
		Solution@4 = 0.0
	}
	loop over RHS@1 {
		RHS@1 = 0.0
	}
	loop over RHS@5 {
		RHS@5 = 0.0
	}
	loop over RHS@2 {
		RHS@2 = 0.0
	}
	loop over RHS@3 {
		RHS@3 = 0.0
	}
	loop over RHS@4 {
		RHS@4 = 0.0
	}
	loop over Residual@1 {
		Residual@1 = 0.0
	}
	loop over Residual@2 {
		Residual@2 = 0.0
	}
	loop over Residual@3 {
		Residual@3 = 0.0
	}
	loop over Residual@4 {
		Residual@4 = 0.0
	}
	loop over Residual@5 {
		Residual@5 = 0.0
	}
	loop over VecP@1 {
		VecP@1 = 0.0
	}
	loop over VecGradP@1 {
		VecGradP@1 = 0.0
	}
}

Function Smoother@(2, 3, 4, 5) ( ) : Unit {
	Value omega : Real = 0.8
	repeat 3 times {
		loop over Solution[nextSlot]@current {
			Solution[nextSlot]@current = (Solution@current+((omega*diag_inv ( Laplace@current ))*(RHS@current-(Laplace@current*Solution@current))))
		}
		advance Solution@current
	}
}

Function VCycle@(2, 3, 4, 5) ( ) : Unit {
	Smoother@current (  )
	loop over Residual@current {
		Residual@current = (RHS@current-(Laplace@current*Solution@current))
	}
	loop over RHS@coarser {
		RHS@coarser = (RestrictionStencil@current*Residual@current)
	}
	loop over Solution@coarser {
		Solution@coarser = 0.0
	}
	VCycle@coarser (  )
	loop over Solution@current {
		Solution@current += (CorrectionStencil@current*Solution@coarser)
	}
	Smoother@current (  )
}

Function VCycle@(1) ( ) : Unit {
	loop over Residual@current {
		Residual@current = (RHS@current-(Laplace@current*Solution@current))
	}
	Variable res : Real = NormResidual@current (  )
	Variable initialRes : Real = res
	loop over VecP@current {
		VecP@current = Residual@current
	}
	Variable cgSteps : Integer = 0
	repeat 512 times count cgSteps {
		loop over VecGradP@current {
			VecGradP@current = (Laplace@current*VecP@current)
		}
		Variable reductionVar_0 : Real = 0.0
		loop over VecP@current with reduction ( + : reductionVar_0 ) {
			reductionVar_0 += (VecP@current*VecGradP@current)
		}
		Variable alphaDenom : Real = reductionVar_0
		Variable alpha : Real = ((res*res)/alphaDenom)
		loop over Solution@current {
			Solution@current += (alpha*VecP@current)
		}
		loop over Residual@current {
			Residual@current -= (alpha*VecGradP@current)
		}
		Variable nextRes : Real = NormResidual@current (  )
		if ((nextRes<=(0.001*initialRes))) {
			return
		}
		Variable beta : Real = ((nextRes*nextRes)/(res*res))
		loop over VecP[nextSlot]@current {
			VecP[nextSlot]@current = (Residual@current+(beta*VecP@current))
		}
		advance VecP@current
		res = nextRes
	}
	print ( "Maximum number of cgs iterations (", 512, ") was exceeded" )
}

Function NormResidual@(1, 5) ( ) : Real {
	Variable reductionVar_0 : Real = 0.0
	loop over Residual@current with reduction ( + : reductionVar_0 ) {
		reductionVar_0 += (Residual@current*Residual@current)
	}
	return sqrt ( reductionVar_0 )
}

