/// progressed from L2

//Field u    from L2
//Field v    from L2
//Field w    from L2
//Field rho  from L2
//Field phi7 from L2
//
//Field pc   from L2
//
//Operator AuStencil  from L2
//Operator AvStencil  from L2
//Operator AwStencil  from L2
//Operator ApcStencil from L2
//Operator AtStencil  from L2

/// Fields

Field p    from rho

Field residual_u  from u
Field residual_v  from v
Field residual_w  from w
Field residual_pc from pc
Field residual_t  from phi7

override bc for residual_t@all with applyBC_res_t@current ( )

Field rhs_u       from u
Field rhs_v       from v
Field rhs_w       from w
Field rhs_pc      from pc
Field rhs_t       from phi7

override bc for rhs_u@all  with None
override bc for rhs_v@all  with None
override bc for rhs_w@all  with None
override bc for rhs_pc@all with None
override bc for rhs_t@all  with None

Field du@finest   from u
Field dv@finest   from v
Field dw@finest   from w

override bc for du@finest  with None
override bc for dv@finest  with None
override bc for dw@finest  with None

/// Operators

Operator RestrictionCell from Stencil {
	[ 0,  0,  0] => 0.125
    [ 0,  0,  1] => 0.125
    [ 0,  1,  0] => 0.125
    [ 1,  0,  0] => 0.125
    [ 0,  1,  1] => 0.125
    [ 1,  0,  1] => 0.125
    [ 1,  1,  0] => 0.125
    [ 1,  1,  1] => 0.125
}

Operator RestrictionFaceX from Stencil {
	[ 0,  0,  0] => 0.125
	[-1,  0,  0] => 0.0625
	[ 1,  0,  0] => 0.0625

	[ 0,  1,  0] => 0.125
	[-1,  1,  0] => 0.0625
	[ 1,  1,  0] => 0.0625

	[ 0,  0,  1] => 0.125
	[-1,  0,  1] => 0.0625
	[ 1,  0,  1] => 0.0625

	[ 0,  1,  1] => 0.125
	[-1,  1,  1] => 0.0625
	[ 1,  1,  1] => 0.0625
}

Operator RestrictionFaceY from Stencil {
	[ 0,  0,  0] => 0.125
	[ 0, -1,  0] => 0.0625
	[ 0,  1,  0] => 0.0625

	[ 0,  0,  1] => 0.125
	[ 0, -1,  1] => 0.0625
	[ 0,  1,  1] => 0.0625

	[ 1,  0,  0] => 0.125
	[ 1, -1,  0] => 0.0625
	[ 1,  1,  0] => 0.0625

	[ 1,  0,  1] => 0.125
	[ 1, -1,  1] => 0.0625
	[ 1,  1,  1] => 0.0625
}

Operator RestrictionFaceZ from Stencil {
	[ 0,  0,  0] => 0.125
	[ 0,  0, -1] => 0.0625
	[ 0,  0,  1] => 0.0625

	[ 1,  0,  0] => 0.125
	[ 1,  0, -1] => 0.0625
	[ 1,  0,  1] => 0.0625

	[ 0,  1,  0] => 0.125
	[ 0,  1, -1] => 0.0625
	[ 0,  1,  1] => 0.0625

	[ 1,  1,  0] => 0.125
	[ 1,  1, -1] => 0.0625
	[ 1,  1,  1] => 0.0625
}


Operator CorrectionCell from Stencil {
	[ 0,  0,  0] => 1.0
}

Operator CorrectionFaceX from Stencil {
	[    0,  0,  0] => 0.5
	[x % 2,  0,  0] => 0.5
}

Operator CorrectionFaceY from Stencil {
	[ 0,     0,  0] => 0.5
	[ 0, y % 2,  0] => 0.5
}

Operator CorrectionFaceZ from Stencil {
	[ 0,  0,     0] => 0.5
	[ 0,  0, z % 2] => 0.5
}

/// Functions

Function AdvanceFields@finest {
	u = u
	v = v
	w = w
	rho = rho
	phi7 = phi7
}


FunctionTemplate SmoothComponent < solution, stencil, rhs, omega > {
	repeat 3 times {
		solution += ( ( 1.0 / diag ( stencil ) ) * omega ) * ( rhs - stencil * solution ) where 0 == ((x + y + z) % 2)
		solution += ( ( 1.0 / diag ( stencil ) ) * omega ) * ( rhs - stencil * solution ) where 1 == ((x + y + z) % 2)
	}
}

Instantiate SmoothComponent < u, AuStencil, rhs_u, 1.0 > as Smooth_u@all
Instantiate SmoothComponent < v, AvStencil, rhs_v, 1.0 > as Smooth_v@all
Instantiate SmoothComponent < w, AwStencil, rhs_w, 1.0 > as Smooth_w@all
Instantiate SmoothComponent < pc, ApcStencil, rhs_pc, 0.8 > as Smooth_pc@all
Instantiate SmoothComponent < phi7, AtStencil, rhs_t, 1.0 > as Smooth_t@all

FunctionTemplate VCycleComponent < VCycle, Smooth,  solution, rhs, residual, stencil, restrictionStencil, correctionStencil > {
	Smooth@current ( )
	
	residual = rhs - stencil * solution
	rhs@coarser = restrictionStencil * residual
	
	solution@coarser = 0.0
	VCycle@coarser ( )
	
	solution += correctionStencil * solution@coarser
	
	Smooth@current ( )
}

Instantiate VCycleComponent < VCycle_u, Smooth_u,  u, rhs_u, residual_u, AuStencil, RestrictionFaceX, CorrectionFaceX > as VCycle_u@( ( coarsest + 1 ) to finest )
Instantiate VCycleComponent < VCycle_v, Smooth_v,  v, rhs_v, residual_v, AvStencil, RestrictionFaceY, CorrectionFaceY > as VCycle_v@( ( coarsest + 1 ) to finest )
Instantiate VCycleComponent < VCycle_w, Smooth_w,  w, rhs_w, residual_w, AwStencil, RestrictionFaceZ, CorrectionFaceZ > as VCycle_w@( ( coarsest + 1 ) to finest )
Instantiate VCycleComponent < VCycle_pc, Smooth_pc,  pc, rhs_pc, residual_pc, ApcStencil, RestrictionCell, CorrectionCell > as VCycle_pc@( ( coarsest + 1 ) to finest )
Instantiate VCycleComponent < VCycle_t, Smooth_t,  phi7, rhs_t, residual_t, AtStencil, RestrictionCell, CorrectionCell > as VCycle_t@( ( coarsest + 1 ) to finest )

FunctionTemplate CGSComponent < solution, stencil, rhs, omega > {
	repeat 4 times {
		solution += ( ( 1.0 / diag ( stencil ) ) * omega ) * ( rhs - stencil * solution ) where 0 == ((x + y + z) % 2)
		solution += ( ( 1.0 / diag ( stencil ) ) * omega ) * ( rhs - stencil * solution ) where 1 == ((x + y + z) % 2)
	}
}

Instantiate CGSComponent < u, AuStencil, rhs_u, 1.0 > as VCycle_u@coarsest
Instantiate CGSComponent < v, AvStencil, rhs_v, 1.0 > as VCycle_v@coarsest
Instantiate CGSComponent < w, AwStencil, rhs_w, 1.0 > as VCycle_w@coarsest
Instantiate CGSComponent < pc, ApcStencil, rhs_pc, 0.8 > as VCycle_pc@coarsest
Instantiate CGSComponent < phi7, AtStencil, rhs_t, 1.0 > as VCycle_t@coarsest

FunctionTemplate UpdateResidualComponent < solution, stencil, rhs, residual > {
	residual = rhs - stencil * solution
}

Instantiate UpdateResidualComponent < u, AuStencil, rhs_u, residual_u > as UpdateResidual_u@coarsest
Instantiate UpdateResidualComponent < v, AvStencil, rhs_v, residual_v > as UpdateResidual_v@coarsest
Instantiate UpdateResidualComponent < w, AwStencil, rhs_w, residual_w > as UpdateResidual_w@coarsest
Instantiate UpdateResidualComponent < pc, ApcStencil, rhs_pc, residual_pc > as UpdateResidual_pc@coarsest
Instantiate UpdateResidualComponent < phi7, AtStencil, rhs_t, residual_t > as UpdateResidual_t@coarsest

FunctionTemplate NormResidualComponent < solution, stencil, rhs, residual > : Real {
	// FIXME: support return sqrt ( ( rhs - stencil * solution ) ** 2 )
	//        requires the new type system
	// TODO: check conditional reductions
	residual = rhs - stencil * solution
	return sqrt ( residual * residual )
}

Instantiate NormResidualComponent < u, AuStencil, rhs_u, residual_u > as NormResidual_u@finest
Instantiate NormResidualComponent < v, AvStencil, rhs_v, residual_v > as NormResidual_v@finest
Instantiate NormResidualComponent < w, AwStencil, rhs_w, residual_w > as NormResidual_w@finest
Instantiate NormResidualComponent < pc, ApcStencil, rhs_pc, residual_pc > as NormResidual_pc@finest
Instantiate NormResidualComponent < phi7, AtStencil, rhs_t, residual_t > as NormResidual_t@finest
