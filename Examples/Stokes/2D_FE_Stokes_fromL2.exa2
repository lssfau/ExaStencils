
Domain global< [ 0, 0 ] to [ 1, 1 ] >


Field p with Real on Node of global = 0.0
Field p on boundary = 0.0


Field uNode  with Real on Node   of global = 0.0
Field uEdgeX with Real on Face_x of global = 0.0
Field uEdgeY with Real on Face_y of global = 0.0
Field uEdgeD with Real on Cell   of global = 0.0

Field uNode@(all but finest)  on boundary = 0.0
Field uEdgeX@(all but finest) on boundary = 0.0
Field uEdgeY@(all but finest) on boundary = 0.0
Field uEdgeD@(all but finest) on boundary = 0.0


Field vNode  with Real on Node   of global = 0.0
Field vEdgeX with Real on Face_x of global = 0.0
Field vEdgeY with Real on Face_y of global = 0.0
Field vEdgeD with Real on Cell   of global = 0.0

Field vNode@(all but finest)  on boundary = 0.0
Field vEdgeX@(all but finest) on boundary = 0.0
Field vEdgeY@(all but finest) on boundary = 0.0
Field vEdgeD@(all but finest) on boundary = 0.0

//// TEST PROBLEM 1 ////
// u = sin ( PI * x ) * sin ( PI * y )
// v = cos ( PI * x ) * cos ( PI * y )
// p = sin ( PI * x ) * sin ( PI * y )
// rhs_u = 2 * PI**2 * sin ( PI * x ) * sin ( PI * y ) + PI * cos ( PI * x ) * sin ( PI * y )
// rhs_v = 2 * PI**2 * cos ( PI * x ) * cos ( PI * y ) + PI * sin ( PI * x ) * cos ( PI * y )
// rhs_p = 0
/*
Field uNode@finest  on boundary = sin ( PI * vf_boundaryCoord_x ) * sin ( PI * vf_boundaryCoord_y )
Field uEdgeX@finest on boundary = sin ( PI * vf_boundaryCoord_x ) * sin ( PI * vf_boundaryCoord_y )
Field uEdgeY@finest on boundary = sin ( PI * vf_boundaryCoord_x ) * sin ( PI * vf_boundaryCoord_y )
Field uEdgeD@finest on boundary = sin ( PI * vf_boundaryCoord_x ) * sin ( PI * vf_boundaryCoord_y )

Field vNode@finest  on boundary = cos ( PI * vf_boundaryCoord_x ) * cos ( PI * vf_boundaryCoord_y )
Field vEdgeX@finest on boundary = cos ( PI * vf_boundaryCoord_x ) * cos ( PI * vf_boundaryCoord_y )
Field vEdgeY@finest on boundary = cos ( PI * vf_boundaryCoord_x ) * cos ( PI * vf_boundaryCoord_y )
Field vEdgeD@finest on boundary = cos ( PI * vf_boundaryCoord_x ) * cos ( PI * vf_boundaryCoord_y )

Field rhs_p with Real on Node of global = 0.0 // TODO: might require stencil if != 0

// 2 * PI**2 * sin ( PI * x ) * sin ( PI * y ) + PI * cos ( PI * x )
Field rhs_uNode@finest  with Real on Node   of global = 2.0 * ( PI**2 ) * sin ( PI * vf_nodePos_x    ) * sin ( PI * vf_nodePos_y    ) + PI * cos ( PI * vf_nodePos_x    ) * sin ( PI * vf_nodePos_y    ) // 0.0
Field rhs_uEdgeX@finest with Real on Face_x of global = 2.0 * ( PI**2 ) * sin ( PI * vf_nodePos_x    ) * sin ( PI * vf_cellCenter_y ) + PI * cos ( PI * vf_nodePos_x    ) * sin ( PI * vf_cellCenter_y ) // 0.0
Field rhs_uEdgeY@finest with Real on Face_y of global = 2.0 * ( PI**2 ) * sin ( PI * vf_cellCenter_x ) * sin ( PI * vf_nodePos_y    ) + PI * cos ( PI * vf_cellCenter_x ) * sin ( PI * vf_nodePos_y    ) // 0.0
Field rhs_uEdgeD@finest with Real on Cell   of global = 2.0 * ( PI**2 ) * sin ( PI * vf_cellCenter_x ) * sin ( PI * vf_cellCenter_y ) + PI * cos ( PI * vf_cellCenter_x ) * sin ( PI * vf_cellCenter_y ) // 0.0

// 2 * PI**2 * cos ( PI * x ) * cos ( PI * y ) - PI * sin ( PI * y )
Field rhs_vNode@finest  with Real on Node   of global = 2.0 * ( PI**2 ) * cos ( PI * vf_nodePos_x    ) * cos ( PI * vf_nodePos_y    ) + PI * sin ( PI * vf_nodePos_x    ) * cos ( PI * vf_nodePos_y    ) // 0.0
Field rhs_vEdgeX@finest with Real on Face_x of global = 2.0 * ( PI**2 ) * cos ( PI * vf_nodePos_x    ) * cos ( PI * vf_cellCenter_y ) + PI * sin ( PI * vf_nodePos_x    ) * cos ( PI * vf_cellCenter_y ) // 0.0
Field rhs_vEdgeY@finest with Real on Face_y of global = 2.0 * ( PI**2 ) * cos ( PI * vf_cellCenter_x ) * cos ( PI * vf_nodePos_y    ) + PI * sin ( PI * vf_cellCenter_x ) * cos ( PI * vf_nodePos_y    ) // 0.0
Field rhs_vEdgeD@finest with Real on Cell   of global = 2.0 * ( PI**2 ) * cos ( PI * vf_cellCenter_x ) * cos ( PI * vf_cellCenter_y ) + PI * sin ( PI * vf_cellCenter_x ) * cos ( PI * vf_cellCenter_y ) // 0.0
*/
//// END OF TEST PROBLEM 1 ////

//// TEST PROBLEM 2 ////
// u = -4.0 * cos ( 4.0 * y )
// v =  2.0 * cos ( 2.0 * x )
// p =  sin ( 4.0 * x ) * sin ( 2.0 * y )
// rhs_u = 4.0 * sin ( 2.0 * y ) * cos ( 4.0 * x ) - 64.0 * cos ( 4.0 * y )
// rhs_v = 2.0 * sin ( 4.0 * x ) * cos ( 2.0 * y ) + 8.0  * cos ( 2.0 * x )
// rhs_p = 0

Field uNode@finest  on boundary = -4.0 * cos ( 4.0 * vf_boundaryCoord_y )
Field uEdgeX@finest on boundary = -4.0 * cos ( 4.0 * vf_boundaryCoord_y )
Field uEdgeY@finest on boundary = -4.0 * cos ( 4.0 * vf_boundaryCoord_y )
Field uEdgeD@finest on boundary = -4.0 * cos ( 4.0 * vf_boundaryCoord_y )

Field vNode@finest  on boundary =  2.0 * cos ( 2.0 * vf_boundaryCoord_x )
Field vEdgeX@finest on boundary =  2.0 * cos ( 2.0 * vf_boundaryCoord_x )
Field vEdgeY@finest on boundary =  2.0 * cos ( 2.0 * vf_boundaryCoord_x )
Field vEdgeD@finest on boundary =  2.0 * cos ( 2.0 * vf_boundaryCoord_x )

Field rhs_p with Real on Node of global = 0.0 // TODO: might require stencil if != 0

// 4.0 * sin ( 2.0 * y ) * cos ( 4.0 * x ) - 64.0 * cos ( 4.0 * y )
Field rhs_uNode@finest  with Real on Node   of global = 4.0 * sin ( 2.0 * vf_nodePos_y    ) * cos ( 4.0 * vf_nodePos_x    ) - 64.0 * cos ( 4.0 * vf_nodePos_y    )
Field rhs_uEdgeX@finest with Real on Face_x of global = 4.0 * sin ( 2.0 * vf_nodePos_y    ) * cos ( 4.0 * vf_cellCenter_x ) - 64.0 * cos ( 4.0 * vf_nodePos_y    )
Field rhs_uEdgeY@finest with Real on Face_y of global = 4.0 * sin ( 2.0 * vf_cellCenter_y ) * cos ( 4.0 * vf_nodePos_x    ) - 64.0 * cos ( 4.0 * vf_cellCenter_y )
Field rhs_uEdgeD@finest with Real on Cell   of global = 4.0 * sin ( 2.0 * vf_cellCenter_y ) * cos ( 4.0 * vf_cellCenter_x ) - 64.0 * cos ( 4.0 * vf_cellCenter_y )

// 2.0 * sin ( 4.0 * x ) * cos ( 2.0 * y ) + 8.0  * cos ( 2.0 * x )
Field rhs_vNode@finest  with Real on Node   of global = 2.0 * sin ( 4.0 * vf_nodePos_x    ) * cos ( 2.0 * vf_nodePos_y    ) +  8.0 * cos ( 2.0 * vf_nodePos_x    )
Field rhs_vEdgeX@finest with Real on Face_x of global = 2.0 * sin ( 4.0 * vf_nodePos_x    ) * cos ( 2.0 * vf_cellCenter_y ) +  8.0 * cos ( 2.0 * vf_cellCenter_x )
Field rhs_vEdgeY@finest with Real on Face_y of global = 2.0 * sin ( 4.0 * vf_cellCenter_x ) * cos ( 2.0 * vf_nodePos_y    ) +  8.0 * cos ( 2.0 * vf_nodePos_x    )
Field rhs_vEdgeD@finest with Real on Cell   of global = 2.0 * sin ( 4.0 * vf_cellCenter_x ) * cos ( 2.0 * vf_cellCenter_y ) +  8.0 * cos ( 2.0 * vf_cellCenter_x )

//// END OF TEST PROBLEM 2 ////


Equation uNodeEquation@finest {
	( 1.0 / ( vf_gridWidth_x ** 2 ) ) * (
		4.0 * uNode@[0,0] - 4.0/3.0 * ( uEdgeY@[0,0] + uEdgeY@[-1,0] + uEdgeX@[0,0] + uEdgeX@[0,-1] ) + 1.0/3.0 * ( uNode@[1,0] + uNode@[-1,0] + uNode@[0,1] + uNode@[0,-1] )
	) + 0.0 * p@[0,0]
	== ( 1.0 / ( vf_gridWidth_x ** 2 ) ) * (
		  1.0/10.0  *   rhs_uNode
		- 1.0/180.0 * ( rhs_uNode@[0,1] + rhs_uNode@[1,0] + rhs_uNode@[1,1] + rhs_uNode@[0,-1] + rhs_uNode@[-1,0] + rhs_uNode@[-1,-1] )
		- 1.0/90.0  * ( rhs_uEdgeX@[1,0] + rhs_uEdgeX@[-1,-1] + rhs_uEdgeY@[0,1] + rhs_uEdgeY@[-1,-1] + rhs_uEdgeD@[-1,0] + rhs_uEdgeD@[0,-1] )
	)
}
Equation uEdgeXEquation@finest {
	( 1.0 / ( vf_gridWidth_x ** 2 ) ) * (
		16.0/3.0 * uEdgeX@[0,0] - 4.0/3.0 * ( uNode@[0,0] + uNode@[0,1] + uEdgeD@[0,0] + uEdgeD@[-1,0] )
	) + ( 1.0 / ( vf_gridWidth_x ) ) * (
		1.0/6.0 * ( p@[0,0] - p@[-1,0] - p@[0,1] + p@[1,1] ) 
	)	== ( 1.0 / ( vf_gridWidth_x ** 2 ) ) * (
		8.0/45.0 * rhs_uEdgeX
		+ 2.0/45.0 * ( rhs_uEdgeY@[0,1] + rhs_uEdgeY@[-1,0] + rhs_uEdgeD@[0,0] + rhs_uEdgeD@[-1,0] )
		- 1.0/90.0 * ( rhs_uNode@[-1,0] + rhs_uNode@[1,1] )
	)
}
Equation uEdgeYEquation@finest {
	( 1.0 / ( vf_gridWidth_x ** 2 ) ) * (
		16.0/3.0 * uEdgeY@[0,0] - 4.0/3.0 * ( uNode@[0,0] + uNode@[1,0] + uEdgeD@[0,0] + uEdgeD@[0,-1] )
	) + ( 1.0 / ( vf_gridWidth_x ) ) * (
		1.0/3.0 * ( -p@[0,0] + p@[1,0] ) 
	) == ( 1.0 / ( vf_gridWidth_x ** 2 ) ) * (
		8.0/45.0 * rhs_uEdgeY
		+ 2.0/45.0 * ( rhs_uEdgeX@[1,0] + rhs_uEdgeX@[0,-1] + rhs_uEdgeD@[0,0] + rhs_uEdgeD@[0,-1] )
		- 1.0/90.0 * ( rhs_uNode@[0,-1] + rhs_uNode@[1,1] )
	)
}
Equation uEdgeDEquation@finest {
	( 1.0 / ( vf_gridWidth_x ** 2 ) ) * (
		16.0/3.0 * uEdgeD@[0,0] - 4.0/3.0 * ( uEdgeY@[0,0] + uEdgeY@[0,1] + uEdgeX@[0,0] + uEdgeX@[1,0] )
	) + ( 1.0 / ( vf_gridWidth_x ) ) * (
		1.0/6.0 * ( -p@[0,0] + p@[1,0] - p@[0,1] + p@[1,1] ) 
	) == ( 1.0 / ( vf_gridWidth_x ** 2 ) ) * (
		8.0/45.0 * rhs_uEdgeD
		+ 2.0/45.0 * ( rhs_uEdgeX@[0,0] + rhs_uEdgeX@[1,0] + rhs_uEdgeY@[0,0] + rhs_uEdgeY@[0,1] )
		- 1.0/90.0 * ( rhs_uNode@[0,1] + rhs_uNode@[1,0] )
	)
}

Equation vNodeEquation@finest {
	( 1.0 / ( vf_gridWidth_x ** 2 ) ) * (
		4.0 * vNode@[0,0] - 4.0/3.0 * ( vEdgeY@[0,0] + vEdgeY@[-1,0] + vEdgeX@[0,0] + vEdgeX@[0,-1] ) + 1.0/3.0 * ( vNode@[1,0] + vNode@[-1,0] + vNode@[0,1] + vNode@[0,-1] )
	) + 0.0 * p@[0,0]
	== ( 1.0 / ( vf_gridWidth_x ** 2 ) ) * (
		  1.0/10.0  *   rhs_vNode
		- 1.0/180.0 * ( rhs_vNode@[0,1] + rhs_vNode@[1,0] + rhs_vNode@[1,1] + rhs_vNode@[0,-1] + rhs_vNode@[-1,0] + rhs_vNode@[-1,-1] )
		- 1.0/90.0  * ( rhs_vEdgeX@[1,0] + rhs_vEdgeX@[-1,-1] + rhs_vEdgeY@[0,1] + rhs_vEdgeY@[-1,-1] + rhs_vEdgeD@[-1,0] + rhs_vEdgeD@[0,-1] )
	)
}
Equation vEdgeXEquation@finest {
	( 1.0 / ( vf_gridWidth_x ** 2 ) ) * (
		16.0/3.0 * vEdgeX@[0,0] - 4.0/3.0 * ( vNode@[0,0] + vNode@[0,1] + vEdgeD@[0,0] + vEdgeD@[-1,0] )
	) + ( 1.0 / ( vf_gridWidth_x ) ) * (
		1.0/3.0 * ( -p@[0,0] + p@[0,1] ) 
	)	== ( 1.0 / ( vf_gridWidth_x ** 2 ) ) * (
		8.0/45.0 * rhs_vEdgeX
		+ 2.0/45.0 * ( rhs_vEdgeY@[0,1] + rhs_vEdgeY@[-1,0] + rhs_vEdgeD@[0,0] + rhs_vEdgeD@[-1,0] )
		- 1.0/90.0 * ( rhs_vNode@[-1,0] + rhs_vNode@[1,1] )
	)
}
Equation vEdgeYEquation@finest {
	( 1.0 / ( vf_gridWidth_x ** 2 ) ) * (
		16.0/3.0 * vEdgeY@[0,0] - 4.0/3.0 * ( vNode@[0,0] + vNode@[1,0] + vEdgeD@[0,0] + vEdgeD@[0,-1] )
	) + ( 1.0 / ( vf_gridWidth_x ) ) * (
		1.0/6.0 * ( p@[0,0] - p@[1,0] - p@[0,-1] + p@[1,1] ) 
	) == ( 1.0 / ( vf_gridWidth_x ** 2 ) ) * (
		8.0/45.0 * rhs_vEdgeY
		+ 2.0/45.0 * ( rhs_vEdgeX@[1,0] + rhs_vEdgeX@[0,-1] + rhs_vEdgeD@[0,0] + rhs_vEdgeD@[0,-1] )
		- 1.0/90.0 * ( rhs_vNode@[0,-1] + rhs_vNode@[1,1] )
	)
}
Equation vEdgeDEquation@finest {
	( 1.0 / ( vf_gridWidth_x ** 2 ) ) * (
		16.0/3.0 * vEdgeD@[0,0] - 4.0/3.0 * ( vEdgeY@[0,0] + vEdgeY@[0,1] + vEdgeX@[0,0] + vEdgeX@[1,0] )
	) + ( 1.0 / ( vf_gridWidth_x ) ) * (
		1.0/6.0 * ( -p@[0,0] + p@[1,0] - p@[0,1] + p@[1,1] ) 
	) == ( 1.0 / ( vf_gridWidth_x ** 2 ) ) * (
		8.0/45.0 * rhs_vEdgeD
		+ 2.0/45.0 * ( rhs_vEdgeX@[0,0] + rhs_vEdgeX@[1,0] + rhs_vEdgeY@[0,0] + rhs_vEdgeY@[0,1] )
		- 1.0/90.0 * ( rhs_vNode@[0,1] + rhs_vNode@[1,0] )
	)
}

Equation pEquation@finest {
	( 1.0 / ( vf_gridWidth_x ) ) * (
		1.0/3.0 * ( uEdgeY - uEdgeY@[-1,0] ) + 1.0/6.0 * ( -uEdgeX@[0,0] + uEdgeX@[0,-1] + uEdgeX@[1,0] - uEdgeX@[-1,-1] ) + 1.0/6.0 * ( uEdgeD@[0,0] - uEdgeD@[-1,0] + uEdgeD@[0,-1] - uEdgeD@[-1,-1] ) +
		1.0/3.0 * ( vEdgeX - vEdgeX@[0,-1] ) + 1.0/6.0 * ( -vEdgeY@[0,0] + vEdgeY@[-1,0] + vEdgeY@[0,1] - vEdgeY@[-1,-1] ) + 1.0/6.0 * ( vEdgeD@[0,0] + vEdgeD@[-1,0] - vEdgeD@[0,-1] - vEdgeD@[-1,-1] )
	) == rhs_p
}

Equation uNodeEquation@(all but finest) {
	( 1.0 / ( vf_gridWidth_x ** 2 ) ) * (
		4.0 * uNode@[0,0] - 4.0/3.0 * ( uEdgeY@[0,0] + uEdgeY@[-1,0] + uEdgeX@[0,0] + uEdgeX@[0,-1] ) + 1.0/3.0 * ( uNode@[1,0] + uNode@[-1,0] + uNode@[0,1] + uNode@[0,-1] )
	) + 0.0 * p@[0,0]
	== 0.0
}
Equation uEdgeXEquation@(all but finest) {
	( 1.0 / ( vf_gridWidth_x ** 2 ) ) * (
		16.0/3.0 * uEdgeX@[0,0] - 4.0/3.0 * ( uNode@[0,0] + uNode@[0,1] + uEdgeD@[0,0] + uEdgeD@[-1,0] )
	) + ( 1.0 / ( vf_gridWidth_x ) ) * (
		1.0/6.0 * ( p@[0,0] - p@[-1,0] - p@[0,1] + p@[1,1] ) 
	)
	== 0.0
}
Equation uEdgeYEquation@(all but finest) {
	( 1.0 / ( vf_gridWidth_x ** 2 ) ) * (
		16.0/3.0 * uEdgeY@[0,0] - 4.0/3.0 * ( uNode@[0,0] + uNode@[1,0] + uEdgeD@[0,0] + uEdgeD@[0,-1] )
	) + ( 1.0 / ( vf_gridWidth_x ) ) * (
		1.0/3.0 * ( -p@[0,0] + p@[1,0] ) 
	)
	== 0.0
}
Equation uEdgeDEquation@(all but finest) {
	( 1.0 / ( vf_gridWidth_x ** 2 ) ) * (
		16.0/3.0 * uEdgeD@[0,0] - 4.0/3.0 * ( uEdgeY@[0,0] + uEdgeY@[0,1] + uEdgeX@[0,0] + uEdgeX@[1,0] )
	) + ( 1.0 / ( vf_gridWidth_x ) ) * (
		1.0/6.0 * ( -p@[0,0] + p@[1,0] - p@[0,1] + p@[1,1] ) 
	)
	== 0.0
}

Equation vNodeEquation@(all but finest) {
	( 1.0 / ( vf_gridWidth_x ** 2 ) ) * (
		4.0 * vNode@[0,0] - 4.0/3.0 * ( vEdgeY@[0,0] + vEdgeY@[-1,0] + vEdgeX@[0,0] + vEdgeX@[0,-1] ) + 1.0/3.0 * ( vNode@[1,0] + vNode@[-1,0] + vNode@[0,1] + vNode@[0,-1] )
	) + 0.0 * p@[0,0]
	== 0.0
}
Equation vEdgeXEquation@(all but finest) {
	( 1.0 / ( vf_gridWidth_x ** 2 ) ) * (
		16.0/3.0 * vEdgeX@[0,0] - 4.0/3.0 * ( vNode@[0,0] + vNode@[0,1] + vEdgeD@[0,0] + vEdgeD@[-1,0] )
	) + ( 1.0 / ( vf_gridWidth_x ) ) * (
		1.0/3.0 * ( -p@[0,0] + p@[0,1] ) 
	)
	== 0.0
}
Equation vEdgeYEquation@(all but finest) {
	( 1.0 / ( vf_gridWidth_x ** 2 ) ) * (
		16.0/3.0 * vEdgeY@[0,0] - 4.0/3.0 * ( vNode@[0,0] + vNode@[1,0] + vEdgeD@[0,0] + vEdgeD@[0,-1] )
	) + ( 1.0 / ( vf_gridWidth_x ) ) * (
		1.0/6.0 * ( p@[0,0] - p@[1,0] - p@[0,-1] + p@[1,1] ) 
	)
	== 0.0
}
Equation vEdgeDEquation@(all but finest) {
	( 1.0 / ( vf_gridWidth_x ** 2 ) ) * (
		16.0/3.0 * vEdgeD@[0,0] - 4.0/3.0 * ( vEdgeY@[0,0] + vEdgeY@[0,1] + vEdgeX@[0,0] + vEdgeX@[1,0] )
	) + ( 1.0 / ( vf_gridWidth_x ) ) * (
		1.0/6.0 * ( -p@[0,0] + p@[1,0] - p@[0,1] + p@[1,1] ) 
	)
	== 0.0
}

Equation pEquation@(all but finest) {
	( 1.0 / ( vf_gridWidth_x ) ) * (
		1.0/3.0 * ( uEdgeY - uEdgeY@[-1,0] ) + 1.0/6.0 * ( -uEdgeX@[0,0] + uEdgeX@[0,-1] + uEdgeX@[1,0] - uEdgeX@[-1,-1] ) + 1.0/6.0 * ( uEdgeD@[0,0] - uEdgeD@[-1,0] + uEdgeD@[0,-1] - uEdgeD@[-1,-1] ) +
		1.0/3.0 * ( vEdgeX - vEdgeX@[0,-1] ) + 1.0/6.0 * ( -vEdgeY@[0,0] + vEdgeY@[-1,0] + vEdgeY@[0,1] - vEdgeY@[-1,-1] ) + 1.0/6.0 * ( vEdgeD@[0,0] + vEdgeD@[-1,0] - vEdgeD@[0,-1] - vEdgeD@[-1,-1] )
	) == 0.0
}
/*
generate operators @all {
  equation for uNode is uNodeEquation store in {
    uNode  => A11_n_n
    uEdgeX => A11_n_ey
    uEdgeY => A11_n_ex
    //uEdgeD => A11_n_ed
		//p      => B1_n
  }
  equation for uEdgeX is uEdgeXEquation store in {
    uNode  => A11_ey_n
    uEdgeX => A11_ey_ey
    //uEdgeY => A11_ey_ex
    uEdgeD => A11_ey_ed
		p      => B1_ey
  }
  equation for uEdgeY is uEdgeYEquation store in {
    uNode  => A11_ex_n
    //uEdgeX => A11_ex_ey
    uEdgeY => A11_ex_ex
    uEdgeD => A11_ex_ed
		p      => B1_ex
  }
  equation for uEdgeD is uEdgeDEquation store in {
    //uNode  => A11_ed_n
    uEdgeX => A11_ed_ey
    uEdgeY => A11_ed_ex
    uEdgeD => A11_ed_ed
		p      => B1_ed
  }
  equation for vNode is vNodeEquation store in {
    vNode  => A22_n_n
    vEdgeX => A22_n_ey
    vEdgeY => A22_n_ex
    //vEdgeD => A22_n_ed
		//p      => B2_n
  }
  equation for vEdgeX is vEdgeXEquation store in {
    vNode  => A22_ey_n
    vEdgeX => A22_ey_ey
    //vEdgeY => A22_ey_ex
    vEdgeD => A22_ey_ed
		p      => B2_ey
  }
  equation for vEdgeY is vEdgeYEquation store in {
    vNode  => A22_ex_n
    //vEdgeX => A22_ex_ey
    vEdgeY => A22_ex_ex
    vEdgeD => A22_ex_ed
		p      => B2_ex
  }
  equation for vEdgeD is vEdgeDEquation store in {
    //vNode  => A22_ed_n
    vEdgeX => A22_ed_ey
    vEdgeY => A22_ed_ex
    vEdgeD => A22_ed_ed
		p      => B2_ed
  }
}
*/