
Domain global< [ 0, 0, 0 ] to [ 1, 1, 1 ] >

// u = sin ( 2.0 * PI * x ) - cos (       PI * z )
// v = cos (       PI * x ) - sin ( 2.0 * PI * y )
// w = sin ( 2.0 * PI * z ) - cos (       PI * y )
// p = sin ( 4.0 * PI * x ) + sin ( 4.0 * PI * y ) + sin ( 4.0 * PI * z )
// rhs_u = 4.0 * PI**2 * sin ( 2.0 * PI * x ) -       PI**2 * cos (       PI * z ) + 4.0 * PI * cos ( 4.0 * PI * x )
// rhs_v =       PI**2 * cos (       PI * x ) - 4.0 * PI**2 * sin ( 2.0 * PI * y ) + 4.0 * PI * cos ( 4.0 * PI * y )
// rhs_w = 2.0 * PI**2 * sin ( 2.0 * PI * z ) -       PI**2 * cos (       PI * y ) + 4.0 * PI * cos ( 4.0 * PI * z )
// rhs_p = 2.0 * PI    * cos ( 2.0 * PI * x ) - 2.0 * PI    * cos ( 2.0 * PI * y ) + 2.0 * PI * cos ( 2.0 * PI * z )

Field u with Real on Face_x of global = 0.0
Field u on boundary = sin ( 2.0 * PI * vf_boundaryCoord_x ) - cos (       PI * vf_boundaryCoord_z )

Field v with Real on Face_y of global = 0.0
Field v on boundary = cos (       PI * vf_boundaryCoord_x ) - sin ( 2.0 * PI * vf_boundaryCoord_y )

Field w with Real on Face_z of global = 0.0
Field w on boundary = sin ( 2.0 * PI * vf_boundaryCoord_z ) - cos (       PI * vf_boundaryCoord_y )

Field p with Real on Cell of global = 0.0
Field p on boundary = Neumann // TODO: currently not evaluated outside inner scope

Field rhs_u with Real on Face_x of global = 4.0 * PI**2 * sin ( 2.0 * PI * vf_nodePosition_x ) -       PI**2 * cos (       PI * vf_cellCenter_z   ) + 4.0 * PI * cos ( 4.0 * PI * vf_nodePosition_x )
Field rhs_v with Real on Face_y of global =       PI**2 * cos (       PI * vf_cellCenter_x   ) - 4.0 * PI**2 * sin ( 2.0 * PI * vf_nodePosition_y ) + 4.0 * PI * cos ( 4.0 * PI * vf_nodePosition_y )
Field rhs_w with Real on Face_z of global = 4.0 * PI**2 * sin ( 2.0 * PI * vf_nodePosition_z ) -       PI**2 * cos (       PI * vf_cellCenter_y   ) + 4.0 * PI * cos ( 4.0 * PI * vf_nodePosition_z )
Field rhs_p with Real on Cell   of global = 2.0 * PI    * cos ( 2.0 * PI * vf_cellCenter_x   ) - 2.0 * PI    * cos ( 2.0 * PI * vf_cellCenter_y   ) + 2.0 * PI * cos ( 2.0 * PI * vf_cellCenter_z   )


// TODO: adapt for non-uniform grids

Operator Laplace from Stencil {
  [ 0,  0,  0] =>  2.0 / ( vf_gridWidth_x ** 2 ) + 2.0 / ( vf_gridWidth_y ** 2 ) + 2.0 / ( vf_gridWidth_z ** 2 )
  [-1,  0,  0] => -1.0 / ( vf_gridWidth_x ** 2 )
  [ 1,  0,  0] => -1.0 / ( vf_gridWidth_x ** 2 )
  [ 0, -1,  0] => -1.0 / ( vf_gridWidth_y ** 2 )
  [ 0,  1,  0] => -1.0 / ( vf_gridWidth_y ** 2 )
  [ 0,  0, -1] => -1.0 / ( vf_gridWidth_z ** 2 )
  [ 0,  0,  1] => -1.0 / ( vf_gridWidth_z ** 2 )
}


Equation uEquation {
  Laplace * u + ( p@[0, 0, 0] - p @[-1, 0, 0] ) / vf_gridWidth_x == rhs_u
}

Equation vEquation {
  Laplace * v + ( p@[0, 0, 0] - p @[0, -1, 0] ) / vf_gridWidth_y == rhs_v
}

Equation wEquation {
  Laplace * w + ( p@[0, 0, 0] - p @[0, 0, -1] ) / vf_gridWidth_z == rhs_w
}

Equation pEquation {
  ( u@[1, 0, 0] - u @[0, 0, 0] ) / vf_gridWidth_x + ( v@[0, 1, 0] - v @[0, 0, 0] ) / vf_gridWidth_y + ( w@[0, 0, 1] - w @[0, 0, 0] ) / vf_gridWidth_z == rhs_p
}


generate operators @all {
  equation for u is uEquation store in {
    u => A11
    p => B1
  }

  equation for v is vEquation store in {
    v => A22
    p => B2
  }

  equation for w is wEquation store in {
    w => A33
    p => B3
  }

  equation for p is pEquation store in {
    u => C1
    v => C2
    w => C3
  }
}
