
Domain global< [ 0, 0 ] to [ 1, 1 ] >


// u     = sin ( 2.0 * PI * x ) - cos (       PI * y )
// v     = cos (       PI * x ) - sin ( 2.0 * PI * y )
// p     = sin ( 4.0 * PI * x ) + sin ( 4.0 * PI * y )
// rhs_u = 4.0 * PI**2 * sin ( 2.0 * PI * x ) -       PI**2 * cos (       PI * y ) + 4.0 * PI * cos ( 4.0 * PI * x )
// rhs_v =       PI**2 * cos (       PI * x ) - 4.0 * PI**2 * sin ( 2.0 * PI * y ) + 4.0 * PI * cos ( 4.0 * PI * y )
// rhs_p = 2.0 * PI    * cos ( 2.0 * PI * x ) - 2.0 * PI    * cos ( 2.0 * PI * y )

Field u with Real on Face_x of global = 0.0
Field u on boundary = sin ( 2.0 * PI * vf_boundaryPosition_x ) - cos ( PI * vf_boundaryCoord_y )

Field v with Real on Face_y of global = 0.0
Field v on boundary = cos ( PI * vf_boundaryPosition_x ) - sin ( 2.0 * PI * vf_boundaryCoord_y )

Field p with Real on Cell of global = 0.0
Field p on boundary = Neumann // TODO: currently not evaluated outside inner scope

// version 1: assume that the rhs is constant within one (staggered) cell

Field rhs_u with Real on Face_x of global = vf_xStagCellVolume * ( 4.0 * PI**2 * sin ( 2.0 * PI * vf_nodePosition_x ) -       PI**2 * cos (       PI * vf_cellCenter_y   ) + 4.0 * PI * cos ( 4.0 * PI * vf_nodePosition_x ) )
Field rhs_v with Real on Face_y of global = vf_yStagCellVolume * (       PI**2 * cos (       PI * vf_cellCenter_x   ) - 4.0 * PI**2 * sin ( 2.0 * PI * vf_nodePosition_y ) + 4.0 * PI * cos ( 4.0 * PI * vf_nodePosition_y ) )
Field rhs_p with Real on Cell   of global = vf_cellVolume      * ( 2.0 * PI    * cos ( 2.0 * PI * vf_cellCenter_x   ) - 2.0 * PI    * cos ( 2.0 * PI * vf_cellCenter_y   ) )


// version 2: use analytical integral formulations for the rhs
/*
Field rhs_u with Real on Face_x of global = (
    integrateOverXStaggeredEastFace   ( 1.0 ) * ( 2.0 * PI * -cos ( 2.0 * PI * vf_cellCenter_x  @[ 0,  0] ) )
  - integrateOverXStaggeredWestFace   ( 1.0 ) * ( 2.0 * PI * -cos ( 2.0 * PI * vf_cellCenter_x  @[-1,  0] ) )
  - integrateOverXStaggeredNorthFace  ( 1.0 ) * (       PI *  sin (       PI * vf_nodePosition_y@[ 0,  1] ) )
  + integrateOverXStaggeredSouthFace  ( 1.0 ) * (       PI *  sin (       PI * vf_nodePosition_y@[ 0,  0] ) )
  + integrateOverXStaggeredEastFace   ( 1.0 ) * (             sin ( 4.0 * PI * vf_cellCenter_x  @[ 0,  0] ) )
  - integrateOverXStaggeredWestFace   ( 1.0 ) * (             sin ( 4.0 * PI * vf_cellCenter_x  @[-1,  0] ) )
)

Field rhs_v with Real on Face_y of global = (
    integrateOverYStaggeredEastFace   ( 1.0 ) * (       PI *  sin (       PI * vf_nodePosition_x@[ 1,  0] ) )
  - integrateOverYStaggeredWestFace   ( 1.0 ) * (       PI *  sin (       PI * vf_nodePosition_x@[ 0,  0] ) )
  + integrateOverYStaggeredNorthFace  ( 1.0 ) * ( 2.0 * PI *  cos ( 2.0 * PI * vf_cellCenter_y  @[ 0,  0] ) )
  - integrateOverYStaggeredSouthFace  ( 1.0 ) * ( 2.0 * PI *  cos ( 2.0 * PI * vf_cellCenter_y  @[ 0, -1] ) )
  + integrateOverYStaggeredNorthFace  ( 1.0 ) * (             sin ( 4.0 * PI * vf_cellCenter_y  @[ 0,  0] ) )
  - integrateOverYStaggeredSouthFace  ( 1.0 ) * (             sin ( 4.0 * PI * vf_cellCenter_y  @[ 0, -1] ) )
  )

Field rhs_p with Real on Cell   of global = (
      integrateOverEastFace  ( 1.0 ) *  sin ( 2.0 * PI * vf_nodePosition_x@[ 1,  0] ) - integrateOverWestFace   ( 1.0 ) *  sin ( 2.0 * PI * vf_nodePosition_x@[ 0,  0] )
    + integrateOverNorthFace ( 1.0 ) * -sin ( 2.0 * PI * vf_nodePosition_y@[ 0,  1] ) - integrateOverSouthFace  ( 1.0 ) * -sin ( 2.0 * PI * vf_nodePosition_y@[ 0,  0] )
    )
*/


Equation uEquation {
  ( integrateOverXStaggeredEastFace ( 1.0 ) * p@[0, 0] - integrateOverXStaggeredWestFace ( 1.0 ) * p@[-1, 0]
    - (
        integrateOverXStaggeredEastFace  ( 1.0 ) * ( u@[ 1,  0] - u@[ 0,  0] ) / vf_cellWidth_x  @[1, 0]
      - integrateOverXStaggeredWestFace  ( 1.0 ) * ( u@[ 0,  0] - u@[-1,  0] ) / vf_cellWidth_x  @[0, 0]
      + integrateOverXStaggeredNorthFace ( 1.0 ) * ( u@[ 0,  1] - u@[ 0,  0] ) / vf_stagCVWidth_y@[0, 1]
      - integrateOverXStaggeredSouthFace ( 1.0 ) * ( u@[ 0,  0] - u@[ 0, -1] ) / vf_stagCVWidth_y@[0, 0] )
  ) == rhs_u
}

Equation vEquation {
  ( integrateOverYStaggeredNorthFace ( 1.0 ) * p@[0,0 ] - integrateOverYStaggeredSouthFace ( 1.0 ) * p@[0, -1]
    - (
      integrateOverYStaggeredEastFace  ( 1.0 ) * ( v@[ 1,  0] - v@[0, 0] ) / vf_stagCVWidth_x@[1, 0]
    + integrateOverYStaggeredWestFace  ( 1.0 ) * ( v@[-1,  0] - v@[0, 0] ) / vf_stagCVWidth_x@[0, 0]
    + integrateOverYStaggeredNorthFace ( 1.0 ) * ( v@[ 0,  1] - v@[0, 0] ) / vf_cellWidth_y  @[0, 1]
    + integrateOverYStaggeredSouthFace ( 1.0 ) * ( v@[ 0, -1] - v@[0, 0] ) / vf_cellWidth_y  @[0, 0] )
  ) == rhs_v
}

Equation pEquation {
  (   integrateOverEastFace  ( 1.0 ) * u@[1, 0] - integrateOverWestFace  ( 1.0 ) * u@[0, 0]
    + integrateOverNorthFace ( 1.0 ) * v@[0, 1] - integrateOverSouthFace ( 1.0 ) * v@[0, 0]
  ) == rhs_p
}


generate operators @all {
  equation for u is uEquation store in {
    u => A11
    p => B1
  }

  equation for v is vEquation store in {
    v => A22
    p => B2
  }

  equation for p is pEquation store in {
    u => C1
    v => C2
  }
}
