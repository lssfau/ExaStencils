
/// domain

Domain global< [ 0, 0, 0 ] to [ 1, 1, 1] >

/// fields

Field Solution with Real on Node of global = 1.0

// Field Solution@finest on boundary = (5.0 * PI**2 - k**2) * sin ( PI * vf_boundaryPos_x ) * sin ( 2 * PI * vf_boundaryPos_y ) 
Field Solution@finest on boundary = 0.0 
Field Solution@(all but finest) on boundary = 0.0

Field RHS@finest with Real on Node of global = 0.0
Field RHS@(all but finest) with Real on Node of global

Field Residual        from RHS
override bc for Residual@finest with 0.0

// For the Preconditioner
Field u from Residual
Field f from Residual
Field res from Residual
Field gen_error_u from u
Field gen_residual_u from res
Field gen_rhs_u from f
Field p_u @coarsest from res
Field ap_u@coarsest from res

Field p@finest from Residual
Field ap@finest from Residual

/// for BiCGStab
Field h     @finest from Residual
Field s     @finest from Residual
Field t     @finest from Residual
Field resHat@finest from Residual

/// for Conjugate Residual
Field ar@finest from Residual

/// for MinRes
Field pOld@finest from Residual
Field pNew@finest from Residual
Field vOld@finest from Residual
Field v   @finest from Residual
Field vNew@finest from Residual

/// operators

Operator A from Stencil {
  [ 0,  0,  0] =>  2.0 / ( vf_gridWidth_x ** 2 ) + 2.0 / ( vf_gridWidth_y ** 2 ) + 2.0 / ( vf_gridWidth_z ** 2 ) - k**2
  [-1,  0,  0] => -1.0 / ( vf_gridWidth_x ** 2 )
  [ 1,  0,  0] => -1.0 / ( vf_gridWidth_x ** 2 )
  [ 0, -1,  0] => -1.0 / ( vf_gridWidth_y ** 2 )
  [ 0,  1,  0] => -1.0 / ( vf_gridWidth_y ** 2 )
  [ 0,  0, -1] => -1.0 / ( vf_gridWidth_z ** 2 )
  [ 0,  0,  1] => -1.0 / ( vf_gridWidth_z ** 2 )
}

Operator M from Stencil {
  [ 0,  0,  0] =>  2.0 / ( vf_gridWidth_x ** 2 ) + 2.0 / ( vf_gridWidth_y ** 2 ) + 2.0 / ( vf_gridWidth_z ** 2 ) - shift * k**2
  [-1,  0,  0] => -1.0 / ( vf_gridWidth_x ** 2 )
  [ 1,  0,  0] => -1.0 / ( vf_gridWidth_x ** 2 )
  [ 0, -1,  0] => -1.0 / ( vf_gridWidth_y ** 2 )
  [ 0,  1,  0] => -1.0 / ( vf_gridWidth_y ** 2 )
  [ 0,  0, -1] => -1.0 / ( vf_gridWidth_z ** 2 )
  [ 0,  0,  1] => -1.0 / ( vf_gridWidth_z ** 2 )
}



Equation PrecEq {
  M * u  == f
}


Operator Restriction_u  from default restriction  on Node with 'linear'
Operator Prolongation_u from default prolongation on Node with 'linear'

/// globals

Globals {
  Expr k = 20.0
  Expr omegaRelax = 1.0
  Expr shift = -1.0
}

Function NormResidual@(coarsest and finest) : Real {
  return sqrt ( dot ( Residual, Residual ) )
}

Function Solve@finest {
  PreconditionedBiCGStab@finest (  )
  /*
  Residual@finest = RHS@finest - ( A@finest * Solution@finest )
  Var initRes : Real = NormResidual@finest (  )
  Var curRes  : Real = initRes
  Var prevRes : Real = 0.0

  //PrintError@finest()
  if ( getKnowledge ( 'testing_enabled' ) ) {
    if ( getKnowledge ( 'testing_printRes' ) ) { printWithReducedPrec ( initRes ) }
  } else {
    print ( "Starting residual:", initRes )
  }

  Var curIt : Int = 0
  repeat until ( ( curIt >= 1 ) || ( curRes <= ( 1.0e-6 * initRes ) ) ) {
    curIt += 1
    // PreconditionedCG@finest (  )
    // PreconditionedConjugateResidual@finest (  )
    PreconditionedBiCGStab@finest (  )
    // PreconditionedMinRes@finest (  )
    Residual@finest = RHS@finest - ( A@finest * Solution@finest )
    prevRes = curRes
    curRes = NormResidual@finest (  )
    //PrintError@finest()
    if ( getKnowledge ( 'testing_enabled' ) ) {
      if ( getKnowledge ( 'testing_printRes' ) ) { printWithReducedPrec ( curRes ) }
    } else {
      print ( "Residual after", curIt, "iterations is", curRes, "--- convergence factor is", ( curRes / prevRes ) )
    }
  }*/
}

/*** Conjugate Gradient without Preconditioning
Function ConjugateGradient@finest {
  // init residual
  Residual    = RHS - A * Solution
  Var curRes  : Real = NormResidual ( )
  Var initRes : Real = curRes
  Var nextRes : Real = 0.0

  if ( curRes == 0.0 ) { return }

  // init variables and fields
  Var alpha   : Real = 0.0
  Var beta    : Real = 0.0

  p           = Residual

  // main loop
  Var curStep : Int  = 0
  repeat 10000 times count curStep {
    ap        = A * p

    alpha     = dot ( Residual, Residual ) / dot ( p, ap )
    Solution += alpha * p
    Residual -= alpha * ap

    nextRes   = NormResidual ( )
    // print ( "Residual after", curStep, "iterations is", curRes, "--- convergence factor is", ( nextRes / curRes ) )
    if ( nextRes <= 1e-6 * initRes ) {
      print ( "Residual after", curStep, "iterations is", nextRes)
      return
    }

    beta      = nextRes**2 / curRes**2
    p         = Residual + beta * p
    curRes    = nextRes
  }

  print ( "Maximum number of cgs iterations (", 10000, ") was exceeded" )
}

/// Preconditioned CG
Function PreconditionedCG@finest {
  // init residual
  Residual    = RHS - A * Solution
  Var curRes  : Real = NormResidual ( )
  Var initRes : Real = curRes
  Var nextRes : Real = 0.0
  Var tmp : Real = 0.0

  if ( curRes == 0.0 ) { return }

  // init variables and fields
  Var alpha   : Real = 0.0
  Var beta    : Real = 0.0
  
  u = 0
  f = Residual
  VCycle()
  p = u

  // main loop
  Var curStep : Int  = 0
  repeat 10000 times count curStep {
    ap        = A * p

    tmp = dot(Residual, u)
    alpha     = tmp / dot ( ap, p )
    Solution  = Solution + alpha * p
    Residual =  Residual - alpha * ap

    nextRes   = NormResidual()
    // print ( "Residual after", curStep, "iterations is", curRes, "--- convergence factor is", ( nextRes / curRes ) )
    if ( nextRes <= 1e-6 * initRes ) {
      print ( "Residual after", curStep, "iterations is", nextRes)
      return
    }


    u = 0
    f = Residual
    VCycle()
    beta      = dot(Residual, u) / tmp
    p         = u + beta * p
    curRes    = nextRes
  }

  print ( "Maximum number of solver iterations (", 10000, ") was exceeded" )
}
*/
/// Preconditioned BiCGStab
Function PreconditionedBiCGStab@finest {
  // init residual
  Residual    = RHS - A * Solution
  Var curRes  : Real = NormResidual ( )
  if (curRes != curRes) {
    // print ( "Residual after", 0, "iterations is", curRes, "--- convergence factor is", ( curRes ) ) 
    print(curRes)
    print ( "Maximum number of solver iterations (", 10000, ") was exceeded" )
    return
  }

  Var initRes : Real = curRes

  if ( curRes == 0.0 ) { return }

  // init variables and fields
  Var alpha   : Real = 1.0
  Var beta    : Real = 1.0
  Var rho     : Real
  Var rhoNew  : Real = 1.0
  Var omega   : Real = 1.0

  resHat      = Residual
  ap          = 0.0
  p           = 0.0

  // main loop
  Var curStep : Int  = 0
  repeat 10000 times count curStep {
    rho       = rhoNew
    rhoNew    = dot ( resHat, Residual )
    beta      = ( rhoNew / rho ) * ( alpha / omega )
    p         = Residual + beta * ( p - omega * ap )
    u = 0
    f = p
    VCycle()
    ap        = A * u
    alpha     = rhoNew / dot ( resHat, ap )
    //h         = Solution + alpha * p
    h         = Solution + alpha * u
    s         = Residual - alpha * ap
    u = 0
    f = s
    VCycle()
    t = A * u
    omega     = dot ( t, s ) / dot ( t, t )
    //u = 0
    //f = h + omega * s
    //VCycle()
    //Solution = u
    Solution = h + omega * u
    Residual  = s - omega * t
    curRes    = NormResidual ( )

    // print ( "Residual after", curStep, "iterations is", curRes)
    if ( curRes <= 1e-6 * initRes ) {
      print ( "Residual after", curStep, "iterations is", curRes, "--- convergence factor is", ( curRes / initRes ) )
      return
    }
  }

  print ( "Maximum number of solver iterations (", 10000, ") was exceeded" )
  print ( "Residual after", curStep, "iterations is", curRes, "--- convergence factor is", ( curRes / initRes ) )
}

/*

Function PreconditionedConjugateResidual@finest {
  // init residual
  Residual    = RHS - A * Solution


  // init variables and fields
  Var alpha   : Real
  Var beta    : Real 
  u = 0
  f = Residual
  VCycle()
  Residual = u
  Var curRes  : Real = NormResidual (  )
  if (curRes != curRes) {
    // print ( "Residual after", 0, "iterations is", curRes, "--- convergence factor is", ( curRes ) ) 
    print(curRes)
    print ( "Maximum number of solver iterations (", 10000, ") was exceeded" )
    return
  }
  Var initRes : Real = curRes
  Var nextRes : Real = 0.0
  if ( curRes == 0.0 ) { return }
  p = Residual
  ar = A * Residual
  ap = A * p

  // main loop
  Var curStep : Int  = 0
  repeat 10000 times count curStep {
    u = 0
    f = ap
    VCycle()
    Var r_ar : Real = dot(Residual, ar)
    alpha = r_ar / dot(ap, u)
    Solution += alpha * p
    Residual -= alpha * u
    // print ( "Residual after", curStep, "iterations is", curRes)
    if ( curRes < 1e-7 * initRes ) {
      print ( "Residual after", curStep, "iterations is", curRes, "--- convergence factor is", ( curRes / initRes ) )
      return
    }
    nextRes    = NormResidual ( )
    //print ( "Residual after", curStep, "iterations is", nextRes, "--- convergence factor is", ( nextRes / curRes ) )
    ar = A * Residual
    beta = dot(Residual, ar) / r_ar
    p = Residual  + beta * p
    ap = ar + beta * ap
    curRes = nextRes
  }

  print ( "Maximum number of solver iterations (", 10000, ") was exceeded" )
  print ( "Residual after", curStep, "iterations is", curRes, "--- convergence factor is", ( curRes / initRes ) )
}
/** Preconditioned MinRes
Function PreconditionedMinRes@finest {
  // init residual
  Residual    = RHS - A * Solution
  Var curRes  : Real = NormResidual ( )
  Var initRes : Real = curRes

  if ( curRes == 0.0 ) { return }

  // init variables and fields
  Var alpha   : Real
  Var beta    : Real
  Var betaNew : Real = 0.0
  Var cOld    : Real
  Var c       : Real = 1.0
  Var cNew    : Real = 1.0
  Var sigmaOld    : Real
  Var sigma       : Real = 0.0
  Var sigmaNew    : Real = 0.0

  Var rho1    : Real
  Var rho2    : Real
  Var rho3Tld : Real
  Var tau     : Real
  Var nu      : Real
  Var rho3    : Real

  v           = 0.0
  vNew        = Residual / initRes
  p           = 0.0
  pNew        = 0.0

  // main loop
  Var curStep : Int  = 0
  repeat 10000 times count curStep {
    beta      = betaNew
    vOld      = v
    v         = vNew
    u = 0
    f = v
    VCycle()
    vNew      = A * u - beta * vOld
    alpha     = dot ( vNew, v )
    vNew     -= alpha * v
    betaNew   = sqrt ( dot ( vNew, vNew ) )
    vNew     /= betaNew
    cOld      = c
    c         = cNew
    sigmaOld      = sigma
    sigma         = sigmaNew
    rho1      = sigmaOld * beta
    rho2      = c * cOld * beta + sigma * alpha
    rho3Tld   = c * alpha - sigma * cOld * beta
    tau       = fabs ( rho3Tld ) + fabs ( betaNew )
    nu        = tau * sqrt ( ( rho3Tld / tau )**2 + ( betaNew / tau )**2 )
    cNew      = rho3Tld / nu
    sigmaNew      = betaNew / nu
    rho3      = nu
    pOld      = p
    p         = pNew
    pNew      = ( v - rho1 * pOld - rho2 * p ) / rho3
    u = 0
    f = cNew * curRes * pNew
    VCycle()
    Solution += u
    curRes   *= -sigmaNew

    if ( fabs ( curRes ) <= 1e-6 * initRes ) { 
      print ( "Residual after", curStep, "iterations is", curRes)
      return 
    }
  }

  print ( "Maximum number of solver iterations (", 10000, ") was exceeded" )
}

*/

/// Preconditioner

Function PreSmoother@all {
  repeat 2 times {
    u += omegaRelax * diag_inv ( M ) * ( f - M * u ) where (i0 + i1) % 2 == 0
    u += omegaRelax * diag_inv ( M ) * ( f - M * u ) where (i0 + i1) % 2 == 1
  }
}
Function PostSmoother@all {
  repeat 2 times {
    u += omegaRelax * diag_inv ( M ) * ( f - M * u ) where (i0 + i1) % 2 == 0
    u += omegaRelax * diag_inv ( M ) * ( f - M * u ) where (i0 + i1) % 2 == 1
  }
}


Function VCycle@(coarsest + 2 to finest) {
  PreSmoother ( )

  res = f - M * u
  f@coarser = Restriction_u * res

  u@coarser = 0.0
  VCycle@coarser ( )

  u += Prolongation_u@coarser * u@coarser

  PostSmoother ( )
}

Function VCycle@(coarsest + 1) {
  PreSmoother ( )

  res = f - M * u
  f@coarser = Restriction_u * res

  gen_error_u@coarser = 0.0
  VCycle@coarser ( )
  u@coarser = gen_error_u@coarser

  u += Prolongation_u@coarser * u@coarser

  PostSmoother ( )
}

/*
 * Conjugate Gradient Coarse Grid Solver
Function VCycle@coarsest {
  // init residual
  gen_residual_u    = f - M * gen_error_u
  Var curRes  : Real = sqrt(dot(gen_residual_u, gen_residual_u))
  Var initRes : Real = curRes
  Var nextRes : Real = 0.0

  if ( curRes == 0.0 ) { return }

  // init variables and fields
  Var alpha   : Real = 0.0
  Var beta    : Real = 0.0

  p_u           = gen_residual_u

  // main loop
  Var curStep : Int  = 0
  repeat 10000 times count curStep {
    ap_u        = M * p_u

    alpha     = dot ( gen_residual_u, gen_residual_u ) / dot ( p_u, ap_u )
    gen_error_u += alpha * p_u
    gen_residual_u -= alpha * ap_u

    nextRes   = sqrt (dot (gen_residual_u, gen_residual_u) )
    if ( nextRes <= 1e-6 * initRes ) { return }

    beta      = nextRes**2 / curRes**2
    p_u         = gen_residual_u + beta * p_u
    curRes    = nextRes
  }
  print ( "Maximum number of cgs iterations (", 10000, ") was exceeded" )

}
*/

Field nu    @coarsest from gen_residual_u
Field p     @coarsest from gen_residual_u
Field h     @coarsest from gen_residual_u
Field s     @coarsest from gen_residual_u
Field t     @coarsest from gen_residual_u
Field resHat@coarsest from gen_residual_u

Function VCycle@coarsest {
  // init residual
  gen_residual_u    = f - M * gen_error_u
  Var curRes  : Real = sqrt(dot(gen_residual_u, gen_residual_u))
  Var initRes : Real = curRes

  if ( curRes == 0.0 ) { return }

  // init variables and fields
  Var alpha   : Real = 1.0
  Var beta    : Real = 1.0
  Var rho     : Real
  Var rhoNew  : Real = 1.0
  Var omega   : Real = 1.0

  resHat      = gen_residual_u
  nu          = 0.0
  p           = 0.0

  // main loop
  Var curStep : Int  = 0
  repeat 10000 times count curStep {
    rho       = rhoNew
    rhoNew    = dot ( resHat, gen_residual_u )
    beta      = ( rhoNew / rho ) * ( alpha / omega )
    p         = gen_residual_u + beta * ( p - omega * nu )
    nu        = M * p
    alpha     = rhoNew / dot ( resHat, nu )
    h         = gen_error_u + alpha * p
    s         = gen_residual_u - alpha * nu
    t         = M * s
    omega     = dot ( t, s ) / dot ( t, t )
    gen_error_u  = h + omega * s
    gen_residual_u  = s - omega * t
    curRes    = sqrt(dot(gen_residual_u, gen_residual_u))

    if ( curRes <= 1e-6 * initRes ) { return }
  }

  //print ( "Maximum number of cgs iterations (", 10000, ") was exceeded" )
}

