
/// domain

Domain global< [ 0, 0 ] to [ 1, 1 ] >

/// fields

Field Solution with Complex<Real> on Node of global = 1.0

Field Solution@finest on boundary = 0.0
Field Solution@(all but finest) on boundary = 0.0

Field RHS@finest with Complex<Real> on Node of global = 0.0
Field RHS@(all but finest) with Complex<Real> on Node of global

Field Residual        from RHS
override bc for Residual@finest with 0.0

// For the Preconditioner
Field u from Residual
Field f from Residual
Field res from Residual
Field gen_error_u from u
Field gen_residual_u from res
Field gen_rhs_u from f
Field p_u @coarsest from res
Field ap_u@coarsest from res

Field p@finest from Residual
Field ap@finest from Residual

/// for BiCGStab
Field h     @finest from Residual
Field s     @finest from Residual
Field t     @finest from Residual
Field resHat@finest from Residual

/// for Conjugate Residual
Field ar@finest from Residual

/// for MinRes
Field pOld@finest from Residual
Field pNew@finest from Residual
Field vOld@finest from Residual
Field v   @finest from Residual
Field vNew@finest from Residual

/// operators

Operator A from Stencil {
  [ 0,  0] =>  2.0 / ( vf_gridWidth_x ** 2 ) + 2.0 / ( vf_gridWidth_y ** 2 ) - k**2
  [-1,  0] => -1.0 / ( vf_gridWidth_x ** 2 )
  [ 1,  0] => -1.0 / ( vf_gridWidth_x ** 2 )
  [ 0, -1] => -1.0 / ( vf_gridWidth_y ** 2 )
  [ 0,  1] => -1.0 / ( vf_gridWidth_y ** 2 )
}

Operator M from Stencil {
  [ 0,  0] =>  2.0 / ( vf_gridWidth_x ** 2 ) + 2.0 / ( vf_gridWidth_y ** 2 ) - shift * k**2
  [-1,  0] => -1.0 / ( vf_gridWidth_x ** 2 )
  [ 1,  0] => -1.0 / ( vf_gridWidth_x ** 2 )
  [ 0, -1] => -1.0 / ( vf_gridWidth_y ** 2 )
  [ 0,  1] => -1.0 / ( vf_gridWidth_y ** 2 )
}


Equation PrecEq {
  M * u  == f
}


Operator Restriction_u  from default restriction  on Node with 'linear'
Operator Prolongation_u from default prolongation on Node with 'linear'

/// globals

Globals {
  Expr k = 40.0
  Expr omegaRelax = 1.0
  // Expr shift = (0.6 - 1.0j)
  Var shift : Complex<Real> = (0.6 - 1.0j)
}

Function NormResidual@(coarsest and finest) : Complex<Real> {
  return sqrt ( dot ( Residual, Residual ) )
}

Function Solve@finest {
  PreconditionedBiCGStab@finest (  )
}

/// Preconditioned BiCGStab
Function PreconditionedBiCGStab@finest {

  Residual    = RHS - A * Solution
  Var curRes  : Complex<Real> = NormResidual ( )
  Var initRes : Complex<Real> = curRes

  if ( curRes == 0.0 ) { return }

  // init variables and fields
  Var alpha   : Complex<Real> = 1.0
  Var beta    : Complex<Real> = 1.0
  Var rho     : Complex<Real>
  Var rhoNew  : Complex<Real> = 1.0
  Var omega   : Complex<Real> = 1.0

  resHat      = Residual
  ap          = 0.0
  p           = 0.0

  // main loop
  Var curStep : Int  = 0
  repeat 10000 times count curStep {
    rho       = rhoNew
    rhoNew    = dot ( resHat, Residual )
    beta      = ( rhoNew / rho ) * ( alpha / omega )
    p         = Residual + beta * ( p - omega * ap )
    u = 0
    f = p
    VCycle()
    ap        = A * u
    alpha     = rhoNew / dot ( resHat, ap )
    h         = Solution + alpha * u
    s         = Residual - alpha * ap
    u = 0
    f = s
    VCycle()
    t = A * u
    omega     = dot ( t, s ) / dot ( t, t )
    Solution = h + omega * u
    Residual  = s - omega * t
    curRes    = NormResidual ( )

    // print ( "Residual after", curStep, "iterations is", curRes)
    if ( abs(curRes) < 1e-6 * abs(initRes) ) {
      print ( "Residual after", curStep, "iterations is", abs(curRes), "--- convergence factor is", ( abs(curRes) / abs(initRes) ) )
      return
    }
  }

  print ( "Maximum number of solver iterations (", 10000, ") was exceeded" )
  print ( "Residual after", curStep, "iterations is", abs(curRes), "--- convergence factor is", ( abs(curRes) / abs(initRes) ) )
}

Function Smoother@all {

  color with {
    ((i0 + i1) % 2),
    solve locally at u@[0,0] relax omegaRelax {
      u@[0,0] => M@[0,0] * u@[0,0] == f@[0,0]
    }
  }
  color with {
    ((i0 + i1) % 2),
    solve locally at u@[0,0] relax omegaRelax {
      u@[0,0] => M@[0,0] * u@[0,0] == f@[0,0]
    }
  }


/*
  solve locally at u@[0,0] relax omegaRelax {
    u@[0,0] => ( M@[0,0] * u@[0,0] ) == f@[0,0]
  }
  color with {
    ((i0 + i1) % 2),
    solve locally at u@[0,0] relax omegaRelax {
      u@[0,0] => M@[0,0] * u@[0,0] == f@[0,0]
    }
  }

  solve locally at u@[0,0] relax omegaRelax {
    u@[0,0] => M@[0,0] * u@[0,0] == f@[0,0]
    u@[1,0] => M@[1,0] * u@[1,0] == f@[1,0]
    u@[0,1] => M@[0,1] * u@[0,1] == f@[0,1]
    u@[1,1] => M@[1,1] * u@[1,1] == f@[1,1]
  }
  color with {
    ((i0 + i1) % 2),
    solve locally at u@[0,0] relax omegaRelax {
      u@[0,0] => M@[0,0] * u@[0,0] == f@[0,0]
      u@[1,0] => M@[1,0] * u@[1,0] == f@[1,0]
      u@[0,1] => M@[0,1] * u@[0,1] == f@[0,1]
    }
  }
  color with {
    (i0 % 2),
    (i0 % 2),
    solve locally at u@[0,0] relax omegaRelax {
      u@[0,0] => M@[0,0] * u@[0,0] == f@[0,0]
      u@[0,1] => M@[0,1] * u@[0,1] == f@[0,1]
    }
  }
  color with {
    (i0 % 3),
    (i0 % 3),
    solve locally at u@[0,0] relax omegaRelax {
      u@[0,0] => M@[0,0] * u@[0,0] == f@[0,0]
      u@[1,0] => M@[1,0] * u@[1,0] == f@[1,0]
    }
  }*/
}
/// Preconditioner
Function VCycle@(finest) {
  Smoother ( )

  res = f - M * u
  f@coarser = Restriction_u * res

  u@coarser = 0.0
  VCycle@coarser ( )

  u += Prolongation_u@coarser * u@coarser

  Smoother ( )
}

Function VCycle@(coarsest + 2 to finest - 1) {
  Smoother ( )

  res = f - M * u
  f@coarser = Restriction_u * res

  u@coarser = 0.0
  VCycle@coarser ( )

  u += Prolongation_u@coarser * u@coarser

  Smoother ( )
}

Function VCycle@(coarsest + 1) {
  Smoother ( )

  res = f - M * u
  f@coarser = Restriction_u * res

  gen_error_u@coarser = 0.0
  VCycle@coarser ( )
  u@coarser = gen_error_u@coarser

  u += Prolongation_u@coarser * u@coarser

  Smoother ( )
}
Field nu    @coarsest from gen_residual_u
Field p     @coarsest from gen_residual_u
Field h     @coarsest from gen_residual_u
Field s     @coarsest from gen_residual_u
Field t     @coarsest from gen_residual_u
Field resHat@coarsest from gen_residual_u

Function VCycle@coarsest {
  // init residual
  gen_residual_u    = f - M * gen_error_u
  Var curRes  : Complex<Real> = sqrt(dot(gen_residual_u, gen_residual_u))
  Var initRes : Complex<Real> = curRes

  if ( curRes == 0.0 ) { return }

  // init variables and fields
  Var alpha   : Complex<Real> = 1.0
  Var beta    : Complex<Real> = 1.0
  Var rho     : Complex<Real>
  Var rhoNew  : Complex<Real> = 1.0
  Var omega   : Complex<Real> = 1.0

  resHat      = gen_residual_u
  nu          = 0.0
  p           = 0.0

  // main loop
  Var curStep : Int  = 0
  repeat 10000 times count curStep {
    rho       = rhoNew
    rhoNew    = dot ( resHat, gen_residual_u )
    beta      = ( rhoNew / rho ) * ( alpha / omega )
    p         = gen_residual_u + beta * ( p - omega * nu )
    nu        = M * p
    alpha     = rhoNew / dot ( resHat, nu )
    h         = gen_error_u + alpha * p
    s         = gen_residual_u - alpha * nu
    t         = M * s
    omega     = dot ( t, s ) / dot ( t, t )
    gen_error_u  = h + omega * s
    gen_residual_u  = s - omega * t
    curRes    = sqrt(dot(gen_residual_u, gen_residual_u))

    if ( abs(curRes) < 1e-6 * abs(initRes) ) { return }
  }
}
