
Function myRestr_FD@(all but coarsest) {
  loop over gen_rhs_uNode@coarser {
    gen_rhs_uNode@coarser =
        1.0/4.0  * gen_residual_uNode@[ 0,  0]
      + 1.0/8.0  * gen_residual_uEdgeY@[ 0,  0]
      + 1.0/8.0  * gen_residual_uEdgeY@[-1,  0]
      + 1.0/8.0  * gen_residual_uEdgeX@[ 0,  0]
      + 1.0/8.0  * gen_residual_uEdgeX@[ 0, -1]
      + 1.0/16.0 * gen_residual_uEdgeD@[ 0,  0]
      + 1.0/16.0 * gen_residual_uEdgeD@[-1,  0]
      + 1.0/16.0 * gen_residual_uEdgeD@[ 0, -1]
      + 1.0/16.0 * gen_residual_uEdgeD@[-1, -1]
  }

  loop over gen_rhs_uEdgeX@coarser {
    gen_rhs_uEdgeX@coarser =
        1.0/4.0  * gen_residual_uNode@[ 0,  1]
      + 1.0/8.0  * gen_residual_uEdgeY@[ 0,  1]
      + 1.0/8.0  * gen_residual_uEdgeY@[-1,  1]
      + 1.0/8.0  * gen_residual_uEdgeX@[ 0,  1]
      + 1.0/8.0  * gen_residual_uEdgeX@[ 0,  0]
      + 1.0/16.0 * gen_residual_uEdgeD@[ 0,  1]
      + 1.0/16.0 * gen_residual_uEdgeD@[-1,  1]
      + 1.0/16.0 * gen_residual_uEdgeD@[ 0,  0]
      + 1.0/16.0 * gen_residual_uEdgeD@[-1,  0]
  }

  loop over gen_rhs_uEdgeY@coarser {
    gen_rhs_uEdgeY@coarser =
        1.0/4.0  * gen_residual_uNode@[ 1,  0]
      + 1.0/8.0  * gen_residual_uEdgeY@[ 1,  0]
      + 1.0/8.0  * gen_residual_uEdgeY@[ 0,  0]
      + 1.0/8.0  * gen_residual_uEdgeX@[ 1,  0]
      + 1.0/8.0  * gen_residual_uEdgeX@[ 1, -1]
      + 1.0/16.0 * gen_residual_uEdgeD@[ 1,  0]
      + 1.0/16.0 * gen_residual_uEdgeD@[ 0,  0]
      + 1.0/16.0 * gen_residual_uEdgeD@[ 1, -1]
      + 1.0/16.0 * gen_residual_uEdgeD@[ 0, -1]
  }

  loop over gen_rhs_uEdgeD@coarser {
    gen_rhs_uEdgeD@coarser =
        1.0/4.0  * gen_residual_uNode@[ 1,  1]
      + 1.0/8.0  * gen_residual_uEdgeY@[ 1,  1]
      + 1.0/8.0  * gen_residual_uEdgeY@[ 0,  1]
      + 1.0/8.0  * gen_residual_uEdgeX@[ 1,  1]
      + 1.0/8.0  * gen_residual_uEdgeX@[ 1,  0]
      + 1.0/16.0 * gen_residual_uEdgeD@[ 1,  1]
      + 1.0/16.0 * gen_residual_uEdgeD@[ 0,  1]
      + 1.0/16.0 * gen_residual_uEdgeD@[ 1,  0]
      + 1.0/16.0 * gen_residual_uEdgeD@[ 0,  0]
  }
}

Function myCorr_FD@(all but coarsest) {
  loop over uNode@coarser {
    uNode @[ 0, 0] +=        uNode@coarser
    uEdgeX@[ 0, 0] += 0.5  * uNode@coarser
    uEdgeX@[ 0,-1] += 0.5  * uNode@coarser
    uEdgeY@[ 0, 0] += 0.5  * uNode@coarser
    uEdgeY@[-1, 0] += 0.5  * uNode@coarser
    uEdgeD@[ 0, 0] += 0.25 * uNode@coarser
    uEdgeD@[-1, 0] += 0.25 * uNode@coarser
    uEdgeD@[ 0,-1] += 0.25 * uNode@coarser
    uEdgeD@[-1,-1] += 0.25 * uNode@coarser
  }

  loop over uEdgeX@coarser {
    uNode @[ 0, 1] +=        uEdgeX@coarser
    uEdgeX@[ 0, 1] += 0.5  * uEdgeX@coarser
    uEdgeX@[ 0, 0] += 0.5  * uEdgeX@coarser
    uEdgeY@[ 0, 1] += 0.5  * uEdgeX@coarser
    uEdgeY@[-1, 1] += 0.5  * uEdgeX@coarser
    uEdgeD@[ 0, 1] += 0.25 * uEdgeX@coarser
    uEdgeD@[-1, 1] += 0.25 * uEdgeX@coarser
    uEdgeD@[ 0, 0] += 0.25 * uEdgeX@coarser
    uEdgeD@[-1, 0] += 0.25 * uEdgeX@coarser
  }

  loop over uEdgeY@coarser {
    uNode  @[ 1, 0] +=       uEdgeY@coarser
    uEdgeX@[ 1, 0] += 0.5  * uEdgeY@coarser
    uEdgeX@[ 1,-1] += 0.5  * uEdgeY@coarser
    uEdgeY@[ 1, 0] += 0.5  * uEdgeY@coarser
    uEdgeY@[ 0, 0] += 0.5  * uEdgeY@coarser
    uEdgeD@[ 1, 0] += 0.25 * uEdgeY@coarser
    uEdgeD@[ 0, 0] += 0.25 * uEdgeY@coarser
    uEdgeD@[ 1,-1] += 0.25 * uEdgeY@coarser
    uEdgeD@[ 0,-1] += 0.25 * uEdgeY@coarser
  }

  loop over uEdgeD@coarser {
    uNode  @[ 1, 1] +=       uEdgeD@coarser
    uEdgeX@[ 1, 1] += 0.5  * uEdgeD@coarser
    uEdgeX@[ 1, 0] += 0.5  * uEdgeD@coarser
    uEdgeY@[ 1, 1] += 0.5  * uEdgeD@coarser
    uEdgeY@[ 0, 1] += 0.5  * uEdgeD@coarser
    uEdgeD@[ 1, 1] += 0.25 * uEdgeD@coarser
    uEdgeD@[ 0, 1] += 0.25 * uEdgeD@coarser
    uEdgeD@[ 1, 0] += 0.25 * uEdgeD@coarser
    uEdgeD@[ 0, 0] += 0.25 * uEdgeD@coarser
  }
}

Function myRestr_FE@(all but coarsest) {
  Var uFactor : Real = 1.//0.8//4.
  Var vFactor : Real = uFactor
  Var pFactor : Real = 1.//4.

  loop over gen_rhs_uNode@coarser {
    gen_rhs_uNode@coarser  = uFactor * (
       1.0   * gen_residual_uNode @[ 0,  0]

      -0.125 * gen_residual_uEdgeX@[ 0, -2]
      +0.375 * gen_residual_uEdgeX@[ 0, -1]
      +0.375 * gen_residual_uEdgeX@[ 0,  0]
      -0.125 * gen_residual_uEdgeX@[ 0,  1]

      -0.125 * gen_residual_uEdgeY@[-2,  0]
      +0.375 * gen_residual_uEdgeY@[-1,  0]
      +0.375 * gen_residual_uEdgeY@[ 0,  0]
      -0.125 * gen_residual_uEdgeY@[ 1,  0]

      -0.125 * gen_residual_uEdgeD@[-2, -2]
      +0.375 * gen_residual_uEdgeD@[-1, -1]
      +0.375 * gen_residual_uEdgeD@[ 0,  0]
      -0.125 * gen_residual_uEdgeD@[ 1,  1]

      -0.125 * gen_residual_uEdgeD@[ 0,  1]
      -0.125 * gen_residual_uEdgeX@[ 1,  1]
      -0.125 * gen_residual_uEdgeY@[ 1,  1]
      -0.125 * gen_residual_uEdgeD@[ 1,  0]
      -0.125 * gen_residual_uEdgeX@[ 1, -1]
      -0.125 * gen_residual_uEdgeY@[ 0, -1]
      -0.125 * gen_residual_uEdgeD@[-1, -2]
      -0.125 * gen_residual_uEdgeX@[-1, -2]
      -0.125 * gen_residual_uEdgeY@[-2, -1]
      -0.125 * gen_residual_uEdgeD@[-2, -1]
      -0.125 * gen_residual_uEdgeX@[-1,  0]
      -0.125 * gen_residual_uEdgeY@[-1,  1]
    )
  }

  loop over gen_rhs_uEdgeX@coarser {
    gen_rhs_uEdgeX@coarser = uFactor * (
        1.0  * gen_residual_uNode @[ 0,  1]

      + 0.75 * gen_residual_uEdgeX@[ 0,  0]
      + 0.75 * gen_residual_uEdgeX@[ 0,  1]

      + 0.5  * gen_residual_uEdgeY@[ 0,  1]
      + 0.5  * gen_residual_uEdgeY@[-1,  1]
      + 0.5  * gen_residual_uEdgeD@[ 0,  1]
      + 0.5  * gen_residual_uEdgeD@[-1,  0]

      + 0.25 * gen_residual_uEdgeX@[ 1,  1]
      + 0.25 * gen_residual_uEdgeX@[-1,  0]
    )
  }

  loop over gen_rhs_uEdgeY@coarser {
    gen_rhs_uEdgeY@coarser = uFactor * (
        1.0  * gen_residual_uNode @[ 1,  0]

      + 0.75 * gen_residual_uEdgeY@[ 0,  0]
      + 0.75 * gen_residual_uEdgeY@[ 1,  0]

      + 0.5  * gen_residual_uEdgeX@[ 1,  0]
      + 0.5  * gen_residual_uEdgeX@[ 1, -1]
      + 0.5  * gen_residual_uEdgeD@[ 1,  0]
      + 0.5  * gen_residual_uEdgeD@[ 0, -1]

      + 0.25 * gen_residual_uEdgeY@[ 1,  1]
      + 0.25 * gen_residual_uEdgeY@[ 0, -1]
    )
  }

  loop over gen_rhs_uEdgeD@coarser {
    gen_rhs_uEdgeD@coarser = uFactor * (
        1.0  * gen_residual_uNode @[ 1,  1]

      + 0.75 * gen_residual_uEdgeD@[ 0,  0]
      + 0.75 * gen_residual_uEdgeD@[ 1,  1]

      + 0.5  * gen_residual_uEdgeX@[ 1,  0]
      + 0.5  * gen_residual_uEdgeX@[ 1,  1]
      + 0.5  * gen_residual_uEdgeY@[ 0,  1]
      + 0.5  * gen_residual_uEdgeY@[ 1,  1]

      + 0.25 * gen_residual_uEdgeD@[ 1,  0]
      + 0.25 * gen_residual_uEdgeD@[ 0,  1]
    )
  }
}


Function myCorr_FE@(all but coarsest) {
  loop over uNode@coarser {
    uNode @[ 0,  0] +=  1.0   * uNode@coarser

    uEdgeX@[ 0, -2] += -0.125 * uNode@coarser
    uEdgeX@[ 0, -1] +=  0.375 * uNode@coarser
    uEdgeX@[ 0,  0] +=  0.375 * uNode@coarser
    uEdgeX@[ 0,  1] += -0.125 * uNode@coarser

    uEdgeY@[-2,  0] += -0.125 * uNode@coarser
    uEdgeY@[-1,  0] +=  0.375 * uNode@coarser
    uEdgeY@[ 0,  0] +=  0.375 * uNode@coarser
    uEdgeY@[ 1,  0] += -0.125 * uNode@coarser

    uEdgeD@[-2, -2] += -0.125 * uNode@coarser
    uEdgeD@[-1, -1] +=  0.375 * uNode@coarser
    uEdgeD@[ 0,  0] +=  0.375 * uNode@coarser
    uEdgeD@[ 1,  1] += -0.125 * uNode@coarser

    uEdgeD@[ 0,  1] += -0.125 * uNode@coarser
    uEdgeX@[ 1,  1] += -0.125 * uNode@coarser
    uEdgeY@[ 1,  1] += -0.125 * uNode@coarser
    uEdgeD@[ 1,  0] += -0.125 * uNode@coarser
    uEdgeX@[ 1, -1] += -0.125 * uNode@coarser
    uEdgeY@[ 0, -1] += -0.125 * uNode@coarser
    uEdgeD@[-1, -2] += -0.125 * uNode@coarser
    uEdgeX@[-1, -2] += -0.125 * uNode@coarser
    uEdgeY@[-2, -1] += -0.125 * uNode@coarser
    uEdgeD@[-2, -1] += -0.125 * uNode@coarser
    uEdgeX@[-1,  0] += -0.125 * uNode@coarser
    uEdgeY@[-1,  1] += -0.125 * uNode@coarser
  }

  loop over uEdgeX@coarser {
    uNode @[ 0,  1] += 1.0  * uEdgeX@coarser
    uEdgeX@[ 0,  0] += 0.75 * uEdgeX@coarser
    uEdgeX@[ 0,  1] += 0.75 * uEdgeX@coarser
    uEdgeY@[ 0,  1] += 0.5  * uEdgeX@coarser
    uEdgeY@[-1,  1] += 0.5  * uEdgeX@coarser
    uEdgeD@[ 0,  1] += 0.5  * uEdgeX@coarser
    uEdgeD@[-1,  0] += 0.5  * uEdgeX@coarser
    uEdgeX@[ 1,  1] += 0.25 * uEdgeX@coarser
    uEdgeX@[-1,  0] += 0.25 * uEdgeX@coarser
  }

  loop over uEdgeY@coarser {
    uNode @[ 1,  0] += 1.0  * uEdgeY@coarser
    uEdgeY@[ 0,  0] += 0.75 * uEdgeY@coarser
    uEdgeY@[ 1,  0] += 0.75 * uEdgeY@coarser
    uEdgeX@[ 1,  0] += 0.5  * uEdgeY@coarser
    uEdgeX@[ 1, -1] += 0.5  * uEdgeY@coarser
    uEdgeD@[ 1,  0] += 0.5  * uEdgeY@coarser
    uEdgeD@[ 0, -1] += 0.5  * uEdgeY@coarser
    uEdgeY@[ 1,  1] += 0.25 * uEdgeY@coarser
    uEdgeY@[ 0, -1] += 0.25 * uEdgeY@coarser
  }

  loop over uEdgeD@coarser {
    uNode @[ 1,  1] += 1.0  * uEdgeD@coarser
    uEdgeD@[ 0,  0] += 0.75 * uEdgeD@coarser
    uEdgeD@[ 1,  1] += 0.75 * uEdgeD@coarser
    uEdgeX@[ 1,  0] += 0.5  * uEdgeD@coarser
    uEdgeX@[ 1,  1] += 0.5  * uEdgeD@coarser
    uEdgeY@[ 0,  1] += 0.5  * uEdgeD@coarser
    uEdgeY@[ 1,  1] += 0.5  * uEdgeD@coarser
    uEdgeD@[ 1,  0] += 0.25 * uEdgeD@coarser
    uEdgeD@[ 0,  1] += 0.25 * uEdgeD@coarser
  }

  apply bc to uNode
  apply bc to uEdgeX
  apply bc to uEdgeY
  apply bc to uEdgeD
}

//// TEST PROBLEM 1 ////
// u = 10
/*
Function NormError_Max@finest ( ) : Real {
  Var err_u : Real = 0

  loop over uNode with reduction( max : err_u ){
    Var curErr : Real = uNode - 10
    err_u = max ( fabs ( curErr ), err_u )
  }
  loop over uEdgeX with reduction( max : err_u ){
    Var curErr : Real = uEdgeX - 10
    err_u = max ( fabs ( curErr ), err_u )
  }
  loop over uEdgeY with reduction( max : err_u ){
    Var curErr : Real = uEdgeY - 10
    err_u = max ( fabs ( curErr ), err_u )
  }
  loop over uEdgeD with reduction( max : err_u ){
    Var curErr : Real = uEdgeD - 10
    err_u = max ( fabs ( curErr ), err_u )
  }

  print ( 'Error:', err_u )

  return err_u
}
*/
//// END OF TEST PROBLEM 1 ////

//// TEST PROBLEM 2 ////
// u = sin ( PI * x ) * sin ( PI * y )

Function NormError_Max@finest ( ) : Real {
  Var err_u : Real = 0

  loop over uNode with reduction( max : err_u ){
    Var curErr : Real = uNode - ( sin ( PI * vf_nodePos_x ) * sin ( PI * vf_nodePos_y ) )
    err_u = max ( fabs ( curErr ), err_u )
  }
  loop over uEdgeX with reduction( max : err_u ){
    Var curErr : Real = uEdgeX - ( sin ( PI * vf_nodePos_x ) * sin ( PI * vf_cellCenter_y ) )
    err_u = max ( fabs ( curErr ), err_u )
  }
  loop over uEdgeY with reduction( max : err_u ){
    Var curErr : Real = uEdgeY - ( sin ( PI * vf_cellCenter_x ) * sin ( PI * vf_nodePos_y ) )
    err_u = max ( fabs ( curErr ), err_u )
  }
  loop over uEdgeD with reduction( max : err_u ){
    Var curErr : Real = uEdgeD - ( sin ( PI * vf_cellCenter_x ) * sin ( PI * vf_cellCenter_y ) )
    err_u = max ( fabs ( curErr ), err_u )
  }

  print ( 'Error:', err_u )

  return err_u
}

//// END OF TEST PROBLEM 2 ////
