
Function PrintError@finest {
  Var norm : Real = 0.0
  loop over Solution with reduction ( max : norm ) {
    norm = max ( norm, fabs ( Solution - ( cos ( PI * vf_nodePos_x ) - sin ( 2.0 * PI * vf_nodePos_y ) ) ) )
  }

  if ( getKnowledge ( 'testing_enabled' ) ) {
    if ( getKnowledge ( 'testing_printErr' ) ) { printWithReducedPrec ( norm ) }
  } else {
    print ( "The maximum error is", norm )
  }
}

Function Application {
  // init
  startTimer ( "setup" )
  initGlobals ( )
  initDomain ( )
  initFieldsWithZero ( )
  initGeometry ( )
  InitFields ( )
  apply bc to Solution@finest
  stopTimer ( "setup" )

  // solve
  startTimer ( "solve" )
  Solve@finest ( )
  stopTimer ( "solve" )

  // de-init
  if ( !getKnowledge ( 'testing_enabled' ) ) {
    printAllTimers ( )
  }
  destroyGlobals ( )
}
