Domain global< [ 0, 0 ] to [ 1, 1 ] >

Field img0@finest with Real on Cell of global = sin ( vf_cellCenter_x ) + cos ( vf_cellCenter_y )
Field img1@finest with Real on Cell of global = sin ( vf_cellCenter_x - 0.01 ) + cos ( vf_cellCenter_y + 0.01 )

Field img0@(all but finest) with Real on Cell of global = RestrictionCell@finer * img0@finer
Field img1@(all but finest) with Real on Cell of global = RestrictionCell@finer * img1@finer

Field img0 on boundary = Neumann
Field img1 on boundary = Neumann

Field u with Real on Node of global = 0.0
Field v with Real on Node of global = 0.0

Field u on boundary = Neumann
Field v on boundary = Neumann

Field Ix with Real on Node of global = GradX * img0 //+ GradX * img1 // TODO: check addition
Field Iy with Real on Node of global = GradY * img0 //+ GradY * img1
Field It with Real on Node of global = img1 - img0 // TODO: dt != 1

Field rhs_u@finest with Real on Node of global = - Ix * It
Field rhs_v@finest with Real on Node of global = - Iy * It

Stencil RestrictionCell from default restriction on Cell with 'linear'

Globals {
	Val alpha : Real = 1
}

Operator GradX from Stencil {
	[ 0,  0] =>  0.5 / vf_gridWidth_x
	[ 0, -1] =>  0.5 / vf_gridWidth_x
	[-1,  0] => -0.5 / vf_gridWidth_x
	[-1, -1] => -0.5 / vf_gridWidth_x
}
Operator GradY from Stencil {
	[ 0,  0] =>  0.5 / vf_gridWidth_y
	[-1,  0] =>  0.5 / vf_gridWidth_y
	[ 0, -1] => -0.5 / vf_gridWidth_y
	[-1, -1] => -0.5 / vf_gridWidth_y
}

Operator Laplace from Stencil {
  [ 0,  0] =>  2.0 / ( vf_gridWidth_x ** 2 ) + 2.0 / ( vf_gridWidth_y ** 2 )
  [-1,  0] => -1.0 / ( vf_gridWidth_x ** 2 )
  [ 1,  0] => -1.0 / ( vf_gridWidth_x ** 2 )
  [ 0, -1] => -1.0 / ( vf_gridWidth_y ** 2 )
  [ 0,  1] => -1.0 / ( vf_gridWidth_y ** 2 )
}

Operator uuSten from Stencil {
  [ 0,  0] => Ix * Ix
}
Operator uvSten from Stencil {
  [ 0,  0] => Ix * Iy
}

Operator vuSten from Stencil {
  [ 0,  0] => Iy * Ix
}
Operator vvSten from Stencil {
  [ 0,  0] => Iy * Iy
}

Equation uEquation@finest {
  uuSten * u + uvSten * v + alpha**2 * ( Laplace * u ) == rhs_u
}
Equation uEquation@(all but finest) {
  uuSten * u + uvSten * v + alpha**2 * ( Laplace * u ) == 0.0
}

Equation vEquation@finest {
  vuSten * u + vvSten * v + alpha**2 * ( Laplace * v ) == rhs_v
}
Equation vEquation@(all but finest) {
  vuSten * u + vvSten * v + alpha**2 * ( Laplace * v ) == 0.0
}
