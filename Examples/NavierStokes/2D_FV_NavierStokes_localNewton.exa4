
/// main functions

Function Application ( ) : Unit {
  startTimer ( 'setup' )

  initGlobals ( )
  initDomain ( )
  initFieldsWithZero ( )
  initGeometry ( )
  InitFields ( )

  stopTimer ( 'setup' )

  print ( 'Reynolds number:', Re )

  Var curIt : Int = 0
  Var curPrintIt : Int = 0
  repeat until ( curTime >= maxTime ) {
    vis@finest ( )
    if ( curTime >= nextPrint ) {
      nextPrint += printInterval
      Var filename_vel : String
      buildString ( filename_vel, "data/output_", curPrintIt, ".vtk" )
      printVtkNS ( filename_vel, levels@finest ( ) )
      //printVtkNNF ( filename_vel, levels@finest ( ) )
      curPrintIt += 1
    }

    if ( 0 == curIt % 100 ) {
      print ( "Starting iteration", curIt, "at time", curTime, "with dt", dt )
    }
    if ( 0 == curIt % 16 and curIt > 0 ) {
      dt *= 2
      print ( "Trying to increase dt to", dt )
    }

    curTime += dt
    curIt += 1

    Advance@finest ( )
    startTimer ( 'solve' )
    gen_solve@finest ( )//Solve@finest ( )
    stopTimer ( 'solve' )
    totalNumTimeSteps += 1
  }
  print ( 'Total time to solve:   ', getTotalFromTimer ( 'solve' ) )
  print ( 'Total time in cycle:   ', getTotalFromTimer ( 'cycle' ) )

  print ( 'Mean time per cycle:   ', getMeanFromTimer ( 'cycle' ) )
  print ( 'Number of cycles:      ', totalNumCycles )
  print ( 'Number of time steps:  ', totalNumTimeSteps )

  vis@finest ( )

  //printAllTimers ( )
  destroyGlobals ( )
}

Function updateVis@all {
  //Val scale : Real = 1.0 / topVel

  Var uMax : Real = 0.0
  loop over u with reduction( max : uMax ) {
    uMax = max ( uMax, fabs ( u ) )
  }
  Var vMax : Real = 0.0
  loop over v with reduction( max : vMax ) {
    vMax = max ( vMax, fabs ( v ) )
  }

  Var pMax : Real = 0.0
  loop over p with reduction( max : pMax ) {
    pMax = max ( pMax, fabs ( p ) )
  }

  Val scaleP : Real = 1.0 / pMax
  Val scale : Real = 1.0 / max ( uMax, vMax )
  loop over velMag {
    velMag = sqrt ( ( 0.5 * ( u + u@[1,0] ) ) ** 2 + ( 0.5 * ( v + v@[0,1] ) ) ** 2 )
    velMag = scale * velMag
    uVis = 0.5 + 0.5 * scale * u
    vVis = 0.5 + 0.5 * scale * v
    pVis = 0.5 + 0.5 * scaleP * p
  }

  @finest {
    //print ( 'u,v,p max', uMax, vMax, pMax )
  }

  @(all but coarsest) {
    updateVis@coarser ( )
  }
}

Function vis@finest {
  updateVis ( )
  //showMappedImageAndWaitWhen ( curTime < maxTime, uVis, vVis, velMag )
  showMappedImageAndWaitWhen ( curTime < maxTime, velMag )
}
