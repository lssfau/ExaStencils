
/// main functions

Function Application ( ) : Unit {
  startTimer ( 'setup' )

  initGlobals ( )
  initDomain ( )
  initFieldsWithZero ( )
  initGeometry ( )
  InitFields ( )

  stopTimer ( 'setup' )

  print ( 'Reynolds number:', Re )

  Var curIt : Int = 0
  Var curPrintIt : Int = 0
  repeat until ( curTime >= maxTime ) {
    if ( curTime >= nextPrint ) {
      nextPrint += printInterval
      Var filename_vel : String

      /* unstruct hex/quad mesh visualization */
      startTimer ( 'printVtk' )
      buildString ( filename_vel, "data/output_", curPrintIt, ".vtk" )
      printVtkNS ( filename_vel, levels@finest ( ) )
      //printVtkNNF ( filename_vel, levels@finest ( ) )
      stopTimer ( 'printVtk' )

      startTimer ( 'xdmf_fpp_ascii' )
      buildString ( filename_vel, "data/output_fpp_ascii", curPrintIt, ".xmf" )
      printXdmfNS_fpp ( filename_vel, levels@finest ( ), false )
      stopTimer ( 'xdmf_fpp_ascii' )

      startTimer ( 'xdmf_fpp_bin' )
      buildString ( filename_vel, "data/output_fpp_bin", curPrintIt, ".xmf" )
      printXdmfNS_fpp ( filename_vel, levels@finest ( ), true )
      stopTimer ( 'xdmf_fpp_bin' )

      startTimer ( 'xdmf_hdf5' )
      buildString ( filename_vel, "data/output_h5_", curPrintIt, ".xmf" )
      printXdmfNS_hdf5 ( filename_vel, levels@finest ( ) )
      stopTimer ( 'xdmf_hdf5' )

      startTimer ( 'xdmf_mpiiio' )
      buildString ( filename_vel, "data/output_mpiio_", curPrintIt, ".xmf" )
      printXdmfNS_mpiio ( filename_vel, levels@finest ( ) )
      stopTimer ( 'xdmf_mpiiio' )

      startTimer ( 'exodusII' )
      printExodusNS ( "data/output.e", levels@finest ( ) ) // const data reduction on
      //buildString ( filename_vel, "data/output_", curPrintIt, ".e" ) // const data reduction off
      //printExodusNS ( filename_vel, levels@finest ( ) )
      stopTimer ( 'exodusII' )

      /* uniform mesh visualization */
      Val useGhost : Boolean = true
      Val useBin : Boolean = true

      startTimer ( 'printField_lock: p' )
      buildString ( filename_vel, "data/p_lock_", curPrintIt, ".csv" )
      printField_lock ( filename_vel, p@finest, !useGhost, !useBin )
      stopTimer ( 'printField_lock: p' )

      startTimer ( 'printField_fpp: u' )
      buildString ( filename_vel, "data/u_fpp_bin_", curPrintIt, ".xmf" )
      printField_fpp ( filename_vel, u@finest, !useBin )
      stopTimer ( 'printField_fpp: u' )

      startTimer ( 'printField_fpp bin: v' )
      buildString ( filename_vel, "data/v_fpp_xml_", curPrintIt, ".xmf" )
      printField_fpp ( filename_vel, v@finest, useBin )
      stopTimer ( 'printField_fpp bin: v' )

      startTimer ( 'writeField_sion: u' )
      buildString ( filename_vel, "data/u_", curPrintIt, ".sion" )
      writeField_sion ( filename_vel, u@finest, !useGhost )
      stopTimer ( 'writeField_sion: u' )

      startTimer ( 'printField_hdf5: u' )
      buildString ( filename_vel, "data/u_h5_", curPrintIt, ".xmf" )
      printField_hdf5 ( filename_vel, u@finest)
      stopTimer ( 'printField_hdf5: u' )

      startTimer ( 'printField_hdf5: p' )
      buildString ( filename_vel, "data/p_h5_", curPrintIt, ".xmf" )
      printField_hdf5 ( filename_vel, p@finest)
      stopTimer ( 'printField_hdf5: p' )

      startTimer ( 'printField_mpiio: p' )
      buildString ( filename_vel, "data/p_mpiio_", curPrintIt, ".xmf" )
      printField_mpiio ( filename_vel, p@finest)
      stopTimer ( 'printField_mpiio: p' )

      startTimer ( 'printField_nc: u' )
      buildString ( filename_vel, "data/u_nc_", curPrintIt, ".nc" )
      printField_nc ( filename_vel, u@finest )
      stopTimer ( 'printField_nc: u' )
      
      curPrintIt += 1
    }

    if ( 0 == curIt % 100 ) {
      print ( "Starting iteration", curIt, "at time", curTime, "with dt", dt )
    }
    if ( 0 == curIt % 16 and curIt > 0 ) {
      dt *= 2
      print ( "Trying to increase dt to", dt )
    }

    curTime += dt
    curIt += 1

    Advance@finest ( )
    startTimer ( 'solve' )
    gen_solve@finest ( )//Solve@finest ( )
    stopTimer ( 'solve' )
    totalNumTimeSteps += 1
  }
  print ( 'Total time to solve:   ', getTotalFromTimer ( 'solve' ) )
  print ( 'Total time in cycle:   ', getTotalFromTimer ( 'cycle' ) )

  print ( 'Mean time per cycle:   ', getMeanFromTimer ( 'cycle' ) )
  print ( 'Number of cycles:      ', totalNumCycles )
  print ( 'Number of time steps:  ', totalNumTimeSteps )

  //printAllTimers ( )
  destroyGlobals ( )
}
