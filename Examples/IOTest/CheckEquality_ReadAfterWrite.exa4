// domain declarations

Domain global< [0.0, 0.0, 0.0] to [1.0, 1.0, 1.0] >

// field layout declarations

Layout NodeNoComm< Real, Node >@all {
  duplicateLayers = [1, 1, 1]
  ghostLayers     = [0, 0, 0]
}

Layout NodeWithComm< Real, Node >@all {
  duplicateLayers = [1, 1, 1] with communication
  ghostLayers     = [1, 1, 1] with communication
}

Layout NodeNoGhost< Real, Node >@all {
  duplicateLayers = [1, 1, 1] with communication
  ghostLayers     = [0, 0, 0]
}

// field declarations

Field src< global, NodeWithComm, 0.0 >@all
Field dest< global, NodeWithComm, 0.0 >@all

// external field declarations

// stencil declarations

// stencil field declarations

// functions

Function compareFields@all : Int {
    // check for equality
    loop over dest {
        Var diff : Real = fabs(dest - src)
        if( diff > 0.001 ) {
            print("fields are not equal! src=", src, " dest=", dest)
            print("Error occurred at idx: i0 =", i0, ",i1 =", i1, ",i2=", i2)
            return -1
        }
    }
    
    // reset dest
    loop over dest {
        dest = -1.0
    }
    
    return 0
}

Function initSRC@finest {
  loop over src {
    src = vf_nodePos_x**2 - vf_nodePos_y**2 - vf_nodePos_z**2
  }
}

Function checkEquality@finest {
  Val ret : Int = compareFields@finest ( )
  if( ret == -1 ) {
    exit(1)
  }
}

Function Application {
  // init
  startTimer ( "setup" )
  initGlobals ( )
  initDomain ( )
  initFieldsWithZero ( )
  initGeometry ( )
  initSRC@finest ( )
  stopTimer ( "setup" )
  
  Val useGhost : Bool = false
  Val useBin : Bool = true
  Val condition : Bool = true
  Val separator : String = ","
    
  /* Start FPP I/O */
  startTimer ("FPP: writeField")
  writeField_fpp ("src_fpp_$blockId.bin", src@finest, useGhost, useBin, condition)
  stopTimer ("FPP: writeField")

  startTimer ("FPP: readField")
  readField_fpp ("src_fpp_$blockId.bin", dest@finest, useGhost, useBin, condition)
  stopTimer ("FPP: readField")
  
  checkEquality@finest ( )
  /* End FPP I/O */
  
  /* Start Locking I/O */
  startTimer ("Lock: writeField")
  writeField_lock ("src_lock.txt", src@finest, useGhost, !useBin, condition, separator)
  stopTimer ("Lock: writeField")
  
  startTimer ("Lock: readField")
  readField_lock ("src_lock.txt", dest@finest, useGhost, !useBin, condition, separator)
  stopTimer ("Lock: readField")
  
  checkEquality@finest ( )
  
  printField_lock ("src_vis.csv", src@finest, useGhost, !useBin, condition, separator) // write csv for paraview
  /* End Locking I/O */
  
  /* Start HDF5 */
  startTimer ("HDF5: writeField")
  writeField_hdf5 ("src.h5", "/test/abs/path/src", src@finest)
  stopTimer ("HDF5: writeField")
  
  startTimer ("HDF5: readField")
  readField_hdf5 ("src.h5", "/test/abs/path/src", dest@finest)
  stopTimer ("HDF5: readField")
  
  checkEquality@finest ( )
  /* END HDF5 */
  
  /* Start MPIIO */
  startTimer ("MPIIO: writeField")
  writeField_mpiio ("src.bin", src@finest)
  stopTimer ("MPIIO: writeField")
  
  startTimer ("MPIIO: readField")
  readField_mpiio ("src.bin", dest@finest)
  stopTimer ("MPIIO: readField")

  checkEquality@finest ( )
  /* END MPIIO */
  
  /* Start PnetCDF */
  startTimer ("PnetCDF: writeField")
  writeField_nc ("src.nc", "field_src", src@finest)
  stopTimer ("PnetCDF: writeField")
  
  startTimer ("PnetCDF: readField")
  readField_nc ("src.nc", "field_src", dest@finest)
  stopTimer ("PnetCDF: readField")
  
  checkEquality@finest ( )
  /* END PnetCDF */
  
  
  // de-init
  printAllTimers ( )
  destroyGlobals ( )
}
