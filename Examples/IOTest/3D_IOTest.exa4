// domain declarations

Domain global< [0.0, 0.0, 0.0] to [1.0, 1.0, 1.0] >

// field layout declarations

Layout NodeNoComm< Real, Node >@all {
  duplicateLayers = [1, 1, 1]
  ghostLayers     = [0, 0, 0]
}

Layout NodeWithComm< Real, Node >@all {
  duplicateLayers = [1, 1, 1] with communication
  ghostLayers     = [1, 1, 1] with communication
}

Layout NodeNoGhost< Real, Node >@all {
  duplicateLayers = [1, 1, 1] with communication
  ghostLayers     = [0, 0, 0]
}

// field declarations

Field src< global, NodeWithComm, 0.0 >@all
Field dest< global, NodeWithComm, 0.0 >@all

// external field declarations

// stencil declarations

// stencil field declarations

// functions

Function compareFields@all : Int {
    loop over dest {
        Var diff : Real = fabs(dest - src)
        if( diff > 0.001 ) {
            print("fields are not equal!")
            print("Error occurred at idx: i0 =", i0, ",i1 =", i1, ",i2=", i2)
            return -1
        }
    }
    return 0
}

Function initSRC@finest {
  loop over src {
    src = vf_nodePos_x**2 - vf_nodePos_y**2 - vf_nodePos_z**2
  }
}

Function checkEquality@finest {
  Val ret : Int = compareFields@finest ( )
  if( ret == -1 ) {
    exit(1)
  }
}

Function Application {
  // init
  startTimer ( "setup" )
  initGlobals ( )
  initDomain ( )
  initFieldsWithZero ( )
  initGeometry ( )
  initSRC@finest ( )
  stopTimer ( "setup" )
  
  Val fmt : String = "bin"
  
  /* Start FPP I/O */
  // write field
  startTimer ("FPP: writeField")
  writeField ("src_fpp", src@finest, fmt, false, false)
  stopTimer ("FPP: writeField")

  // read field
  startTimer ("FPP: readField")
  readField ("src_fpp", dest@finest, fmt, false, false)
  stopTimer ("FPP: readField")
  
  checkEquality@finest ( )
  
  writeField ("dest_fpp", dest@finest, fmt, false, false)
  /* End FPP I/O */
  
  /* Start Locking I/O */
  startTimer ("Lock: writeField")
  writeField ("src_lock", src@finest, fmt, true, true)
  stopTimer ("Lock: writeField")
  
  startTimer ("Lock: readField")
  readField ("src_lock", dest@finest, fmt, true, true)
  stopTimer ("Lock: readField")
  
  checkEquality@finest ( )
  
  printField ("src_vis", src@finest, "csv", true, true)
  writeField ("dest_lock", dest@finest, fmt, true, true)
  /* End Locking I/O */
  
  // de-init
  printAllTimers ( )
  destroyGlobals ( )
}
