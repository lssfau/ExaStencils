// domain declarations

Domain global< [0.0, 0.0, 0.0] to [1.0, 1.0, 1.0] >

// field layout declarations

Layout CellNoComm< Real, Cell >@all {
  duplicateLayers = [0, 0, 0]
  ghostLayers     = [0, 0, 0]
}

Layout FaceXNoComm< Real, Face_x >@all {
  duplicateLayers = [1, 0, 0]
  ghostLayers     = [0, 0, 0]
}

Layout FaceYNoComm< Real, Face_y >@all {
  duplicateLayers = [0, 1, 0]
  ghostLayers     = [0, 0, 0]
}

Layout FaceZNoComm< Real, Face_z >@all {
  duplicateLayers = [0, 0, 1]
  ghostLayers     = [0, 0, 0]
}

Layout CellWithComm< Real, Cell >@all {
  duplicateLayers = [0, 0, 0]
  ghostLayers     = [1, 1, 1] with communication
}

Layout FaceXWithComm< Real, Face_x >@all {
  duplicateLayers = [1, 0, 0] with communication
  ghostLayers     = [1, 1, 1] with communication
}

Layout FaceYWithComm< Real, Face_y >@all {
  duplicateLayers = [0, 1, 0] with communication
  ghostLayers     = [1, 1, 1] with communication
}

Layout FaceZWithComm< Real, Face_z >@all {
  duplicateLayers = [0, 0, 1] with communication
  ghostLayers     = [1, 1, 1] with communication
}

Layout FaceXNoGhost< Real, Face_x >@all {
  duplicateLayers = [1, 0, 0] with communication
  ghostLayers     = [0, 0, 0]
}

Layout FaceYNoGhost< Real, Face_y >@all {
  duplicateLayers = [0, 1, 0] with communication
  ghostLayers     = [0, 0, 0]
}

Layout FaceZNoGhost< Real, Face_z >@all {
  duplicateLayers = [0, 0, 1] with communication
  ghostLayers     = [0, 0, 0]
}

Layout FaceX__0_1_1__0_1_1< Real, Face_x >@all {
  duplicateLayers = [1, 0, 0] with communication
  ghostLayers = [0, 1, 1] with communication
}

Layout FaceY__1_0_1__1_0_1< Real, Face_y >@all {
  duplicateLayers = [0, 1, 0] with communication
  ghostLayers = [1, 0, 1] with communication
}

Layout FaceZ__1_1_0__1_1_0< Real, Face_z >@all {
  duplicateLayers = [0, 0, 1] with communication
  ghostLayers = [1, 1, 0] with communication
}

// field declarations
Field u< global, FaceXWithComm, 0.0 >@(all but finest)
Field u< global, FaceXWithComm, sin ( 2.0 * PI * vf_boundaryCoord_x ) - cos (       PI * vf_boundaryCoord_z ) >@finest

Field v< global, FaceYWithComm, 0.0 >@(all but finest)
Field v< global, FaceYWithComm, cos (       PI * vf_boundaryCoord_x ) - sin ( 2.0 * PI * vf_boundaryCoord_y ) >@finest

Field w< global, FaceZWithComm, 0.0 >@(all but finest)
Field w< global, FaceZWithComm, sin ( 2.0 * PI * vf_boundaryCoord_z ) - cos (       PI * vf_boundaryCoord_y ) >@finest

Field p< global, CellWithComm, Neumann >@all

Field rhs_u< global, FaceXNoGhost, None >@all
Field rhs_v< global, FaceYNoGhost, None >@all
Field rhs_w< global, FaceZNoGhost, None >@all
Field rhs_p< global, CellNoComm, None >@all

Field residual_u< global, FaceX__0_1_1__0_1_1, 0.0 >@coarsest
Field residual_u< global, FaceXWithComm, 0.0 >@(all but coarsest)
Field residual_v< global, FaceY__1_0_1__1_0_1, 0.0 >@coarsest
Field residual_v< global, FaceYWithComm, 0.0 >@(all but coarsest)
Field residual_w< global, FaceZ__1_1_0__1_1_0, 0.0 >@coarsest
Field residual_w< global, FaceZWithComm, 0.0 >@(all but coarsest)
Field residual_p< global, CellWithComm, Neumann >@all

// fields for the coarse grid solver

Field h_u< global, FaceXNoGhost, None >@coarsest
Field h_v< global, FaceYNoGhost, None >@coarsest
Field h_w< global, FaceZNoGhost, None >@coarsest
Field h_p< global, CellNoComm, None >@coarsest

Field nu_u< global, FaceXNoGhost, None >@coarsest
Field nu_v< global, FaceYNoGhost, None >@coarsest
Field nu_w< global, FaceZNoGhost, None >@coarsest
Field nu_p< global, CellNoComm, None >@coarsest

Field p_u< global, FaceXWithComm, 0.0 >@coarsest
Field p_v< global, FaceYWithComm, 0.0 >@coarsest
Field p_w< global, FaceZWithComm, 0.0 >@coarsest
Field p_p< global, CellWithComm, Neumann >@coarsest

Field resHat_u< global, FaceXNoGhost, None >@coarsest
Field resHat_v< global, FaceYNoGhost, None >@coarsest
Field resHat_w< global, FaceZNoGhost, None >@coarsest
Field resHat_p< global, CellNoComm, None >@coarsest

Field s_u< global, FaceXWithComm, 0.0 >@coarsest
Field s_v< global, FaceYWithComm, 0.0 >@coarsest
Field s_w< global, FaceZWithComm, 0.0 >@coarsest
Field s_p< global, CellWithComm, Neumann >@coarsest

Field t_u< global, FaceXNoGhost, None >@coarsest
Field t_v< global, FaceYNoGhost, None >@coarsest
Field t_w< global, FaceZNoGhost, None >@coarsest
Field t_p< global, CellNoComm, None >@coarsest

// external field declarations

// stencil declarations

Stencil A11@all{
  [ 0,  0,  0] => (
        ( vf_cellWidth_y   * vf_cellWidth_z ) / vf_cellWidth_x  @[0, 0, 0]
      + ( vf_cellWidth_y   * vf_cellWidth_z ) / vf_cellWidth_x  @[1, 0, 0]
      + ( vf_stagCVWidth_x * vf_cellWidth_z ) / vf_stagCVWidth_y@[0, 0, 0]
      + ( vf_stagCVWidth_x * vf_cellWidth_z ) / vf_stagCVWidth_y@[0, 1, 0]
      + ( vf_stagCVWidth_x * vf_cellWidth_y ) / vf_stagCVWidth_z@[0, 0, 0]
      + ( vf_stagCVWidth_x * vf_cellWidth_y ) / vf_stagCVWidth_z@[0, 0, 1]
    )

  [-1,  0,  0] => -( vf_cellWidth_y   * vf_cellWidth_z ) / vf_cellWidth_x  @[0, 0, 0]
  [ 1,  0,  0] => -( vf_cellWidth_y   * vf_cellWidth_z ) / vf_cellWidth_x  @[1, 0, 0]
  [ 0, -1,  0] => -( vf_stagCVWidth_x * vf_cellWidth_z ) / vf_stagCVWidth_y@[0, 0, 0]
  [ 0,  1,  0] => -( vf_stagCVWidth_x * vf_cellWidth_z ) / vf_stagCVWidth_y@[0, 1, 0]
  [ 0,  0, -1] => -( vf_stagCVWidth_x * vf_cellWidth_y ) / vf_stagCVWidth_z@[0, 0, 0]
  [ 0,  0,  1] => -( vf_stagCVWidth_x * vf_cellWidth_y ) / vf_stagCVWidth_z@[0, 0, 1]
}

Stencil A22@all{
  [ 0,  0,  0] => (
        ( vf_stagCVWidth_y * vf_cellWidth_z   ) / vf_stagCVWidth_x@[0, 0, 0]
      + ( vf_stagCVWidth_y * vf_cellWidth_z   ) / vf_stagCVWidth_x@[1, 0, 0]
      + ( vf_cellWidth_x   * vf_cellWidth_z   ) / vf_cellWidth_y  @[0, 0, 0]
      + ( vf_cellWidth_x   * vf_cellWidth_z   ) / vf_cellWidth_y  @[0, 1, 0]
      + ( vf_cellWidth_x   * vf_stagCVWidth_y ) / vf_stagCVWidth_z@[0, 0, 0]
      + ( vf_cellWidth_x   * vf_stagCVWidth_y ) / vf_stagCVWidth_z@[0, 0, 1]
    )

  [-1,  0,  0] => -( vf_stagCVWidth_y * vf_cellWidth_z   ) / vf_stagCVWidth_x@[0, 0, 0]
  [ 1,  0,  0] => -( vf_stagCVWidth_y * vf_cellWidth_z   ) / vf_stagCVWidth_x@[1, 0, 0]
  [ 0, -1,  0] => -( vf_cellWidth_x   * vf_cellWidth_z   ) / vf_cellWidth_y  @[0, 0, 0]
  [ 0,  1,  0] => -( vf_cellWidth_x   * vf_cellWidth_z   ) / vf_cellWidth_y  @[0, 1, 0]
  [ 0,  0, -1] => -( vf_cellWidth_x   * vf_stagCVWidth_y ) / vf_stagCVWidth_z@[0, 0, 0]
  [ 0,  0,  1] => -( vf_cellWidth_x   * vf_stagCVWidth_y ) / vf_stagCVWidth_z@[0, 0, 1]
}

Stencil A33@all{
  [ 0,  0,  0] => (
        ( vf_cellWidth_y * vf_stagCVWidth_z ) / vf_stagCVWidth_x@[0, 0, 0]
      + ( vf_cellWidth_y * vf_stagCVWidth_z ) / vf_stagCVWidth_x@[1, 0, 0]
      + ( vf_cellWidth_x * vf_stagCVWidth_z ) / vf_stagCVWidth_y@[0, 0, 0]
      + ( vf_cellWidth_x * vf_stagCVWidth_z ) / vf_stagCVWidth_y@[0, 1, 0]
      + ( vf_cellWidth_x * vf_cellWidth_y   ) / vf_cellWidth_z  @[0, 0, 0]
      + ( vf_cellWidth_x * vf_cellWidth_y   ) / vf_cellWidth_z  @[0, 0, 1]
    )

  [-1,  0,  0] => -( vf_cellWidth_y * vf_stagCVWidth_z ) / vf_stagCVWidth_x@[0, 0, 0]
  [ 1,  0,  0] => -( vf_cellWidth_y * vf_stagCVWidth_z ) / vf_stagCVWidth_x@[1, 0, 0]
  [ 0, -1,  0] => -( vf_cellWidth_x * vf_stagCVWidth_z ) / vf_stagCVWidth_y@[0, 0, 0]
  [ 0,  1,  0] => -( vf_cellWidth_x * vf_stagCVWidth_z ) / vf_stagCVWidth_y@[0, 1, 0]
  [ 0,  0, -1] => -( vf_cellWidth_x * vf_cellWidth_y   ) / vf_cellWidth_z  @[0, 0, 0]
  [ 0,  0,  1] => -( vf_cellWidth_x * vf_cellWidth_y   ) / vf_cellWidth_z  @[0, 0, 1]
}

Stencil B1@all{
  [ 0,  0,  0] =>  ( vf_cellWidth_y * vf_cellWidth_z )
  [-1,  0,  0] => -( vf_cellWidth_y * vf_cellWidth_z )
}

Stencil B2@all{
  [ 0,  0,  0] =>  ( vf_cellWidth_x * vf_cellWidth_z )
  [ 0, -1,  0] => -( vf_cellWidth_x * vf_cellWidth_z )
}

Stencil B3@all{
  [ 0,  0,  0] =>  ( vf_cellWidth_x * vf_cellWidth_y )
  [ 0,  0, -1] => -( vf_cellWidth_x * vf_cellWidth_y )
}

Stencil C1@all{
  [ 0,  0,  0] => -( vf_cellWidth_y * vf_cellWidth_z )
  [ 1,  0,  0] =>  ( vf_cellWidth_y * vf_cellWidth_z )
}

Stencil C2@all{
  [ 0,  0,  0] => -( vf_cellWidth_x * vf_cellWidth_z )
  [ 0,  1,  0] =>  ( vf_cellWidth_x * vf_cellWidth_z )
}

Stencil C3@all{
  [ 0,  0,  0] => -( vf_cellWidth_x * vf_cellWidth_y )
  [ 0,  0,  1] =>  ( vf_cellWidth_x * vf_cellWidth_y )
}

Stencil CellRestrictionForRes@all {
  [i0, i1, i2] from [2.0 * i0,       2.0 * i1,       2.0 * i2      ] with 1.0
  [i0, i1, i2] from [2.0 * i0,       2.0 * i1,       2.0 * i2 + 1.0] with 1.0
  [i0, i1, i2] from [2.0 * i0,       2.0 * i1 + 1.0, 2.0 * i2      ] with 1.0
  [i0, i1, i2] from [2.0 * i0,       2.0 * i1 + 1.0, 2.0 * i2 + 1.0] with 1.0
  [i0, i1, i2] from [2.0 * i0 + 1.0, 2.0 * i1,       2.0 * i2      ] with 1.0
  [i0, i1, i2] from [2.0 * i0 + 1.0, 2.0 * i1,       2.0 * i2 + 1.0] with 1.0
  [i0, i1, i2] from [2.0 * i0 + 1.0, 2.0 * i1 + 1.0, 2.0 * i2      ] with 1.0
  [i0, i1, i2] from [2.0 * i0 + 1.0, 2.0 * i1 + 1.0, 2.0 * i2 + 1.0] with 1.0
}

Stencil CellRestrictionForSol@all {
  [i0, i1, i2] from [2.0 * i0,       2.0 * i1,       2.0 * i2      ] with 0.125
  [i0, i1, i2] from [2.0 * i0,       2.0 * i1,       2.0 * i2 + 1.0] with 0.125
  [i0, i1, i2] from [2.0 * i0,       2.0 * i1 + 1.0, 2.0 * i2      ] with 0.125
  [i0, i1, i2] from [2.0 * i0,       2.0 * i1 + 1.0, 2.0 * i2 + 1.0] with 0.125
  [i0, i1, i2] from [2.0 * i0 + 1.0, 2.0 * i1,       2.0 * i2      ] with 0.125
  [i0, i1, i2] from [2.0 * i0 + 1.0, 2.0 * i1,       2.0 * i2 + 1.0] with 0.125
  [i0, i1, i2] from [2.0 * i0 + 1.0, 2.0 * i1 + 1.0, 2.0 * i2      ] with 0.125
  [i0, i1, i2] from [2.0 * i0 + 1.0, 2.0 * i1 + 1.0, 2.0 * i2 + 1.0] with 0.125
}

Stencil FaceXRestrictionForRes@all {
  [i0, i1, i2] from [2.0 * i0 - 1.0, 2.0 * i1,       2.0 * i2      ] with 0.5
  [i0, i1, i2] from [2.0 * i0 - 1.0, 2.0 * i1,       2.0 * i2 + 1.0] with 0.5
  [i0, i1, i2] from [2.0 * i0 - 1.0, 2.0 * i1 + 1.0, 2.0 * i2      ] with 0.5
  [i0, i1, i2] from [2.0 * i0 - 1.0, 2.0 * i1 + 1.0, 2.0 * i2 + 1.0] with 0.5
  [i0, i1, i2] from [2.0 * i0,       2.0 * i1,       2.0 * i2      ] with 1.0
  [i0, i1, i2] from [2.0 * i0,       2.0 * i1,       2.0 * i2 + 1.0] with 1.0
  [i0, i1, i2] from [2.0 * i0,       2.0 * i1 + 1.0, 2.0 * i2      ] with 1.0
  [i0, i1, i2] from [2.0 * i0,       2.0 * i1 + 1.0, 2.0 * i2 + 1.0] with 1.0
  [i0, i1, i2] from [2.0 * i0 + 1.0, 2.0 * i1,       2.0 * i2      ] with 0.5
  [i0, i1, i2] from [2.0 * i0 + 1.0, 2.0 * i1,       2.0 * i2 + 1.0] with 0.5
  [i0, i1, i2] from [2.0 * i0 + 1.0, 2.0 * i1 + 1.0, 2.0 * i2      ] with 0.5
  [i0, i1, i2] from [2.0 * i0 + 1.0, 2.0 * i1 + 1.0, 2.0 * i2 + 1.0] with 0.5
}

Stencil FaceXRestrictionForSol@all {
  [i0, i1, i2] from [2.0 * i0 - 1.0, 2.0 * i1,       2.0 * i2      ] with 0.0625
  [i0, i1, i2] from [2.0 * i0 - 1.0, 2.0 * i1,       2.0 * i2 + 1.0] with 0.0625
  [i0, i1, i2] from [2.0 * i0 - 1.0, 2.0 * i1 + 1.0, 2.0 * i2      ] with 0.0625
  [i0, i1, i2] from [2.0 * i0 - 1.0, 2.0 * i1 + 1.0, 2.0 * i2 + 1.0] with 0.0625
  [i0, i1, i2] from [2.0 * i0,       2.0 * i1,       2.0 * i2      ] with 0.125
  [i0, i1, i2] from [2.0 * i0,       2.0 * i1,       2.0 * i2 + 1.0] with 0.125
  [i0, i1, i2] from [2.0 * i0,       2.0 * i1 + 1.0, 2.0 * i2      ] with 0.125
  [i0, i1, i2] from [2.0 * i0,       2.0 * i1 + 1.0, 2.0 * i2 + 1.0] with 0.125
  [i0, i1, i2] from [2.0 * i0 + 1.0, 2.0 * i1,       2.0 * i2      ] with 0.0625
  [i0, i1, i2] from [2.0 * i0 + 1.0, 2.0 * i1,       2.0 * i2 + 1.0] with 0.0625
  [i0, i1, i2] from [2.0 * i0 + 1.0, 2.0 * i1 + 1.0, 2.0 * i2      ] with 0.0625
  [i0, i1, i2] from [2.0 * i0 + 1.0, 2.0 * i1 + 1.0, 2.0 * i2 + 1.0] with 0.0625
}

Stencil FaceYRestrictionForRes@all {
  [i0, i1, i2] from [2.0 * i0,       2.0 * i1 - 1.0, 2.0 * i2      ] with 0.5
  [i0, i1, i2] from [2.0 * i0,       2.0 * i1 - 1.0, 2.0 * i2 + 1.0] with 0.5
  [i0, i1, i2] from [2.0 * i0,       2.0 * i1,       2.0 * i2      ] with 1.0
  [i0, i1, i2] from [2.0 * i0,       2.0 * i1,       2.0 * i2 + 1.0] with 1.0
  [i0, i1, i2] from [2.0 * i0,       2.0 * i1 + 1.0, 2.0 * i2      ] with 0.5
  [i0, i1, i2] from [2.0 * i0,       2.0 * i1 + 1.0, 2.0 * i2 + 1.0] with 0.5
  [i0, i1, i2] from [2.0 * i0 + 1.0, 2.0 * i1 - 1.0, 2.0 * i2      ] with 0.5
  [i0, i1, i2] from [2.0 * i0 + 1.0, 2.0 * i1 - 1.0, 2.0 * i2 + 1.0] with 0.5
  [i0, i1, i2] from [2.0 * i0 + 1.0, 2.0 * i1,       2.0 * i2      ] with 1.0
  [i0, i1, i2] from [2.0 * i0 + 1.0, 2.0 * i1,       2.0 * i2 + 1.0] with 1.0
  [i0, i1, i2] from [2.0 * i0 + 1.0, 2.0 * i1 + 1.0, 2.0 * i2      ] with 0.5
  [i0, i1, i2] from [2.0 * i0 + 1.0, 2.0 * i1 + 1.0, 2.0 * i2 + 1.0] with 0.5
}

Stencil FaceYRestrictionForSol@all {
  [i0, i1, i2] from [2.0 * i0,       2.0 * i1 - 1.0, 2.0 * i2      ] with 0.0625
  [i0, i1, i2] from [2.0 * i0,       2.0 * i1 - 1.0, 2.0 * i2 + 1.0] with 0.0625
  [i0, i1, i2] from [2.0 * i0,       2.0 * i1,       2.0 * i2      ] with 0.125
  [i0, i1, i2] from [2.0 * i0,       2.0 * i1,       2.0 * i2 + 1.0] with 0.125
  [i0, i1, i2] from [2.0 * i0,       2.0 * i1 + 1.0, 2.0 * i2      ] with 0.0625
  [i0, i1, i2] from [2.0 * i0,       2.0 * i1 + 1.0, 2.0 * i2 + 1.0] with 0.0625
  [i0, i1, i2] from [2.0 * i0 + 1.0, 2.0 * i1 - 1.0, 2.0 * i2      ] with 0.0625
  [i0, i1, i2] from [2.0 * i0 + 1.0, 2.0 * i1 - 1.0, 2.0 * i2 + 1.0] with 0.0625
  [i0, i1, i2] from [2.0 * i0 + 1.0, 2.0 * i1,       2.0 * i2      ] with 0.125
  [i0, i1, i2] from [2.0 * i0 + 1.0, 2.0 * i1,       2.0 * i2 + 1.0] with 0.125
  [i0, i1, i2] from [2.0 * i0 + 1.0, 2.0 * i1 + 1.0, 2.0 * i2      ] with 0.0625
  [i0, i1, i2] from [2.0 * i0 + 1.0, 2.0 * i1 + 1.0, 2.0 * i2 + 1.0] with 0.0625
}

Stencil FaceZRestrictionForRes@all {
  [i0, i1, i2] from [2.0 * i0,       2.0 * i1,       2.0 * i2 - 1.0] with 0.5
  [i0, i1, i2] from [2.0 * i0,       2.0 * i1,       2.0 * i2      ] with 1.0
  [i0, i1, i2] from [2.0 * i0,       2.0 * i1,       2.0 * i2 + 1.0] with 0.5
  [i0, i1, i2] from [2.0 * i0,       2.0 * i1 + 1.0, 2.0 * i2 - 1.0] with 0.5
  [i0, i1, i2] from [2.0 * i0,       2.0 * i1 + 1.0, 2.0 * i2      ] with 1.0
  [i0, i1, i2] from [2.0 * i0,       2.0 * i1 + 1.0, 2.0 * i2 + 1.0] with 0.5
  [i0, i1, i2] from [2.0 * i0 + 1.0, 2.0 * i1,       2.0 * i2 - 1.0] with 0.5
  [i0, i1, i2] from [2.0 * i0 + 1.0, 2.0 * i1,       2.0 * i2      ] with 1.0
  [i0, i1, i2] from [2.0 * i0 + 1.0, 2.0 * i1,       2.0 * i2 + 1.0] with 0.5
  [i0, i1, i2] from [2.0 * i0 + 1.0, 2.0 * i1 + 1.0, 2.0 * i2 - 1.0] with 0.5
  [i0, i1, i2] from [2.0 * i0 + 1.0, 2.0 * i1 + 1.0, 2.0 * i2      ] with 1.0
  [i0, i1, i2] from [2.0 * i0 + 1.0, 2.0 * i1 + 1.0, 2.0 * i2 + 1.0] with 0.5
}

Stencil FaceZRestrictionForSol@all {
  [i0, i1, i2] from [2.0 * i0,       2.0 * i1,       2.0 * i2 - 1.0] with 0.0625
  [i0, i1, i2] from [2.0 * i0,       2.0 * i1,       2.0 * i2      ] with 0.125
  [i0, i1, i2] from [2.0 * i0,       2.0 * i1,       2.0 * i2 + 1.0] with 0.0625
  [i0, i1, i2] from [2.0 * i0,       2.0 * i1 + 1.0, 2.0 * i2 - 1.0] with 0.0625
  [i0, i1, i2] from [2.0 * i0,       2.0 * i1 + 1.0, 2.0 * i2      ] with 0.125
  [i0, i1, i2] from [2.0 * i0,       2.0 * i1 + 1.0, 2.0 * i2 + 1.0] with 0.0625
  [i0, i1, i2] from [2.0 * i0 + 1.0, 2.0 * i1,       2.0 * i2 - 1.0] with 0.0625
  [i0, i1, i2] from [2.0 * i0 + 1.0, 2.0 * i1,       2.0 * i2      ] with 0.125
  [i0, i1, i2] from [2.0 * i0 + 1.0, 2.0 * i1,       2.0 * i2 + 1.0] with 0.0625
  [i0, i1, i2] from [2.0 * i0 + 1.0, 2.0 * i1 + 1.0, 2.0 * i2 - 1.0] with 0.0625
  [i0, i1, i2] from [2.0 * i0 + 1.0, 2.0 * i1 + 1.0, 2.0 * i2      ] with 0.125
  [i0, i1, i2] from [2.0 * i0 + 1.0, 2.0 * i1 + 1.0, 2.0 * i2 + 1.0] with 0.0625
}

Stencil CellProlongation@all {
  [i0, i1, i2] from [0.5 *   i0,         0.5 *   i1,         0.5 *   i2        ] with 1
  [i0, i1, i2] from [0.5 *   i0,         0.5 *   i1,         0.5 * ( i2 - 1.0 )] with 1
  [i0, i1, i2] from [0.5 *   i0,         0.5 * ( i1 - 1.0 ), 0.5 *   i2        ] with 1
  [i0, i1, i2] from [0.5 *   i0,         0.5 * ( i1 - 1.0 ), 0.5 * ( i2 - 1.0 )] with 1
  [i0, i1, i2] from [0.5 * ( i0 - 1.0 ), 0.5 *   i1,         0.5 *   i2        ] with 1
  [i0, i1, i2] from [0.5 * ( i0 - 1.0 ), 0.5 *   i1,         0.5 * ( i2 - 1.0 )] with 1
  [i0, i1, i2] from [0.5 * ( i0 - 1.0 ), 0.5 * ( i1 - 1.0 ), 0.5 *   i2        ] with 1
  [i0, i1, i2] from [0.5 * ( i0 - 1.0 ), 0.5 * ( i1 - 1.0 ), 0.5 * ( i2 - 1.0 )] with 1
}

Stencil FaceXProlongation@all {
  [i0, i1, i2] from [0.5 * ( i0 + 1.0 ), 0.5 *   i1,         0.5 *   i2        ] with 0.5
  [i0, i1, i2] from [0.5 * ( i0 + 1.0 ), 0.5 *   i1,         0.5 * ( i2 - 1.0 )] with 0.5
  [i0, i1, i2] from [0.5 * ( i0 + 1.0 ), 0.5 * ( i1 - 1.0 ), 0.5 *   i2        ] with 0.5
  [i0, i1, i2] from [0.5 * ( i0 + 1.0 ), 0.5 * ( i1 - 1.0 ), 0.5 * ( i2 - 1.0 )] with 0.5
  [i0, i1, i2] from [0.5 *   i0,         0.5 *   i1,         0.5 *   i2        ] with 1
  [i0, i1, i2] from [0.5 *   i0,         0.5 *   i1,         0.5 * ( i2 - 1.0 )] with 1
  [i0, i1, i2] from [0.5 *   i0,         0.5 * ( i1 - 1.0 ), 0.5 *   i2        ] with 1
  [i0, i1, i2] from [0.5 *   i0,         0.5 * ( i1 - 1.0 ), 0.5 * ( i2 - 1.0 )] with 1
  [i0, i1, i2] from [0.5 * ( i0 - 1.0 ), 0.5 *   i1,         0.5 *   i2        ] with 0.5
  [i0, i1, i2] from [0.5 * ( i0 - 1.0 ), 0.5 *   i1,         0.5 * ( i2 - 1.0 )] with 0.5
  [i0, i1, i2] from [0.5 * ( i0 - 1.0 ), 0.5 * ( i1 - 1.0 ), 0.5 *   i2        ] with 0.5
  [i0, i1, i2] from [0.5 * ( i0 - 1.0 ), 0.5 * ( i1 - 1.0 ), 0.5 * ( i2 - 1.0 )] with 0.5
}

Stencil FaceYProlongation@all {
  [i0, i1, i2] from [0.5 *   i0,         0.5 * ( i1 + 1.0 ), 0.5 *   i2        ] with 0.5
  [i0, i1, i2] from [0.5 *   i0,         0.5 * ( i1 + 1.0 ), 0.5 * ( i2 - 1.0 )] with 0.5
  [i0, i1, i2] from [0.5 *   i0,         0.5 *   i1,         0.5 *   i2        ] with 1
  [i0, i1, i2] from [0.5 *   i0,         0.5 *   i1,         0.5 * ( i2 - 1.0 )] with 1
  [i0, i1, i2] from [0.5 *   i0,         0.5 * ( i1 - 1.0 ), 0.5 *   i2        ] with 0.5
  [i0, i1, i2] from [0.5 *   i0,         0.5 * ( i1 - 1.0 ), 0.5 * ( i2 - 1.0 )] with 0.5
  [i0, i1, i2] from [0.5 * ( i0 - 1.0 ), 0.5 * ( i1 + 1.0 ), 0.5 *   i2        ] with 0.5
  [i0, i1, i2] from [0.5 * ( i0 - 1.0 ), 0.5 * ( i1 + 1.0 ), 0.5 * ( i2 - 1.0 )] with 0.5
  [i0, i1, i2] from [0.5 * ( i0 - 1.0 ), 0.5 *   i1,         0.5 *   i2        ] with 1
  [i0, i1, i2] from [0.5 * ( i0 - 1.0 ), 0.5 *   i1,         0.5 * ( i2 - 1.0 )] with 1
  [i0, i1, i2] from [0.5 * ( i0 - 1.0 ), 0.5 * ( i1 - 1.0 ), 0.5 *   i2        ] with 0.5
  [i0, i1, i2] from [0.5 * ( i0 - 1.0 ), 0.5 * ( i1 - 1.0 ), 0.5 * ( i2 - 1.0 )] with 0.5
}

Stencil FaceZProlongation@all {
  [i0, i1, i2] from [0.5 *   i0,         0.5 *   i1,         0.5 * ( i2 + 1.0 )] with 0.5
  [i0, i1, i2] from [0.5 *   i0,         0.5 *   i1,         0.5 *   i2        ] with 1
  [i0, i1, i2] from [0.5 *   i0,         0.5 *   i1,         0.5 * ( i2 - 1.0 )] with 0.5
  [i0, i1, i2] from [0.5 *   i0,         0.5 * ( i1 - 1.0 ), 0.5 * ( i2 + 1.0 )] with 0.5
  [i0, i1, i2] from [0.5 *   i0,         0.5 * ( i1 - 1.0 ), 0.5 *   i2        ] with 1
  [i0, i1, i2] from [0.5 *   i0,         0.5 * ( i1 - 1.0 ), 0.5 * ( i2 - 1.0 )] with 0.5
  [i0, i1, i2] from [0.5 * ( i0 - 1.0 ), 0.5 *   i1,         0.5 * ( i2 + 1.0 )] with 0.5
  [i0, i1, i2] from [0.5 * ( i0 - 1.0 ), 0.5 *   i1,         0.5 *   i2        ] with 1
  [i0, i1, i2] from [0.5 * ( i0 - 1.0 ), 0.5 *   i1,         0.5 * ( i2 - 1.0 )] with 0.5
  [i0, i1, i2] from [0.5 * ( i0 - 1.0 ), 0.5 * ( i1 - 1.0 ), 0.5 * ( i2 + 1.0 )] with 0.5
  [i0, i1, i2] from [0.5 * ( i0 - 1.0 ), 0.5 * ( i1 - 1.0 ), 0.5 *   i2        ] with 1
  [i0, i1, i2] from [0.5 * ( i0 - 1.0 ), 0.5 * ( i1 - 1.0 ), 0.5 * ( i2 - 1.0 )] with 0.5
}

// stencil field declarations

// functions

Function ResNorm@(coarsest and finest) : Real {
  Var norm : Real = 0.0

  Var reductionVar_0 : Real = 0.0
  loop over residual_u with reduction ( + : reductionVar_0 ) {
    reductionVar_0 += residual_u * residual_u
  }
  norm += reductionVar_0

  Var reductionVar_1 : Real = 0.0
  loop over residual_v with reduction ( + : reductionVar_1 ) {
    reductionVar_1 += residual_v * residual_v
  }
  norm += reductionVar_1

  Var reductionVar_2 : Real = 0.0
  loop over residual_w with reduction ( + : reductionVar_2 ) {
    reductionVar_2 += residual_w * residual_w
  }
  norm += reductionVar_2

  Var reductionVar_3 : Real = 0.0
  loop over residual_p with reduction ( + : reductionVar_3 ) {
    reductionVar_3 += residual_p * residual_p
  }
  norm += reductionVar_3

  return sqrt ( norm )
}

// u = sin ( 2.0 * PI * x ) - cos (       PI * z )
// v = cos (       PI * x ) - sin ( 2.0 * PI * y )
// w = sin ( 2.0 * PI * z ) - cos (       PI * y )
// p = sin ( 4.0 * PI * x ) + sin ( 4.0 * PI * y ) + sin ( 4.0 * PI * z )
// rhs_u = 4.0 * PI**2 * sin ( 2.0 * PI * x ) -       PI**2 * cos (       PI * z ) + 4.0 * PI * cos ( 4.0 * PI * x )
// rhs_v =       PI**2 * cos (       PI * x ) - 4.0 * PI**2 * sin ( 2.0 * PI * y ) + 4.0 * PI * cos ( 4.0 * PI * y )
// rhs_w = 2.0 * PI**2 * sin ( 2.0 * PI * z ) -       PI**2 * cos (       PI * y ) + 4.0 * PI * cos ( 4.0 * PI * z )
// rhs_p = 2.0 * PI    * cos ( 2.0 * PI * x ) - 2.0 * PI    * cos ( 2.0 * PI * y ) + 2.0 * PI * cos ( 2.0 * PI * z )

Function PrintError@finest {
  NormalizePressure@finest ( )
  
  Var norm_u : Real = 0.0
  loop over u with reduction ( max : norm_u ) {
    norm_u = max ( norm_u, fabs ( u - ( sin ( 2.0 * PI * vf_nodePosition_x ) - cos (       PI * vf_cellCenter_z   ) ) ) )
  }
  Var norm_v : Real = 0.0
  loop over v with reduction ( max : norm_v ) {
    norm_v = max ( norm_v, fabs ( v - ( cos (       PI * vf_cellCenter_x   ) - sin ( 2.0 * PI * vf_nodePosition_y ) ) ) )
  }
  Var norm_w : Real = 0.0
  loop over v with reduction ( max : norm_w ) {
    norm_w = max ( norm_w, fabs ( v - ( sin ( 2.0 * PI * vf_nodePosition_z ) - cos (       PI * vf_cellCenter_y   ) ) ) )
  }
  Var norm_p : Real = 0.0
  loop over p with reduction ( max : norm_p ) {
    norm_p = max ( norm_p, fabs ( p - ( sin ( 4.0 * PI * vf_cellCenter_x   ) + sin ( 4.0 * PI * vf_cellCenter_y   )  + sin ( 4.0 * PI * vf_cellCenter_z   ) ) ) )
  }

  if ( getKnowledge ( 'testing_enabled' ) ) {
    if ( getKnowledge ( 'testing_printErr' ) ) { 
      printWithReducedPrec ( norm_u )
      printWithReducedPrec ( norm_v )
      printWithReducedPrec ( norm_w )
      printWithReducedPrec ( norm_p )
    }
  } else {
    print ( "The maximum error (u,v,w,p) is", norm_u, norm_v, norm_w, norm_p )
  }
}

Function NormalizePressure@finest {
  // normalize pressure around the exact solution

	Expr numCells_x = ( 2 ** levels@current ( ) ) * getKnowledge ( 'domain_fragmentLength_x' ) * getKnowledge ( 'domain_rect_numBlocks_x' ) * getKnowledge ( 'domain_rect_numFragsPerBlock_x' )
	Expr numCells_y = ( 2 ** levels@current ( ) ) * getKnowledge ( 'domain_fragmentLength_y' ) * getKnowledge ( 'domain_rect_numBlocks_y' ) * getKnowledge ( 'domain_rect_numFragsPerBlock_y' )
	Expr numCells_z = ( 2 ** levels@current ( ) ) * getKnowledge ( 'domain_fragmentLength_z' ) * getKnowledge ( 'domain_rect_numBlocks_z' ) * getKnowledge ( 'domain_rect_numFragsPerBlock_z' )
	Expr numCells = numCells_x * numCells_y * numCells_z

  Var meanP : Real = 0.0
  loop over p with reduction ( + : meanP ) {
    meanP += p
  }
  meanP /= numCells
  loop over p {
    p -= meanP
  }
  apply bc to p
}

Function UpdateRes@all {
  communicate all of u
  communicate all of v
  communicate all of w
  communicate all of p

  loop over residual_u {
    residual_u = rhs_u - ( A11 * u + B1 * p )
  }
  apply bc to residual_u

  loop over residual_v {
    residual_v = rhs_v - ( A22 * v + B2 * p )
  }
  apply bc to residual_v

  loop over residual_w {
    residual_w = rhs_w - ( B3 * p + A33 * w )
  }
  apply bc to residual_w

  loop over residual_p {
    residual_p = rhs_p - ( C1 * u + C2 * v + C3 * w )
  }
  apply bc to residual_p
}

Function Solve@finest {
  UpdateRes ( )

  Var initRes : Real = ResNorm (  )
  Var curRes : Real = initRes
  Var prevRes : Real = curRes

  print ( "Starting residual: ", initRes )

  Var curIt : Integer = 0
  repeat until curIt >= 30 or curRes <= 1.0E-12 * initRes or curRes <= 1.0E-12 {
    curIt += 1
    mgCycle (  )

    UpdateRes ( )

    prevRes = curRes
    curRes = ResNorm (  )

    print ( "Residual after", curIt, "iterations is", curRes, "--- convergence factor is", curRes / prevRes )
    PrintError@finest ( )
  }
}

Function mgCycle@coarsest {
  UpdateRes ( )

  Var curRes  : Real = ResNorm ( )
  Var initRes : Real = curRes

  loop over resHat_u {
    resHat_u = residual_u
  }
  loop over resHat_v {
    resHat_v = residual_v
  }
  loop over resHat_w {
    resHat_w = residual_w
  }
  loop over resHat_p {
    resHat_p = residual_p
  }

  Var rho    : Real = 1.0
  Var rhoOld : Real = 1.0
  Var alpha  : Real = 1.0
  Var beta   : Real = 1.0
  Var omega  : Real = 1.0

  loop over nu_u {
    nu_u = 0.0
  }
  loop over nu_v {
    nu_v = 0.0
  }
  loop over nu_w {
    nu_w = 0.0
  }
  loop over nu_p {
    nu_p = 0.0
  }

  loop over p_u {
    p_u = 0.0
  }
  apply bc to p_u
  loop over p_v {
    p_v = 0.0
  }
  apply bc to p_v
  loop over p_w {
    p_w = 0.0
  }
  apply bc to p_w
  loop over p_p {
    p_p = 0.0
  }
  apply bc to p_p

  Var curStep : Integer = 0
  repeat 128 times count curStep {
    rhoOld = rho
    rho = 0.0

    Var reductionVar_8 : Real = 0.0
    loop over resHat_u with reduction ( + : reductionVar_8 ) {
      reductionVar_8 += resHat_u * residual_u
    }
    rho += reductionVar_8

    Var reductionVar_9 : Real = 0.0
    loop over resHat_v with reduction ( + : reductionVar_9 ) {
      reductionVar_9 += resHat_v * residual_v
    }
    rho += reductionVar_9

    Var reductionVar_10 : Real = 0.0
    loop over resHat_w with reduction ( + : reductionVar_10 ) {
      reductionVar_10 += resHat_w * residual_w
    }
    rho += reductionVar_10

    Var reductionVar_11 : Real = 0.0
    loop over resHat_p with reduction ( + : reductionVar_11 ) {
      reductionVar_11 += resHat_p * residual_p
    }
    rho += reductionVar_11

    beta = ( rho / rhoOld ) * ( alpha / omega )

    loop over p_u {
      p_u = residual_u + beta * ( p_u - omega * nu_u )
    }
    apply bc to p_u
    loop over p_v {
      p_v = residual_v + beta * ( p_v - omega * nu_v )
    }
    apply bc to p_v
    loop over p_w {
      p_w = residual_w + beta * ( p_w - omega * nu_w )
    }
    apply bc to p_w
    loop over p_p {
      p_p = residual_p + beta * ( p_p - omega * nu_p )
    }
    apply bc to p_p

    communicate all of p_u
    communicate all of p_v
    communicate all of p_w
    communicate all of p_p

    loop over nu_u {
      nu_u = A11 * p_u + B1 * p_p
    }
    loop over nu_v {
      nu_v = A22 * p_v + B2 * p_p
    }
    loop over nu_w {
      nu_w = A33 * p_w + B3 * p_p
    }
    loop over nu_p {
      nu_p = C1 * p_u + C2 * p_v + C3 * p_w
    }

    Var alphaDenom : Real = 0.0

    Var reductionVar_12 : Real = 0.0
    loop over resHat_u with reduction ( + : reductionVar_12 ) {
      reductionVar_12 += resHat_u * nu_u
    }
    alphaDenom += reductionVar_12

    Var reductionVar_13 : Real = 0.0
    loop over resHat_v with reduction ( + : reductionVar_13 ) {
      reductionVar_13 += resHat_v * nu_v
    }
    alphaDenom += reductionVar_13

    Var reductionVar_14 : Real = 0.0
    loop over resHat_w with reduction ( + : reductionVar_14 ) {
      reductionVar_14 += resHat_w * nu_w
    }
    alphaDenom += reductionVar_14

    Var reductionVar_15 : Real = 0.0
    loop over resHat_p with reduction ( + : reductionVar_15 ) {
      reductionVar_15 += resHat_p * nu_p
    }
    alphaDenom += reductionVar_15

    alpha = rho / alphaDenom

    loop over h_u {
      h_u = u + alpha * p_u
    }
    loop over h_v {
      h_v = v + alpha * p_v
    }
    loop over h_w {
      h_w = w + alpha * p_w
    }
    loop over h_p {
      h_p = p + alpha * p_p
    }

    loop over s_u {
      s_u = residual_u - alpha * nu_u
    }
    apply bc to s_u
    loop over s_v {
      s_v = residual_v - alpha * nu_v
    }
    apply bc to s_v
    loop over s_w {
      s_w = residual_w - alpha * nu_w
    }
    apply bc to s_w
    loop over s_p {
      s_p = residual_p - alpha * nu_p
    }
    apply bc to s_p

    communicate all of s_u
    communicate all of s_v
    communicate all of s_w
    communicate all of s_p

    loop over t_u {
      t_u = A11 * s_u + B1 * s_p
    }
    loop over t_v {
      t_v = A22 * s_v + B2 * s_p
    }
    loop over t_w {
      t_w = A33 * s_w + B3 * s_p
    }
    loop over t_p {
      t_p = C1 * s_u + C2 * s_v + C3 * s_w
    }

    Var omegaNom : Real = 0.0
    Var omegaDenom : Real = 0.0

    Var reductionVar_16 : Real = 0.0
    loop over t_u with reduction ( + : reductionVar_16 ) {
      reductionVar_16 += t_u * s_u
    }
    omegaNom += reductionVar_16

    Var reductionVar_17 : Real = 0.0
    loop over t_u with reduction ( + : reductionVar_17 ) {
      reductionVar_17 += t_u * t_u
    }
    omegaDenom += reductionVar_17

    Var reductionVar_18 : Real = 0.0
    loop over t_v with reduction ( + : reductionVar_18 ) {
      reductionVar_18 += t_v * s_v
    }
    omegaNom += reductionVar_18

    Var reductionVar_19 : Real = 0.0
    loop over t_v with reduction ( + : reductionVar_19 ) {
      reductionVar_19 += t_v * t_v
    }
    omegaDenom += reductionVar_19

    Var reductionVar_20 : Real = 0.0
    loop over t_w with reduction ( + : reductionVar_20 ) {
      reductionVar_20 += t_w * s_w
    }
    omegaNom += reductionVar_20

    Var reductionVar_21 : Real = 0.0
    loop over t_w with reduction ( + : reductionVar_21 ) {
      reductionVar_21 += t_w * t_w
    }
    omegaDenom += reductionVar_21

    Var reductionVar_22 : Real = 0.0
    loop over t_p with reduction ( + : reductionVar_22 ) {
      reductionVar_22 += t_p * s_p
    }
    omegaNom += reductionVar_22

    Var reductionVar_23 : Real = 0.0
    loop over t_p with reduction ( + : reductionVar_23 ) {
      reductionVar_23 += t_p * t_p
    }
    omegaDenom += reductionVar_23

    omega = omegaNom / omegaDenom

    loop over u {
      u = h_u + omega * s_u
    }
    apply bc to u
    loop over v {
      v = h_v + omega * s_v
    }
    apply bc to v
    loop over w {
      w = h_w + omega * s_w
    }
    apply bc to w
    loop over p {
      p = h_p + omega * s_p
    }
    apply bc to p

    loop over residual_u {
      residual_u = s_u - omega * t_u
    }
    apply bc to residual_u
    loop over residual_v {
      residual_v = s_v - omega * t_v
    }
    apply bc to residual_v
    loop over residual_w {
      residual_w = s_w - omega * t_w
    }
    apply bc to residual_w
    loop over residual_p {
      residual_p = s_p - omega * t_p
    }
    apply bc to residual_p

    curRes = ResNorm ( )

    if ( curRes <= 0.001 * initRes ) {
      return
    }
  }

  print ( "Maximum number of cgs iterations (", 128, ") was exceeded" )
}

Function mgCycle@(all but coarsest) {
  repeat 4 times {
    color with {
      ( i0 + i1 + i2 ) % 2,
      communicate all of u
      communicate all of v
      communicate all of w
      communicate all of p
      loop over p {
        solve locally relax 0.8 {
          u@[0, 0, 0] => A11@[0, 0, 0] * u@[0, 0, 0] + B1@[0, 0, 0] * p@[0, 0, 0] == rhs_u@[0, 0, 0]
          u@[1, 0, 0] => A11@[1, 0, 0] * u@[1, 0, 0] + B1@[1, 0, 0] * p@[1, 0, 0] == rhs_u@[1, 0, 0]
          v@[0, 0, 0] => A22@[0, 0, 0] * v@[0, 0, 0] + B2@[0, 0, 0] * p@[0, 0, 0] == rhs_v@[0, 0, 0]
          v@[0, 1, 0] => A22@[0, 1, 0] * v@[0, 1, 0] + B2@[0, 1, 0] * p@[0, 1, 0] == rhs_v@[0, 1, 0]
          w@[0, 0, 0] => A33@[0, 0, 0] * w@[0, 0, 0] + B3@[0, 0, 0] * p@[0, 0, 0] == rhs_w@[0, 0, 0]
          w@[0, 0, 1] => A33@[0, 0, 1] * w@[0, 0, 1] + B3@[0, 0, 1] * p@[0, 0, 1] == rhs_w@[0, 0, 1]

          p@[0, 0, 0] => C2@[0, 0, 0] * v@[0, 0, 0] + C1@[0, 0, 0] * u@[0, 0, 0] + C3@[0, 0, 0] * w@[0, 0, 0] == rhs_p@[0, 0, 0]
        }
      }
      apply bc to u
      apply bc to v
      apply bc to w
      apply bc to p
    }
  }

  UpdateRes ( )

  communicate all of residual_u
  loop over rhs_u@coarser {
    rhs_u@coarser = FaceXRestrictionForRes * residual_u
  }

  communicate all of residual_v
  loop over rhs_v@coarser {
    rhs_v@coarser = FaceYRestrictionForRes * residual_v
  }

  communicate all of residual_w
  loop over rhs_w@coarser {
    rhs_w@coarser = FaceZRestrictionForRes * residual_w
  }

  communicate all of residual_p
  loop over rhs_p@coarser {
    rhs_p@coarser = CellRestrictionForRes * residual_p
  }

  loop over u@coarser {
    u@coarser = 0.0
  }
  apply bc to u@coarser
  loop over v@coarser {
    v@coarser = 0.0
  }
  apply bc to v@coarser
  loop over w@coarser {
    w@coarser = 0.0
  }
  apply bc to w@coarser
  loop over p@coarser {
    p@coarser = 0.0
  }
  apply bc to p@coarser

  mgCycle@coarser (  )

  communicate all of u@coarser
  loop over u {
    u += FaceXProlongation@coarser * u@coarser
  }
  apply bc to u

  communicate all of v@coarser
  loop over v {
    v += FaceYProlongation@coarser * v@coarser
  }
  apply bc to v

  communicate all of w@coarser
  loop over w {
    w += FaceZProlongation@coarser * w@coarser
  }
  apply bc to w

  loop over p {
    p += CellProlongation@coarser * p@coarser
  }
  apply bc to p

  repeat 4 times {
    color with {
      ( i0 + i1 + i2 ) % 2,
      communicate all of u
      communicate all of v
      communicate all of w
      communicate all of p
      loop over p {
        solve locally relax 0.8 {
          u@[0, 0, 0] => A11@[0, 0, 0] * u@[0, 0, 0] + B1@[0, 0, 0] * p@[0, 0, 0] == rhs_u@[0, 0, 0]
          u@[1, 0, 0] => A11@[1, 0, 0] * u@[1, 0, 0] + B1@[1, 0, 0] * p@[1, 0, 0] == rhs_u@[1, 0, 0]
          v@[0, 0, 0] => A22@[0, 0, 0] * v@[0, 0, 0] + B2@[0, 0, 0] * p@[0, 0, 0] == rhs_v@[0, 0, 0]
          v@[0, 1, 0] => A22@[0, 1, 0] * v@[0, 1, 0] + B2@[0, 1, 0] * p@[0, 1, 0] == rhs_v@[0, 1, 0]
          w@[0, 0, 0] => A33@[0, 0, 0] * w@[0, 0, 0] + B3@[0, 0, 0] * p@[0, 0, 0] == rhs_w@[0, 0, 0]
          w@[0, 0, 1] => A33@[0, 0, 1] * w@[0, 0, 1] + B3@[0, 0, 1] * p@[0, 0, 1] == rhs_w@[0, 0, 1]

          p@[0, 0, 0] => C2@[0, 0, 0] * v@[0, 0, 0] + C1@[0, 0, 0] * u@[0, 0, 0] + C3@[0, 0, 0] * w@[0, 0, 0] == rhs_p@[0, 0, 0]
        }
      }
      apply bc to u
      apply bc to v
      apply bc to w
      apply bc to p
    }
  }
}

Function InitFields@finest {
  loop over rhs_p {
    rhs_p = vf_cellVolume      * ( 2.0 * PI    * cos ( 2.0 * PI * vf_cellCenter_x   ) - 2.0 * PI    * cos ( 2.0 * PI * vf_cellCenter_y   ) + 2.0 * PI * cos ( 2.0 * PI * vf_cellCenter_z   ) )
  }
  loop over rhs_u {
    rhs_u = vf_xStagCellVolume * ( 4.0 * PI**2 * sin ( 2.0 * PI * vf_nodePosition_x ) -       PI**2 * cos (       PI * vf_cellCenter_z   ) + 4.0 * PI * cos ( 4.0 * PI * vf_nodePosition_x ) )
  }
  loop over rhs_v {
    rhs_v = vf_yStagCellVolume * (       PI**2 * cos (       PI * vf_cellCenter_x   ) - 4.0 * PI**2 * sin ( 2.0 * PI * vf_nodePosition_y ) + 4.0 * PI * cos ( 4.0 * PI * vf_nodePosition_y ) )
  }
  loop over rhs_w {
    rhs_w = vf_zStagCellVolume * ( 4.0 * PI**2 * sin ( 2.0 * PI * vf_nodePosition_z ) -       PI**2 * cos (       PI * vf_cellCenter_y   ) + 4.0 * PI * cos ( 4.0 * PI * vf_nodePosition_z ) )
  }
}

Function Application {
  // init
  startTimer ( "setup" )
  initGlobals ( )
  initDomain ( )
  initFieldsWithZero ( )
  initGeometry ( )

  InitFields@finest ( )

  apply bc to u@finest
  apply bc to v@finest
  apply bc to w@finest
  apply bc to p@finest
  stopTimer ( "setup" )

  // solve
  startTimer ( "solve" )
  Solve@finest ( )
  stopTimer ( "solve" )

  // de-init
  printAllTimers ( )
  destroyGlobals ( )
}
