
Domain global< [ 0, 0 ] to [ 0.1, 0.1 ] >

Globals {
	
}

/// main function

Function Application ( ) : Unit {

//////////////////////////////////// INPUT MATRICES ////////////////////////////////////
Var sr_3x3 : Matrix<Double,3 ,3> = {
{
0.6400925116697155, 0.0, 0.2627888149257168 },
{
0.0, 0.3311055892995445, 0.45419973970469507 },
{
0.26312033353122866, 0.9068718332411839, 0.8141321048316564 }
}
Var sr_4x4 : Matrix<Double, 4, 4> = 
{
{
0.9189462067528664, 0.0, 0.0, 0.14424947157081902 },
{
0.0, 0.19381819445086879, 0.0, 0.6851943895516579 },
{
0.0, 0.0, 0.4481600388228697, 0.9110750747894159 },
{
0.23206385242743388, 0.06810379672065581, 0.7098700426109092, 0.2241280094046907 }
}

Var sr_4x4_2 : Matrix<Double, 4, 4> = 
{
{
0.3835926411670303, 0.0, 0.9339546665420072, 0.4142167290773838 },
{
0.0, 0.9168675160624042, 0.0977225779661407, 0.44990598003814175 },
{
0.7343345893365987, 0.22665890721501591, 0.3660074126518361, 0.33601577676803285 },
{
0.7341503760053119, 0.4419963527898749, 0.6153402691555747, 0.08984652402124749 }
}
Var sr_5x5_2 : Matrix<Double, 5, 5>
sr_5x5_2 = 
{
{
0.20922803231795384, 0.0, 0.0, 0.7438014740835229, 0.32202787321184356 },
{
0.0, 0.9828054341747103, 0.0, 0.13414948789727332, 0.9141753908613758 },
{
0.0, 0.0, 0.4304168298493969, 0.9428799830308159, 0.46006752178886834 },
{
0.890827843111702, 0.7144627972560549, 0.5968170704088582, 0.5550700235891494, 0.17651764654898727 },
{
0.984882406339192, 0.6158917062857, 0.3140827830266386, 0.3741573543429165, 0.7699110400404342 }
}
		Var sr_5x5_2x2 : Matrix<Double, 5, 5> 
sr_5x5_2x2 = 
{
{
0.3065711388809941, 0.47137998188105257, 0.0, 0.0, 0.27101525004140226 },
{
0.9641405435868464, 0.7570183996539743, 0.0, 0.0, 0.22688067181901583 },
{
0.0, 0.0, 0.4238504932167587, 0.7706625419140906, 0.36918811028005805 },
{
0.0, 0.0, 0.9699751992306563, 0.5182492791978986, 0.5543392014863642 },
{
0.5810515353357922, 0.4249682573618744, 0.5685973309890656, 0.23203626116460163, 0.23632256878020275 }
}
Var sr_5x5 : Matrix<Double, 5, 5>
sr_5x5 = 
{
{
0.036479705501443305, 0.0, 0.0, 0.0, 0.39785927501956997 },
{
0.0, 0.9063755860263423, 0.0, 0.0, 0.9932780577994703 },
{
0.0, 0.0, 0.43420119793273837, 0.0, 0.04331737967455629 },
{
0.0, 0.0, 0.0, 0.32905992848225996, 0.5637163327321368 },
{
0.39172489089088736, 0.7685230137536988, 0.0495691711173496, 0.988586141132244, 0.6454136246005879 }
}
Var sr_6x6_2 : Matrix<Double, 6, 6>
 sr_6x6_2 = 
{
{
0.4308041115615385, 0.0, 0.0, 0.0, 0.8999564284249749, 0.6837897396692416 },
{
0.0, 0.8812852425957229, 0.0, 0.0, 0.018251299316581204, 0.7963338734697352 },
{
0.0, 0.0, 0.12561706821056484, 0.0, 0.7315567552359123, 0.8393091506827227 },
{
0.0, 0.0, 0.0, 0.3045573769649935, 0.7494226805172914, 0.3901561717614719 },
{
0.09443637001809557, 0.24759367636005358, 0.5590423057983972, 0.4580226611297431, 0.39490613781157813, 0.46017463986981166 },
{
0.2849284322539548, 0.37345509963907175, 0.39305418787054613, 0.2818911331023648, 0.4850056092514827, 0.8212141245175105 }
}
Var sr_6x6_2x2_2 : Matrix<Double, 6, 6>
sr_6x6_2x2_2 = 
{
{
0.4479253046624946, 0.44337619189009825, 0.0, 0.0, 0.053482387963277755, 0.940776293093027 },
{
0.607000796462533, 0.7794432081043519, 0.0, 0.0, 0.08198975860810576, 0.46386458882357673 },
{
0.0, 0.0, 0.18780305127426666, 0.10036475923495447, 0.7341425355481338, 0.254378449973344 },
{
0.0, 0.0, 0.2267014915591452, 0.42750475463053483, 0.7144449059831273, 0.11509217161981933 },
{
0.41602762347826694, 0.8119258112306077, 0.9980766819136695, 0.48849248169126636, 0.7609070491933756, 0.5700630864044539 },
{
0.008354404234215629, 0.7495444583746197, 0.7437668821814407, 0.6636320381133511, 0.2871346951266073, 0.9091834523655659 }
}
Var sr_6x6 : Matrix<Double, 6, 6>
sr_6x6 = 
{
{
0.25974734847967285, 0.0, 0.0, 0.0, 0.0, 0.9073117603571845 },
{
0.0, 0.216858548442325, 0.0, 0.0, 0.0, 0.9156455109972113 },
{
0.0, 0.0, 0.24770172250332412, 0.0, 0.0, 0.7016820829956404 },
{
0.0, 0.0, 0.0, 0.23252018928102636, 0.0, 0.9474533689881167 },
{
0.0, 0.0, 0.0, 0.0, 0.5106601285017516, 0.372184929637312 },
{
0.6368569242587503, 0.2641081649064907, 0.8838497770378833, 0.32896979849915453, 0.5653157241542246, 0.062134307772364394 }
}
	Var sr_7x7 : Matrix<Double, 7, 7>
sr_7x7 = {
{
0.48177931738600377, 0.0, 0.0, 0.0, 0.0, 0.0, 0.3305098868484484 },
{
0.0, 0.535298746906977, 0.0, 0.0, 0.0, 0.0, 0.46634940303980466 },
{
0.0, 0.0, 0.64701464125667, 0.0, 0.0, 0.0, 0.2637415765143547 },
{
0.0, 0.0, 0.0, 0.7936528202120418, 0.0, 0.0, 0.3820966918188752 },
{
0.0, 0.0, 0.0, 0.0, 0.8757686520208419, 0.0, 0.17249147221861794 },
{
0.0, 0.0, 0.0, 0.0, 0.0, 0.7441457340530452, 0.27912549254250074 },
{
0.6867841748082819, 0.07866213728049898, 0.0682765555041277, 0.5478917299689156, 0.9470913208812639, 0.6719520851383362, 0.29147773218536277 }
}

	Var sr_7x7_2x2 : Matrix<Double, 7, 7> 
sr_7x7_2x2= {
{
0.9742630108992758, 0.3896554607515246, 0.0, 0.0, 0.0, 0.0, 0.708954859056676 },
{
0.8583069197822313, 0.7676145486923681, 0.0, 0.0, 0.0, 0.0, 0.9405765182427863 },
{
0.0, 0.0, 0.4231598245552223, 0.22032122959294598, 0.0, 0.0, 0.27323113403368504 },
{
0.0, 0.0, 0.4527148190745256, 0.3855320368656294, 0.0, 0.0, 0.09573287149820575 },
{
0.0, 0.0, 0.0, 0.0, 0.15334020878784893, 0.41271887996881607, 0.444462690402153 },
{
0.0, 0.0, 0.0, 0.0, 0.5877125733945704, 0.5826512586683583, 0.6007961377406694 },
{
0.22708145374963717, 0.5852080381806556, 0.8554674537777677, 0.05194934011368724, 0.7917809687783385, 0.563884109154678, 0.47250277531700513 }
}

	Var sr_7x7_3x3 : Matrix<Double, 7, 7> 
sr_7x7_3x3 = {
{
0.3843630289035599, 0.4915294798284574, 0.7623261181371592, 0.0, 0.0, 0.0, 0.7140146739569658 },
{
0.6997700678516312, 0.08735769812800553, 0.24817111246735457, 0.0, 0.0, 0.0, 0.34964003141561706 },
{
0.8199931835979417, 0.43118491743535303, 0.33762760238607237, 0.0, 0.0, 0.0, 0.9114744401564968 },
{
0.0, 0.0, 0.0, 0.11977043391578779, 0.9019761086464256, 0.720191605842611, 0.4274591831694112 },
{
0.0, 0.0, 0.0, 0.8462735680801696, 0.467686348337929, 0.16452186424256943, 0.6024134322078065 },
{
0.0, 0.0, 0.0, 0.9601878354627101, 0.3953744648848335, 0.1127632471466149, 0.3992208459821467 },
{
0.35072052442201196, 0.5282457961336021, 0.1415072455759373, 0.9180149861344622, 0.49781908899184035, 0.3814848934596793, 0.09925782317401588 }
}

Var sr_7x7_3x3_sol : Matrix<Double, 7, 7> = {
{
-0.44251188295462507, 3.4920926417777554, -2.277334451970893, -1.4672974963400827, 8.792685957617806, -9.185301556789492, 1.6931487860448464 },
{
0.354596528871404, 4.882347019453769, -7.153359535531008, -5.715012927928639, 34.24684772129919, -35.77605582706465, 6.594686643498666 },
{
1.6698406027319286, 0.3017682308042893, -0.5443911841105504, 1.0046743182278792, -6.020446291154899, 6.28927439888856, -1.1593171163455072 },
{
-0.42026994930001377, -6.022789884151374, 7.287847797398044, 4.400785555942673, -30.34436303836717, 31.598250481511496, -4.561698244046173 },
{
2.064339568448059, 29.583565256118057, -35.797450191367574, -21.691929751959936, 141.0125592996136, -143.00004646430503, 22.406774979246038 },
{
-2.285106003901732, -32.7473171646833, 39.62573290118352, 25.65661147146925, -158.57218359629132, 160.27289941667308, -24.803020208367677 },
{
-0.388188862813247, -5.563043372446455, 6.731533752389279, 3.651441439176834, -21.88102818099033, 22.858071263295475, -4.213483397523069 }
}

Var sr_9x9 : Matrix<Double, 9, 9> 
sr_9x9= {
{
0.3377520796976302, 0.35585197819364833, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.744967599147689 },
{
0.2814043872357592, 0.9182363426428696, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.8666707233851095 },
{
0.0, 0.0, 0.5313568131025782, 0.7885169671814166, 0.0, 0.0, 0.0, 0.0, 0.018985597883380834 },
{
0.0, 0.0, 0.0638352933614551, 0.43288078754368087, 0.0, 0.0, 0.0, 0.0, 0.024588992360087936 },
{
0.0, 0.0, 0.0, 0.0, 0.5726560497526981, 0.46147451558714137, 0.0, 0.0, 0.3092949006101644 },
{
0.0, 0.0, 0.0, 0.0, 0.49912793848794346, 0.10177170658921131, 0.0, 0.0, 0.5688765553605598 },
{
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.011324298232025076, 0.7818735367206608, 0.19174628382211345 },
{
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.3493391807702114, 0.7372240478064768, 0.2222070859509434 },
{
0.3520544204246836, 0.9542842276118758, 0.5497763652417319, 0.6877110928813842, 0.474984005515809, 0.1049101356942862, 0.45732473058006196, 0.7619385838098582, 0.3845106395360893 }
}

	Var sr_9x9_4x4 : Matrix<Double, 9, 9>
sr_9x9_4x4  = {
{
0.5607181619779067, 0.7306285462181065, 0.9462577049486554, 0.1757958727872303, 0.0, 0.0, 0.0, 0.0, 0.06670996040361277 },
{
0.1839880882897429, 0.518972818924821, 0.27307377993087834, 0.8001824449487924, 0.0, 0.0, 0.0, 0.0, 0.26712535732313336 },
{
0.632198741616928, 0.32252559380515333, 0.25348417947415847, 0.06143800944455524, 0.0, 0.0, 0.0, 0.0, 0.6411314841187187 },
{
0.33098846310113506, 0.7606951775353051, 0.5506994290536317, 0.06081209778954777, 0.0, 0.0, 0.0, 0.0, 0.7041250800902238 },
{
0.0, 0.0, 0.0, 0.0, 0.4459467532326844, 0.29729312295963006, 0.3359880006695313, 0.7257160379492757, 0.12669650981727731 },
{
0.0, 0.0, 0.0, 0.0, 0.24104390298502498, 0.1852486853175349, 0.5081322149531338, 0.4258520434823395, 0.6036923935464841 },
{
0.0, 0.0, 0.0, 0.0, 0.2318874516188122, 0.4778854544380021, 0.5385472295071452, 0.8853271041489857, 0.7985872175007434 },
{
0.0, 0.0, 0.0, 0.0, 0.17441551460017912, 0.5717566524898761, 0.6320489305859412, 0.24630328287724756, 0.9783583913842371 },
{
0.7744509406889001, 0.60134202599875, 0.9824357382808567, 0.9263475798550386, 0.9338510123930925, 0.7647060481990435, 0.27114331032838024, 0.6797414451846039, 0.6663988990501586 }
}

	Var sr_16x16 : Matrix<Double, 16, 16>
sr_16x16 =  {
{
0.5733272833689051, 0.7007915386848632, 0.38553981722871467, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.33023867574993815 },
{
0.34932761858770944, 0.38376661688398217, 0.041611982217762855, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.36051939123763677 },
{
0.7458211147098464, 0.1686404952456192, 0.7946108807181236, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.998870606873941 },
{
0.0, 0.0, 0.0, 0.4819016714538501, 0.9869449462883247, 0.05431286279746805, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.6151750416823099 },
{
0.0, 0.0, 0.0, 0.29782912147637197, 0.6076721760234864, 0.9746239349814525, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.9811374635343393 },
{
0.0, 0.0, 0.0, 0.28677311588277554, 0.00836528883051424, 0.008150419388287755, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.6200868468543097 },
{
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.5998878229557235, 0.6805814540135845, 0.7579201430890042, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.08227013020518947 },
{
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.4268476845820387, 0.8074859870261961, 0.9611008555966488, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.6967430834887774 },
{
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.006003037639272235, 0.42926851774699626, 0.5034245431471974, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.970116704389815 },
{
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.4511551546029817, 0.3384881288559113, 0.8125506759776527, 0.0, 0.0, 0.0, 0.2666792579398276 },
{
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.4202712278496993, 0.42388357414124167, 0.21804669498655926, 0.0, 0.0, 0.0, 0.09518253663810261 },
{
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.4975649423500277, 0.10135760048182785, 0.0717667711518497, 0.0, 0.0, 0.0, 0.2938321859311669 },
{
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.7776395467838357, 0.9955879729379102, 0.9224645405821592, 0.251889255505221 },
{
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.567895127071049, 0.04073144190714151, 0.9529671183755849, 0.9216004913551776 },
{
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.018272635853597508, 0.7831577638017226, 0.2622833741051329, 0.5728753734225902 },
{
0.4227762915319906, 0.6023747965122298, 0.1579477228501689, 0.2700048994119322, 0.6284209282756312, 0.9564951516674846, 0.5483328180373425, 0.21664881704239924, 0.024440129303941904, 0.19114448284941898, 0.5238709871422825, 0.010214959571601345, 0.12895869134894333, 0.45896986229125125, 0.7544110873428092, 0.33594881164004986 }
}
	Var sr_16x16_5x5 : Matrix<Double, 16, 16>
sr_16x16_5x5 = {
{
0.8797887628481771, 0.21098134056068152, 0.7155354713731946, 0.9171320290040033, 0.6814246519753939, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.36300546106794396 },
{
0.3175363343653401, 0.01882059880862408, 0.37817038118369317, 0.9209962748972879, 0.726054666882728, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.04629642394059075 },
{
0.6241086616160116, 0.35379466033482765, 0.5309765701179088, 0.0013362152489462265, 0.909954156683134, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.48255163052961525 },
{
0.5044180446941251, 0.6018467307676827, 0.408337807381736, 0.7138655859065232, 0.09535516057421989, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.15809968350992065 },
{
0.9945101360868596, 0.2071343260559596, 0.8346040932620362, 0.20949598410280834, 0.8467478158719726, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.6802916082732694 },
{
0.0, 0.0, 0.0, 0.0, 0.0, 0.16746062407837292, 0.9528048272489389, 0.5928319366732795, 0.10240497781687086, 0.4207941356642273, 0.0, 0.0, 0.0, 0.0, 0.0, 0.8098879272072494 },
{
0.0, 0.0, 0.0, 0.0, 0.0, 0.6063477112297564, 0.6987821318388138, 0.5871596095814289, 0.0869102598253404, 0.2528282204472817, 0.0, 0.0, 0.0, 0.0, 0.0, 0.21416054314330701 },
{
0.0, 0.0, 0.0, 0.0, 0.0, 0.44197878368429255, 0.7130195344514875, 0.32969072573123714, 0.8278498936934351, 0.22128966607012535, 0.0, 0.0, 0.0, 0.0, 0.0, 0.44162740772641296 },
{
0.0, 0.0, 0.0, 0.0, 0.0, 0.461009587028713, 0.07197843983790786, 0.3012338157312604, 0.21954815593094623, 0.3874611333185566, 0.0, 0.0, 0.0, 0.0, 0.0, 0.2094184688511237 },
{
0.0, 0.0, 0.0, 0.0, 0.0, 0.4373757550402827, 0.11084383818303323, 0.6794531347673907, 0.1913902162871124, 0.16940861263060625, 0.0, 0.0, 0.0, 0.0, 0.0, 0.5264242770016103 },
{
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.4578523613273693, 0.8051105201418711, 0.5881127011566598, 0.5438759187177685, 0.1403170370917577, 0.1879023822080894 },
{
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.9118223573822543, 0.2819295452341005, 0.9879947454787719, 0.3269413614400015, 0.46571216067044496, 0.4415813650920122 },
{
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.6841308305312049, 0.009987738399693913, 0.352902252388852, 0.9379398907125149, 0.8105187913285806, 0.7223634998017128 },
{
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.558367990019739, 0.614269141625967, 0.22494778952244443, 0.17082351423957465, 0.5983775013295158, 0.12362358284095598 },
{
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.6427174222862055, 0.43107865353838326, 0.42258516334755114, 0.8639481303372143, 0.05914528385921192, 0.7790483021395712 },
{
0.21496263580752228, 0.18732443172383628, 0.8391423905672012, 0.9889209687597554, 0.22031557600202678, 0.9443679829887954, 0.16235520466843623, 0.8907165312561273, 0.45575831128490063, 0.39486653698812835, 0.4325082883342015, 0.9951812429645114, 0.6067146275871959, 0.9146911331149374, 0.06025347239319345, 0.06813947849144653 }
}
	Var sr_16x16_2x2_2 : Matrix<Double, 16, 16> 
sr_16x16_2x2_2= {
{
0.18499275774157542, 0.006729354876676252, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.45645634468809804, 0.7793477799523009 },
{
0.527686825381436, 0.11486906832606858, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.6896771266382984, 0.7736018148498393 },
{
0.0, 0.0, 0.8437643861844326, 0.35959699974444914, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.3721114157748693, 0.9496907048166134 },
{
0.0, 0.0, 0.2911071055002312, 0.45537793843318164, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.3425471587223543, 0.49413090001335835 },
{
0.0, 0.0, 0.0, 0.0, 0.5506410577884464, 0.29825255833473685, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.2501781071149256, 0.9616888857355848 },
{
0.0, 0.0, 0.0, 0.0, 0.4200037818685569, 0.032678462167291644, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.44444629471943986, 0.45223854479626113 },
{
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.577855510403717, 0.8731151547103807, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.7130360238793094, 0.5610470575166171 },
{
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.71655983587143, 0.7763563456827409, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1369192394660078, 0.18242983013543213 },
{
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.09566515760026661, 0.10367083021434664, 0.0, 0.0, 0.0, 0.0, 0.5374729587480579, 0.7685485971441992 },
{
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.9654078277475965, 0.5462485312747369, 0.0, 0.0, 0.0, 0.0, 0.6845525169676383, 0.7198323070556158 },
{
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.29123220774422065, 0.5734359850264494, 0.0, 0.0, 0.820395372478196, 0.7875976345275351 },
{
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.17385696365242265, 0.21071950038140885, 0.0, 0.0, 0.055154959896573375, 0.5485352600555414 },
{
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.8783403428734984, 0.5012771663524871, 0.8118330569735244, 0.3391827586799837 },
{
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06971243239006464, 0.9027117750983329, 0.2630756828292189, 0.0440955325700485 },
{
0.7065318443146241, 0.005611156216809299, 0.6217424235758737, 0.2872678488152379, 0.612950251115208, 0.20304508695852053, 0.09752051213850799, 0.4672767117484815, 0.9062384204532029, 0.33796381082726124, 0.9843428341067899, 0.032413720968725745, 0.7385363855822841, 0.8642674976247553, 0.4861931708729337, 0.3213980886942035 },
{
0.24571556033693032, 0.17627952967833127, 0.6265541582304801, 0.978023921085562, 0.8363157376202628, 0.011226968852354191, 0.5099799543329387, 0.1025829824401705, 0.5931949749122213, 0.46166018326896385, 0.29603701861045006, 0.0891770198899563, 0.3649693370909194, 0.7433714007482264, 0.6725133119811796, 0.6918191784464924 }
}

/////////////////////////////////////// MEASURE ///////////////////////////////////////////////////



/////////////// 3x3 schur ///////////////////////////////////////////////////////////////////////////////////////////

	Var sr_3x3_inv : Matrix<Double, 3, 3> 
	Var sr_3x3_f : Matrix<Double, 3, 1> = {{2},{5},{1}}
	Var sr_3x3_u : Matrix<Double, 3, 1> 

	// INVERSION
/*	sr_3x3_inv = inverse(sr_3x3, "shape=schur", "block=2","A=diagonal")
	
	// Solve by inversion
		sr_3x3_inv = inverse(sr_3x3, "shape=schur", "block=2","A=diagonal")
		sr_3x3_u = sr_3x3_inv * sr_3x3_f

	// SYSTEM SOLVE
		solveMatSys sr_3x3, sr_3x3_u, sr_3x3_f {shape=schur,block=2, A=diagonal}
*/
/////////////// 4x4 schur ///////////////////////////////////////////////////////////////////////////////////////////

	Var sr_4x4_inv : Matrix<Double, 4, 4> 
	Var sr_4x4_f : Matrix<Double, 4, 1> = {{7},{2},{5},{1}}
	Var sr_4x4_u : Matrix<Double, 4, 1> 

	// INVERSION
/*	sr_4x4_inv = inverse(sr_4x4, "shape=schur", "block=3","A=diagonal")
	
	// Solve by inversion
	sr_4x4_inv = inverse(sr_4x4, "shape=schur", "block=3","A=diagonal")
	sr_4x4_u = sr_4x4_inv * sr_4x4_f

	// SYSTEM SOLVE
	solveMatSys sr_4x4, sr_4x4_u, sr_4x4_f {shape=schur,block=3, A=diagonal}
*/
/////////////// 4x4_2 schur ///////////////////////////////////////////////////////////////////////////////////////////

	Var sr_4x4_2_inv : Matrix<Double, 4, 4> 

	// INVERSION
//	sr_4x4_2_inv = inverse(sr_4x4_2, "shape=schur", "block=2","A=diagonal")

	

//////////////// 5x5 schur ///////////////////////////////////////////////////////////////////////////////////////////

	Var sr_5x5_inv : Matrix<Double, 5 , 5> 
	Var sr_5x5_f : Matrix<Double, 5, 1> = {{5},{1},{6},{5},{9}}
	Var sr_5x5_u : Matrix<Double, 5, 1>  

/*
	// INVERSION
	sr_5x5_inv = inverse(sr_5x5_2x2, "shape=schur", "block=4", "A=blockdiagonal","Ablock=2")
	sr_5x5_inv = inverse(sr_5x5_2x2, "shape=schur", "block=4", "A=blockdiagonal","Ablock=2")
	sr_5x5_inv = inverse(sr_5x5_2x2, "shape=schur", "block=4", "A=blockdiagonal","Ablock=2")
	sr_5x5_inv = inverse(sr_5x5_2x2, "shape=schur", "block=4", "A=blockdiagonal","Ablock=2")
	sr_5x5_inv = inverse(sr_5x5_2x2, "shape=schur", "block=4", "A=blockdiagonal","Ablock=2")
	sr_5x5_inv = inverse(sr_5x5_2x2, "shape=schur", "block=4", "A=blockdiagonal","Ablock=2")
	sr_5x5_inv = inverse(sr_5x5_2x2, "shape=schur", "block=4", "A=blockdiagonal","Ablock=2")
	sr_5x5_inv = inverse(sr_5x5_2x2, "shape=schur", "block=4", "A=blockdiagonal","Ablock=2")
	sr_5x5_inv = inverse(sr_5x5_2x2, "shape=schur", "block=4", "A=blockdiagonal","Ablock=2")
	sr_5x5_inv = inverse(sr_5x5_2x2, "shape=schur", "block=4", "A=blockdiagonal","Ablock=2")




	
	// Solve by inversion
	sr_5x5_inv = inverse(sr_5x5, "shape=schur", "block=4", "A=diagonal")
	sr_5x5_u = sr_5x5_inv * sr_5x5_f

	// SYSTEM SOLVE
	solveMatSys sr_5x5, sr_5x5_u, sr_5x5_f {shape=schur, block=4, A=diagonal}
*/
//////////////// 5x5_2 schur ///////////////////////////////////////////////////////////////////////////////////////////

	Var sr_5x5_2_inv : Matrix<Double, 5 , 5> 

/*
	// INVERSION
	sr_5x5_2_inv = inverse(sr_5x5_2, "shape=schur", "block=3", "A=diagonal")
	sr_5x5_2_inv = inverse(sr_5x5_2, "shape=schur", "block=3", "A=diagonal")
	sr_5x5_2_inv = inverse(sr_5x5_2, "shape=schur", "block=3", "A=diagonal")
	sr_5x5_2_inv = inverse(sr_5x5_2, "shape=schur", "block=3", "A=diagonal")
	sr_5x5_2_inv = inverse(sr_5x5_2, "shape=schur", "block=3", "A=diagonal")
	sr_5x5_2_inv = inverse(sr_5x5_2, "shape=schur", "block=3", "A=diagonal")
	sr_5x5_2_inv = inverse(sr_5x5_2, "shape=schur", "block=3", "A=diagonal")
	sr_5x5_2_inv = inverse(sr_5x5_2, "shape=schur", "block=3", "A=diagonal")
	sr_5x5_2_inv = inverse(sr_5x5_2, "shape=schur", "block=3", "A=diagonal")
	sr_5x5_2_inv = inverse(sr_5x5_2, "shape=schur", "block=3", "A=diagonal")
*/

//////////////// 5x5  with 2x2 blocks schur ///////////////////////////////////////////////////////////////////////////////////////////

	Var sr_5x5_2x2_inv : Matrix<Double, 5 , 5> 

	// INVERSION
/*	sr_5x5_2x2_inv = inverse(sr_5x5_2x2, "shape=schur", "block=4", "A=blockdiagonal","Ablock=2")

	// Solve by inversion
	sr_5x5_2x2_inv = inverse(sr_5x5_2x2, "shape=schur", "block=4", "A=blockdiagonal","Ablock=2")
	sr_5x5_u = sr_5x5_2x2_inv * sr_5x5_f

	// SYSTEM SOLVE
	solveMatSys sr_5x5_2x2, sr_5x5_u, sr_5x5_f {shape=schur, block=4, A=blockdiagonal, Ablock=2}
*/
//////////////// 6x6 schur ///////////////////////////////////////////////////////////////////////////////////////////

	Var sr_6x6_inv : Matrix<Double, 6, 6> 
	Var sr_6x6_f : Matrix<Double, 6, 1> = {{2},{5},{1},{6},{5},{9}}
	Var sr_6x6_u : Matrix<Double, 6, 1>  

	// INVERSION
/*	sr_6x6_inv = inverse(sr_6x6, "shape=schur", "block=5", "A=diagonal")


	// Solve by inversion
	sr_6x6_inv = inverse(sr_6x6, "shape=schur", "block=5", "A=diagonal")
	sr_6x6_u = sr_6x6_inv * sr_6x6_f

	// SYSTEM SOLVE
	solveMatSys sr_6x6, sr_6x6_u, sr_6x6_f {shape=schur, block=5, A=diagonal}
*/
//////////////// 6x6_2 schur ///////////////////////////////////////////////////////////////////////////////////////////

	Var sr_6x6_2_inv : Matrix<Double, 6, 6> 
	
	// INVERSION
	//sr_6x6_2_inv = inverse(sr_6x6_2, "shape=schur", "block=4", "A=diagonal")



//////////////// 6x6_2x2_2 schur ///////////////////////////////////////////////////////////////////////////////////////////

	Var sr_6x6_2x2_2_inv : Matrix<Double, 6, 6> 
	
	// INVERSION
	//sr_6x6_2x2_2_inv = inverse(sr_6x6_2x2_2, "shape=schur", "block=4", "A=blockdiagonal", "Ablock=2")


//////////////// 7x7  schur ///////////////////////////////////////////////////////////////////////////////////////////

	Var sr_7x7_inv : Matrix<Double, 7 , 7> 
	Var sr_7x7_f : Matrix<Double, 7, 1> = {{1},{3},{5},{1},{6},{5},{9}}
	Var sr_7x7_u : Matrix<Double, 7, 1>  

	// INVERSION
/*	sr_7x7_inv = inverse(sr_7x7, "shape=schur", "block=6", "A=diagonal")
	
	// Solve by inversion
	sr_7x7_inv = inverse(sr_7x7, "shape=schur", "block=6", "A=diagonal")
	sr_7x7_u = sr_7x7_inv * sr_7x7_f
	
	// SYSTEM SOLVE
	solveMatSys sr_7x7, sr_7x7_u, sr_7x7_f {shape=schur, block=6, A=diagonal}
*/	
//////////////// 7x7  with 2x2 blocks schur ///////////////////////////////////////////////////////////////////////////////////////////

	Var sr_7x7_2x2_inv : Matrix<Double, 7 , 7> 
	
	// INVERSION
/*
	sr_7x7_2x2_inv = inverse(sr_7x7_2x2, "shape=schur", "block=6", "A=blockdiagonal","Ablock=2")
sr_7x7_2x2_inv = inverse(sr_7x7_2x2, "shape=schur", "block=6", "A=blockdiagonal","Ablock=2")
sr_7x7_2x2_inv = inverse(sr_7x7_2x2, "shape=schur", "block=6", "A=blockdiagonal","Ablock=2")
sr_7x7_2x2_inv = inverse(sr_7x7_2x2, "shape=schur", "block=6", "A=blockdiagonal","Ablock=2")
sr_7x7_2x2_inv = inverse(sr_7x7_2x2, "shape=schur", "block=6", "A=blockdiagonal","Ablock=2")
sr_7x7_2x2_inv = inverse(sr_7x7_2x2, "shape=schur", "block=6", "A=blockdiagonal","Ablock=2")
sr_7x7_2x2_inv = inverse(sr_7x7_2x2, "shape=schur", "block=6", "A=blockdiagonal","Ablock=2")
sr_7x7_2x2_inv = inverse(sr_7x7_2x2, "shape=schur", "block=6", "A=blockdiagonal","Ablock=2")
sr_7x7_2x2_inv = inverse(sr_7x7_2x2, "shape=schur", "block=6", "A=blockdiagonal","Ablock=2")
sr_7x7_2x2_inv = inverse(sr_7x7_2x2, "shape=schur", "block=6", "A=blockdiagonal","Ablock=2")

	// Solve by inversion
	sr_7x7_2x2_inv = inverse(sr_7x7_2x2, "shape=schur", "block=6", "A=blockdiagonal","Ablock=2")
	sr_7x7_u = sr_7x7_2x2_inv * sr_7x7_f
	
	// SYSTEM SOLVE
	solveMatSys sr_7x7_2x2, sr_7x7_u, sr_7x7_f {shape=schur, block=6, A=blockdiagonal,Ablock=2}
*/	
//////////////// 7x7  with 3x3 blocks schur ///////////////////////////////////////////////////////////////////////////////////////////

	Var sr_7x7_3x3_inv : Matrix<Double, 7 , 7> 	

	// INVERSION
	sr_7x7_3x3_inv = inverse(sr_7x7_3x3, "shape=schur", "block=6", "A=blockdiagonal","Ablock=3")
/*
	sr_7x7_3x3_inv = inverse(sr_7x7_3x3, "shape=schur", "block=6", "A=blockdiagonal","Ablock=3")
	sr_7x7_3x3_inv = inverse(sr_7x7_3x3, "shape=schur", "block=6", "A=blockdiagonal","Ablock=3")
	sr_7x7_3x3_inv = inverse(sr_7x7_3x3, "shape=schur", "block=6", "A=blockdiagonal","Ablock=3")
	sr_7x7_3x3_inv = inverse(sr_7x7_3x3, "shape=schur", "block=6", "A=blockdiagonal","Ablock=3")
	sr_7x7_3x3_inv = inverse(sr_7x7_3x3, "shape=schur", "block=6", "A=blockdiagonal","Ablock=3")
	sr_7x7_3x3_inv = inverse(sr_7x7_3x3, "shape=schur", "block=6", "A=blockdiagonal","Ablock=3")
	sr_7x7_3x3_inv = inverse(sr_7x7_3x3, "shape=schur", "block=6", "A=blockdiagonal","Ablock=3")
	sr_7x7_3x3_inv = inverse(sr_7x7_3x3, "shape=schur", "block=6", "A=blockdiagonal","Ablock=3")
	sr_7x7_3x3_inv = inverse(sr_7x7_3x3, "shape=schur", "block=6", "A=blockdiagonal","Ablock=3")
*/	
compare(sr_7x7_3x3_inv, sr_7x7_3x3_sol,0.0001)
/*
	// Solve by inversion
	sr_7x7_3x3_inv = inverse(sr_7x7_3x3, "shape=schur", "block=6", "A=blockdiagonal","Ablock=3")
	sr_7x7_u = sr_7x7_3x3_inv * sr_7x7_f
	
	// SYSTEM SOLVE
	solveMatSys sr_7x7_3x3, sr_7x7_u, sr_7x7_f {shape=schur, block=6, A=blockdiagonal,Ablock=3}
*/

//////////////// 9x9 with 2x2 blocks schur ///////////////////////////////////////////////////////////////////////////////////////////
	Var sr_9x9_inv : Matrix<Double, 9, 9> 
	Var sr_9x9_f : Matrix<Double, 9, 1> = {{2},{5},{1},{6},{5},{9},{3},{5},{1}}
	Var sr_9x9_u : Matrix<Double, 9, 1> 
/*
	// INVERSION
	sr_9x9_inv = inverse(sr_9x9, "shape=schur", "block=8","A=blockdiagonal", "Ablock=2")
sr_9x9_inv = inverse(sr_9x9, "shape=schur", "block=8","A=blockdiagonal", "Ablock=2")
sr_9x9_inv = inverse(sr_9x9, "shape=schur", "block=8","A=blockdiagonal", "Ablock=2")
sr_9x9_inv = inverse(sr_9x9, "shape=schur", "block=8","A=blockdiagonal", "Ablock=2")
sr_9x9_inv = inverse(sr_9x9, "shape=schur", "block=8","A=blockdiagonal", "Ablock=2")
sr_9x9_inv = inverse(sr_9x9, "shape=schur", "block=8","A=blockdiagonal", "Ablock=2")
sr_9x9_inv = inverse(sr_9x9, "shape=schur", "block=8","A=blockdiagonal", "Ablock=2")
sr_9x9_inv = inverse(sr_9x9, "shape=schur", "block=8","A=blockdiagonal", "Ablock=2")
sr_9x9_inv = inverse(sr_9x9, "shape=schur", "block=8","A=blockdiagonal", "Ablock=2")
sr_9x9_inv = inverse(sr_9x9, "shape=schur", "block=8","A=blockdiagonal", "Ablock=2")
*/
//////////////// 9x9 with 4x4 blocks schur  ///////////////////////////////////////////////////////////////////////////////////////////
	Var sr_9x9_4x4_inv : Matrix<Double, 9, 9> 
	
	// INVERSION
/*	
	sr_9x9_4x4_inv = inverse(sr_9x9_4x4, "shape=schur", "block=8","A=blockdiagonal", "Ablock=4")
sr_9x9_4x4_inv = inverse(sr_9x9_4x4, "shape=schur", "block=8","A=blockdiagonal", "Ablock=4")
sr_9x9_4x4_inv = inverse(sr_9x9_4x4, "shape=schur", "block=8","A=blockdiagonal", "Ablock=4")
sr_9x9_4x4_inv = inverse(sr_9x9_4x4, "shape=schur", "block=8","A=blockdiagonal", "Ablock=4")
sr_9x9_4x4_inv = inverse(sr_9x9_4x4, "shape=schur", "block=8","A=blockdiagonal", "Ablock=4")
sr_9x9_4x4_inv = inverse(sr_9x9_4x4, "shape=schur", "block=8","A=blockdiagonal", "Ablock=4")
sr_9x9_4x4_inv = inverse(sr_9x9_4x4, "shape=schur", "block=8","A=blockdiagonal", "Ablock=4")
sr_9x9_4x4_inv = inverse(sr_9x9_4x4, "shape=schur", "block=8","A=blockdiagonal", "Ablock=4")
sr_9x9_4x4_inv = inverse(sr_9x9_4x4, "shape=schur", "block=8","A=blockdiagonal", "Ablock=4")
sr_9x9_4x4_inv = inverse(sr_9x9_4x4, "shape=schur", "block=8","A=blockdiagonal", "Ablock=4")
*/
//////////////// 16x16 with 3x3 blocks schur ///////////////////////////////////////////////////////////////////////////////////////////
	Var sr_16x16_inv : Matrix<Double, 16, 16> 
	Var sr_16x16_f : Matrix<Double, 16, 1> = {{2},{5},{1},{6},{5},{9},{3},{5},{1},{3},{8},{1},{9},{3},{5},{8}}
	Var sr_16x16_u : Matrix<Double, 16, 1> 

	// INVERSION
/*
	sr_16x16_inv = inverse(sr_16x16, "shape=schur", "block=15","A=blockdiagonal", "Ablock=3")
sr_16x16_inv = inverse(sr_16x16, "shape=schur", "block=15","A=blockdiagonal", "Ablock=3")
sr_16x16_inv = inverse(sr_16x16, "shape=schur", "block=15","A=blockdiagonal", "Ablock=3")
sr_16x16_inv = inverse(sr_16x16, "shape=schur", "block=15","A=blockdiagonal", "Ablock=3")
sr_16x16_inv = inverse(sr_16x16, "shape=schur", "block=15","A=blockdiagonal", "Ablock=3")
sr_16x16_inv = inverse(sr_16x16, "shape=schur", "block=15","A=blockdiagonal", "Ablock=3")
sr_16x16_inv = inverse(sr_16x16, "shape=schur", "block=15","A=blockdiagonal", "Ablock=3")
sr_16x16_inv = inverse(sr_16x16, "shape=schur", "block=15","A=blockdiagonal", "Ablock=3")
sr_16x16_inv = inverse(sr_16x16, "shape=schur", "block=15","A=blockdiagonal", "Ablock=3")
sr_16x16_inv = inverse(sr_16x16, "shape=schur", "block=15","A=blockdiagonal", "Ablock=3")
*/
//////////////// 16x16 with 5x5 blocks schur ///////////////////////////////////////////////////////////////////////////////////////////
	Var sr_16x16_5x5_inv : Matrix<Double, 16, 16> 

	// INVERSION
	sr_16x16_5x5_inv = inverse(sr_16x16_5x5, "shape=schur", "block=15","A=blockdiagonal", "Ablock=5")
sr_16x16_5x5_inv = inverse(sr_16x16_5x5, "shape=schur", "block=15","A=blockdiagonal", "Ablock=5")
sr_16x16_5x5_inv = inverse(sr_16x16_5x5, "shape=schur", "block=15","A=blockdiagonal", "Ablock=5")
sr_16x16_5x5_inv = inverse(sr_16x16_5x5, "shape=schur", "block=15","A=blockdiagonal", "Ablock=5")
sr_16x16_5x5_inv = inverse(sr_16x16_5x5, "shape=schur", "block=15","A=blockdiagonal", "Ablock=5")
sr_16x16_5x5_inv = inverse(sr_16x16_5x5, "shape=schur", "block=15","A=blockdiagonal", "Ablock=5")
sr_16x16_5x5_inv = inverse(sr_16x16_5x5, "shape=schur", "block=15","A=blockdiagonal", "Ablock=5")
sr_16x16_5x5_inv = inverse(sr_16x16_5x5, "shape=schur", "block=15","A=blockdiagonal", "Ablock=5")
sr_16x16_5x5_inv = inverse(sr_16x16_5x5, "shape=schur", "block=15","A=blockdiagonal", "Ablock=5")
sr_16x16_5x5_inv = inverse(sr_16x16_5x5, "shape=schur", "block=15","A=blockdiagonal", "Ablock=5")


//////////////// 16x16 with 2x2 2 blocks schur ///////////////////////////////////////////////////////////////////////////////////////////
	Var sr_16x16_2x2_2_inv : Matrix<Double, 16, 16> 

	// INVERSION
	//	sr_16x16_2x2_2_inv = inverse(sr_16x16_2x2_2, "shape=schur", "block=14","A=blockdiagonal", "Ablock=2")




}