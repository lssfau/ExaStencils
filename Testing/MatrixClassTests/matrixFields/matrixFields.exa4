// domain declarations

Domain global< [ 0.0, 0.0 ] to [ 1.0, 1.0 ] >

// field layout declarations


Layout mat_layout_quad< Matrix<Real, 2, 2>, Node >@all {
  duplicateLayers = [1, 1]
  ghostLayers     = [0, 0]
}

Layout mat_layout< Matrix<Real, 2, 1>, Node >@all {
  duplicateLayers = [1, 1]
  ghostLayers     = [0, 0]
}



Function init_mat_field_quad@finest : Unit {
  loop over mat_field_quad {
    	mat_field_quad = comp_mat
  }
  loop over mat_field_quad {
    	compare(mat_field_quad,comp_mat,0.01, true)
  }

}

Function mult_mat_field_quad@finest : Unit {
  loop over mat_field_quad {
    	mat_field_quad = mat_field_quad * 3
  }
	Var comp_mat_3 : Matrix<Real, 2, 2> = 3*comp_mat
  loop over mat_field_quad {
    	compare(mat_field_quad, comp_mat_3, 0.01, true)
  }
}

Function invert_mat_field_quad@finest : Unit {

  loop over mat_field_quad {
    	mat_field_quad = inverse(mat_field_quad)
  }
  loop over mat_field_quad {
    	compare(mat_field_quad, inv, 0.01, true)
  }
  
}


Function slice_mat_field@finest : Unit {
  loop over mat_field {
    	//mat_field[:][0] = getSlice(mat_field_quad, 0, 0, 2, 1)
mat_field = getSlice(mat_field_quad, 0, 0, 2, 1)
   
}
  loop over mat_field {
	compare(mat_field, slice, 0.01, true)
  }
}



// field declarations


Field mat_field_quad< global, mat_layout_quad, 0.0 >@all

Field mat_field< global, mat_layout, 0.0 >@all

Globals {

	Var comp_mat : Matrix<Real, 2, 2> = {{3,3},{1,2}}
	Var inv : Matrix<Real, 2, 2> = inverse(comp_mat * 3)
	Var slice : Matrix<Real, 2, 1> = getSlice(inv, 0,0,2,1)
  
}
Function Application {
    // init

initGlobals ( )
  initDomain ( )
  initFieldsWithZero ( )

	init_mat_field_quad@finest()
	print('stage 0 done')

	Var init : String

	mult_mat_field_quad@finest()

	print('stage 1 done')

	invert_mat_field_quad@finest()

	print('stage 2 done')
 
	slice_mat_field@finest()

	print('stage 3 done')
    

 	destroyGlobals ( )
}
