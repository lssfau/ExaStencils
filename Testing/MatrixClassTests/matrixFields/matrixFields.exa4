// domain declarations

Domain global< [ 0.0, 0.0 ] to [ 1.0, 1.0 ] >

// field layout declarations


Layout mat_layout_quad< Matrix<Real, 2, 2>, Node >@all {
  duplicateLayers = [1, 1]
  ghostLayers     = [0, 0]
}

Layout mat_layout< Matrix<Real, 2, 1>, Node >@all {
  duplicateLayers = [1, 1]
  ghostLayers     = [0, 0]
}



Function init_mat_field_quad@finest : Unit {
  loop over mat_field_quad {
    	mat_field_quad = comp_mat
  }
}

Function mult_det_mat_field_quad@finest : Unit {
  loop over mat_field_quad {
    	mat_field_quad *= determinant(mat_field_quad) 
  }
}

Function invert_mat_field_quad@finest : Unit {
  loop over mat_field_quad {
    	mat_field_quad = inverse(mat_field_quad)
	
  }
}

Function slice_mat_field_quad@finest : Unit {
  loop over mat_field_quad {
    	mat_field_quad = getSlice(mat_field_quad, 0, 0, 2, 2)
  }
}

Function slice_mat_field@finest : Unit {
  loop over mat_field {
    	mat_field = getSlice(mat_field_quad, 0, 0, 2, 1)
  }
}
/*
Function compare@finest(Var mat : Matrix<Real, 2, 2>) : Boolean {
	loop over mat_field_quad {
		Var i : Int = 0
		repeat 2 times count i {
 			Var j : Int = 0
			repeat 2 times count j {
 				if(getElement(mat_field_quad, i, j) != getElement(mat, i, j))
					print(' not equal' )
					return false
			}	
		}
	}
	return true
}
*/
// field declarations

Field mat_field< global, mat_layout, 0.0 >@all


Field mat_field_quad< global, mat_layout_quad, 0.0 >@all

Globals {
	Var comp_mat : Matrix<Real, 2, 2> = {{3,3},{1,2}}
	
  Var comp_mat_mult_det : Matrix<Real, 2, 2> = comp_mat * det(comp_mat) 
  Var comp_mat_inv : Matrix<Real, 2, 2> = inverse(comp_mat_mult_det)
  Var comp_slice : Matrix<Real, 2, 1> = getSlice(comp_mat_inv, 0, 0, 2, 1)
  
}
Function Application {
    // init
  initGlobals ( )
  initDomain ( )
  initFieldsWithZero ( )

	init_mat_field_quad@finest()

	//if(compare(comp_mat) == false) return -1
 Var init : String
  buildString (init, "./data/init.txt" )
	printField( init,mat_field_quad@finest)
  	mult_det_mat_field_quad@finest()
 Var mult_det : String
  buildString (mult_det, "./data/mult_det.txt" )
printField( mult_det, mat_field_quad@finest)
  
	//if(compare(comp_mat_mult_det) == false) return -1
	invert_mat_field_quad@finest()
 Var inv : String
  buildString (inv, "./data/inv.txt" )
printField( inv,mat_field_quad@finest)
  
  
	//if(compare(comp_mat_inv) == false) return -1
	slice_mat_field_quad@finest()
 Var slice : String
  buildString (slice , "./data/slice .txt" )
printField( slice,mat_field_quad@finest )
  
  
  
	//if(compare(comp_mat_inv) == false) return -1
  	slice_mat_field@finest()
Var slice_2 : String
  buildString (slice_2 , "./data/slice_2 .txt" )
printField(mat_field@finest, slice_2 )
  
	//if(compare(comp_slice) == false) return -1
  
 	destroyGlobals ( )
}
