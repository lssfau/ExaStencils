// domain declarations

// field layout declarations

// field declarations

// field combinations

// external field declarations

// stencil declarations

// stencil field declarations

// equations declarations

Domain global< [0.0, 0.0] to [0.1, 0.1] >



Function Application {
	Var m1 : Matrix<Double,2,2> = { { 1.0, 2.0 }, { 3.0, 4.0 } }
	Var m2 : Matrix<Double,2,2> = { { 1.0, 2.0 }, { 3.0, 4.0 } }
	Var m3 : Matrix<Double,2,2> = { { 1.0, 1.0 }, { 1.0, 1.0 } }
	Var prec : Double = 1.0E-4
	Var offset : Integer = 0
	Var value : Integer = 5
	setSlice ( m1, offset, 0, 2, 2, 5 )
	Var setSlice_sol1 : Matrix<Double,2,2> = { { 5.0, 5.0 }, { 5.0, 5.0 } }
	compare ( m1, setSlice_sol1, prec )
	setSlice ( m1, 0, 1, 2, 1, 3 )
	Var setSlice_sol2 : Matrix<Double,2,2> = { { 5.0, 3.0 }, { 5.0, 3.0 } }
	compare ( m1, setSlice_sol2, prec )
	setSlice ( m1, 0, 0, 2, 2, { { 1, 1 }, { 1, 1 } } )
	compare ( m1, m3, 0.1 )
	setSlice ( m1, 0, 0, 2, 2, m2 )
	compare ( m1, m2, 0.1 )
	Var slice1 : Matrix<Double,2,2> = getSlice ( m2, 0, 0, 2, 2 )
	Var getSlice_sol1 : Matrix<Double,2,2> = { { 1.0, 2.0 }, { 3.0, 4.0 } }
	compare ( slice1, getSlice_sol1, prec )
	Var slice2 : Matrix<Double,1,2>
	slice2 = getSlice ( m2, 1, 0, 1, 2 )
	Var slice2_sol : Matrix<Double,1,2> = { { 3.0, 4.0 } }
	compare ( slice2, slice2_sol, prec )
	Var index : Integer = 1
	Var slice3 : Matrix<Double,1,2> = getSlice ( m2, index, 0, 1, 2 )
	compare ( slice3, slice2_sol, prec )
	Var elem1 : Double = getElement ( m2, index, 0 )
	compare ( elem1, 3, 0.001 )
	setElement ( m1, 1, 1, 5 )
	Var elem2 : Double = getElement ( m1, 1, 1 )
	compare ( 5, elem2, prec )
}

