
Domain global< [ 0, 0 ] to [ 0.1, 0.1 ] >

Globals {
	
}

/// main function

Function Application ( ) : Unit {

//////////////////////////////////// INPUT MATRICES ////////////////////////////////////

Var f_2x2 : Matrix<Double,2,2> = 
{
{
0.47933412482422577, 0.45490005858814264 },
{
0.17835658433853996, 0.7503529374600817 }
}
Var f_3x3 : Matrix<Double,3 ,3> = 
	{
{
0.39287187095905995, 0.7886802994919987, 0.298697607444801 },
{
0.5070867451918645, 0.7257005666749787, 0.723523566048699 },
{
0.9827873861257082, 0.9628877980464746, 0.8885196215231134 }
}
Var f_4x4 : Matrix<Double,4 ,4> = 
{
{
0.7276027248559531, 0.1646674799879405, 0.13920866357295936, 0.1582489370631469 },
{
0.6614650565675387, 0.18058382117604888, 0.012416935132392726, 0.939692726407425 },
{
0.44073772339430983, 0.29881269488802187, 0.5854754226376906, 0.4334023083569867 },
{
0.09117824315183387, 0.3470951215340988, 0.12019107220194691, 0.9977727954795105 }
}
Var f_5x5 : Matrix<Double,5, 5> = 
{
{
0.14110689171567092, 0.25843183075556797, 0.3280251957351775, 0.01929781805001518, 0.5022905057550249 },
{
0.9125207386163972, 0.34213650869953716, 0.7806437163952232, 0.757201764779451, 0.4340689460132635 },
{
0.9164506432851317, 0.7592737949379137, 0.3432876312509807, 0.2213752200163388, 0.07668879847974897 },
{
0.3935674492673469, 0.00633929986761772, 0.832801180483577, 0.6010519899936735, 0.41703389441877825 },
{
0.7371853294951656, 0.07072183417556266, 0.6477872246714684, 0.2660245401208724, 0.030105450085309404 }
}
Var f_6x6 : Matrix<Double,6, 6> =  {
{
0.3445115614103835, 0.048697438979048546, 0.44737993748878346, 0.03696002345182092, 0.1771373782554877, 0.9743821985611913 },
{
0.0693601926447075, 0.049974090095465495, 0.7328177590673656, 0.18548841502660673, 0.5495032569147246, 0.7961539837501617 },
{
0.33564484312665255, 0.7000001501817554, 0.04428867053873731, 0.6207986084415881, 0.9445192212038356, 0.604635004310429 },
{
0.8650232626185762, 0.5402615522805062, 0.4768371680877741, 0.21250508152209702, 0.49354151943366076, 0.2497159236402443 },
{
0.9755200642697729, 0.8083170912991959, 0.9350350615561046, 0.2885646870697135, 0.582637127425831, 0.6212813718442168 },
{
0.5977301470388955, 0.8185460758252587, 0.20848880411016546, 0.17551465279163536, 0.2981551046823995, 0.596461026009123 }
}

Var f_7x7 : Matrix<Double,7, 7> = 
{
{
0.15924019284782842, 0.40676713900587624, 0.9905761288594892, 0.5520602449015515, 0.3433089582155435, 0.2159216949695738, 0.6229290612459137 },
{
0.1430808410001938, 0.9568966883772511, 0.3540065730972535, 0.8883536163469347, 0.00859922283032577, 0.9111560891436523, 0.10496857373081314 },
{
0.6798690171206457, 0.9427371713338973, 0.8629738122388784, 0.03915629311144864, 0.1632720129573142, 0.6411348872536431, 0.6879031493758099 },
{
0.6197550420793565, 0.5480574380521609, 0.20520004946128223, 0.8873965815609839, 0.3446106737488219, 0.8454129730623483, 0.7065188883582931 },
{
0.7273165320155174, 0.3580196593186328, 0.46822633076635767, 0.8973337703495167, 0.4290181072467558, 0.8844561173927169, 0.0362647140993233 },
{
0.6343177930189544, 0.3092787067093249, 0.6636034716438342, 0.9372377695916563, 0.8566109360568859, 0.15406581756466053, 0.20687516995544564 },
{
0.2941515742254629, 0.8302556501026922, 0.40576897129520284, 0.46441675276651184, 0.06263857647142113, 0.4967146874121894, 0.2936324236953135 }
}

/////////////////////////////////////// MEASURE ///////////////////////////////////////////////////
	Var f_2x2_inv : Matrix<Double,2 ,2> 
	Var f_2x2_f : Matrix<Double,2, 1> = {{2},{5}}
	Var f_2x2_u : Matrix<Double,2, 1>  
/*
	// INVERSION
		f_2x2_inv = inverse(f_2x2)
f_2x2_inv = inverse(f_2x2)
f_2x2_inv = inverse(f_2x2)
f_2x2_inv = inverse(f_2x2)
f_2x2_inv = inverse(f_2x2)
f_2x2_inv = inverse(f_2x2)
f_2x2_inv = inverse(f_2x2)
f_2x2_inv = inverse(f_2x2)
f_2x2_inv = inverse(f_2x2)
f_2x2_inv = inverse(f_2x2)
	

	// INVERSION and solve
repeat 10 times {
	f_2x2_inv = inverse(f_2x2)
	f_2x2_u = f_2x2_inv * f_2x2_f
}
	
	// SYSTEM SOLVE
repeat 10 times {
	
	solveMatSys f_2x2, f_2x2_u, f_2x2_f 
}*/
/////////////// 3x3 filled ///////////////////////////////////////////////////////////////////////////////////////////
	Var f_3x3_inv : Matrix<Double,3 ,3> 
	Var f_3x3_f : Matrix<Double, 3, 1> = {{2},{5},{1}}
	Var f_3x3_u : Matrix<Double, 3, 1>  

	// INVERSION
/*
f_3x3_inv = inverse(f_3x3)
f_3x3_inv = inverse(f_3x3)
f_3x3_inv = inverse(f_3x3)
f_3x3_inv = inverse(f_3x3)
f_3x3_inv = inverse(f_3x3)
f_3x3_inv = inverse(f_3x3)
f_3x3_inv = inverse(f_3x3)
f_3x3_inv = inverse(f_3x3)
f_3x3_inv = inverse(f_3x3)
f_3x3_inv = inverse(f_3x3)
	
	// INVERSION and solve
	repeat 10 times {
	f_3x3_inv = inverse(f_3x3)
	f_3x3_u = f_3x3_inv * f_3x3_f
}
	// SYSTEM SOLVE
repeat 10 times {
		solveMatSys f_3x3, f_3x3_u, f_3x3_f 
}*/	
/////////////// 4x4 filled ///////////////////////////////////////////////////////////////////////////////////////////
	Var f_4x4_inv : Matrix<Double, 4 , 4> 
	Var f_4x4_f : Matrix<Double, 4, 1> = {{7},{2},{5},{1}}
	Var f_4x4_u : Matrix<Double, 4, 1>  

/*	// INVERSION
	f_4x4_inv = inverse(f_4x4, "shape=LU")
f_4x4_inv = inverse(f_4x4, "shape=LU")
	f_4x4_inv = inverse(f_4x4, "shape=LU")
	f_4x4_inv = inverse(f_4x4, "shape=LU")
	f_4x4_inv = inverse(f_4x4, "shape=LU")
	f_4x4_inv = inverse(f_4x4, "shape=LU")
	f_4x4_inv = inverse(f_4x4, "shape=LU")
	f_4x4_inv = inverse(f_4x4, "shape=LU")
	f_4x4_inv = inverse(f_4x4, "shape=LU")
	f_4x4_inv = inverse(f_4x4, "shape=LU")
	


	//f_4x4_inv = inverse(f_4x4, "shape=gaussJordan")

	//f_4x4_inv = inverse(f_4x4, "shape=cofactors")

	// INVERSION and solve
	repeat 10 times {
	f_4x4_inv = inverse(f_4x4)
	f_4x4_u = f_4x4_inv * f_4x4_f
}	
	// SYSTEM SOLVE
	repeat 10 times {
	solveMatSys f_4x4, f_4x4_u, f_4x4_f 
}*/	
/////////////// 5x5 filled ///////////////////////////////////////////////////////////////////////////////////////////
	Var f_5x5_inv : Matrix<Double,5 ,5> 
	Var f_5x5_f : Matrix<Double, 5, 1> = {{2},{5},{1},{3},{5}}
	Var f_5x5_u : Matrix<Double, 5, 1>  
	// INVERSION
/*
	//f_5x5_inv = inverse(f_5x5)
	//f_5x5_inv = inverse(f_5x5, "shape=gaussJordan")
	//f_5x5_inv = inverse(f_5x5, "shape=cofactors")
	f_5x5_inv = inverse(f_5x5, "shape=LU")
	f_5x5_inv = inverse(f_5x5, "shape=LU")
	f_5x5_inv = inverse(f_5x5, "shape=LU")
	f_5x5_inv = inverse(f_5x5, "shape=LU")
	f_5x5_inv = inverse(f_5x5, "shape=LU")
	f_5x5_inv = inverse(f_5x5, "shape=LU")
	f_5x5_inv = inverse(f_5x5, "shape=LU")
	f_5x5_inv = inverse(f_5x5, "shape=LU")
	f_5x5_inv = inverse(f_5x5, "shape=LU")
	f_5x5_inv = inverse(f_5x5, "shape=LU")

	// INVERSION and solve
	repeat 10 times {
	f_5x5_inv = inverse(f_5x5)
	f_5x5_u = f_5x5_inv * f_5x5_f
}	
	// SYSTEM SOLVE
	repeat 10 times {
	solveMatSys f_5x5, f_5x5_u, f_5x5_f 
}*/	

//////////////// 6x6  filled ///////////////////////////////////////////////////////////////////////////////////////////

	Var f_6x6_inv : Matrix<Double, 6 , 6> 
	Var f_6x6_f : Matrix<Double, 6, 1> = {{2},{5},{1},{6},{5},{9}}
	Var f_6x6_u : Matrix<Double, 6, 1> 

	// INVERSION

	f_6x6_inv = inverse(f_6x6)
f_6x6_inv = inverse(f_6x6)
f_6x6_inv = inverse(f_6x6)
f_6x6_inv = inverse(f_6x6)
f_6x6_inv = inverse(f_6x6)
f_6x6_inv = inverse(f_6x6)
f_6x6_inv = inverse(f_6x6)
f_6x6_inv = inverse(f_6x6)
f_6x6_inv = inverse(f_6x6)
f_6x6_inv = inverse(f_6x6)


/*
	// INVERSION and solve
	repeat 10 times {
	f_6x6_inv = inverse(f_6x6)
	f_6x6_u = f_6x6_inv * f_6x6_f
}
	// SYSTEM SOLVE
	repeat 10 times {
	solveMatSys f_6x6, f_6x6_u, f_6x6_f 
}*/
//////////////// 7x7  filled ///////////////////////////////////////////////////////////////////////////////////////////

	Var f_7x7_inv : Matrix<Double, 7 , 7> 
	Var f_7x7_f : Matrix<Double, 7, 1> = {{2},{5},{1},{6},{5},{9},{2}}
	Var f_7x7_u : Matrix<Double, 7, 1> 
/*
	// INVERSION
	repeat 10 times {
	f_7x7_inv = inverse(f_7x7)
}	
	// INVERSION and solve
	repeat 10 times {
	f_7x7_inv = inverse(f_7x7)
	f_7x7_u = f_7x7_inv * f_7x7_f
}	
	// SYSTEM SOLVE
	repeat 10 times {
	solveMatSys f_7x7, f_7x7_u, f_7x7_f 
}
*/
}