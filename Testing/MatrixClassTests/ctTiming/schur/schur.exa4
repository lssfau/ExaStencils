
Domain global< [ 0, 0 ] to [ 0.1, 0.1 ] >

Globals {
	
}

/// main function

Function Application ( ) : Unit {

//////////////////////////////////// INPUT MATRICES ////////////////////////////////////
Var sr_3x3 : Matrix<Double,3 ,3>
sr_3x3 = {
{
0.6400925116697155, 0.0, 0.2627888149257168 },
{
0.0, 0.3311055892995445, 0.45419973970469507 },
{
0.26312033353122866, 0.9068718332411839, 0.8141321048316564 }
}
Var sr_4x4 : Matrix<Double, 4, 4>
sr_4x4  = 
{
{
0.9189462067528664, 0.0, 0.0, 0.14424947157081902 },
{
0.0, 0.19381819445086879, 0.0, 0.6851943895516579 },
{
0.0, 0.0, 0.4481600388228697, 0.9110750747894159 },
{
0.23206385242743388, 0.06810379672065581, 0.7098700426109092, 0.2241280094046907 }
}

Var sr_4x4_2 : Matrix<Double, 4, 4>
sr_4x4_2 = 
{
{
0.3835926411670303, 0.0, 0.9339546665420072, 0.4142167290773838 },
{
0.0, 0.9168675160624042, 0.0977225779661407, 0.44990598003814175 },
{
0.7343345893365987, 0.22665890721501591, 0.3660074126518361, 0.33601577676803285 },
{
0.7341503760053119, 0.4419963527898749, 0.6153402691555747, 0.08984652402124749 }
}
Var sr_5x5_2 : Matrix<Double, 5, 5>
sr_5x5_2  = 
{
{
0.20922803231795384, 0.0, 0.0, 0.7438014740835229, 0.32202787321184356 },
{
0.0, 0.9828054341747103, 0.0, 0.13414948789727332, 0.9141753908613758 },
{
0.0, 0.0, 0.4304168298493969, 0.9428799830308159, 0.46006752178886834 },
{
0.890827843111702, 0.7144627972560549, 0.5968170704088582, 0.5550700235891494, 0.17651764654898727 },
{
0.984882406339192, 0.6158917062857, 0.3140827830266386, 0.3741573543429165, 0.7699110400404342 }
}
		Var sr_5x5_2x2 : Matrix<Double, 5, 5>
sr_5x5_2x2 = 
{
{
0.3065711388809941, 0.47137998188105257, 0.0, 0.0, 0.27101525004140226 },
{
0.9641405435868464, 0.7570183996539743, 0.0, 0.0, 0.22688067181901583 },
{
0.0, 0.0, 0.4238504932167587, 0.7706625419140906, 0.36918811028005805 },
{
0.0, 0.0, 0.9699751992306563, 0.5182492791978986, 0.5543392014863642 },
{
0.5810515353357922, 0.4249682573618744, 0.5685973309890656, 0.23203626116460163, 0.23632256878020275 }
}
Var sr_5x5 : Matrix<Double, 5, 5> 
sr_5x5= 
{
{
0.036479705501443305, 0.0, 0.0, 0.0, 0.39785927501956997 },
{
0.0, 0.9063755860263423, 0.0, 0.0, 0.9932780577994703 },
{
0.0, 0.0, 0.43420119793273837, 0.0, 0.04331737967455629 },
{
0.0, 0.0, 0.0, 0.32905992848225996, 0.5637163327321368 },
{
0.39172489089088736, 0.7685230137536988, 0.0495691711173496, 0.988586141132244, 0.6454136246005879 }
}
Var sr_6x6_2 : Matrix<Double, 6, 6> 
sr_6x6_2= 
{
{
0.4308041115615385, 0.0, 0.0, 0.0, 0.8999564284249749, 0.6837897396692416 },
{
0.0, 0.8812852425957229, 0.0, 0.0, 0.018251299316581204, 0.7963338734697352 },
{
0.0, 0.0, 0.12561706821056484, 0.0, 0.7315567552359123, 0.8393091506827227 },
{
0.0, 0.0, 0.0, 0.3045573769649935, 0.7494226805172914, 0.3901561717614719 },
{
0.09443637001809557, 0.24759367636005358, 0.5590423057983972, 0.4580226611297431, 0.39490613781157813, 0.46017463986981166 },
{
0.2849284322539548, 0.37345509963907175, 0.39305418787054613, 0.2818911331023648, 0.4850056092514827, 0.8212141245175105 }
}
Var sr_6x6_2x2_2 : Matrix<Double, 6, 6> 
sr_6x6_2x2_2 = 
{
{
0.4479253046624946, 0.44337619189009825, 0.0, 0.0, 0.053482387963277755, 0.940776293093027 },
{
0.607000796462533, 0.7794432081043519, 0.0, 0.0, 0.08198975860810576, 0.46386458882357673 },
{
0.0, 0.0, 0.18780305127426666, 0.10036475923495447, 0.7341425355481338, 0.254378449973344 },
{
0.0, 0.0, 0.2267014915591452, 0.42750475463053483, 0.7144449059831273, 0.11509217161981933 },
{
0.41602762347826694, 0.8119258112306077, 0.9980766819136695, 0.48849248169126636, 0.7609070491933756, 0.5700630864044539 },
{
0.008354404234215629, 0.7495444583746197, 0.7437668821814407, 0.6636320381133511, 0.2871346951266073, 0.9091834523655659 }
}
Var sr_6x6 : Matrix<Double, 6, 6>
sr_6x6 = 
{
{
0.25974734847967285, 0.0, 0.0, 0.0, 0.0, 0.9073117603571845 },
{
0.0, 0.216858548442325, 0.0, 0.0, 0.0, 0.9156455109972113 },
{
0.0, 0.0, 0.24770172250332412, 0.0, 0.0, 0.7016820829956404 },
{
0.0, 0.0, 0.0, 0.23252018928102636, 0.0, 0.9474533689881167 },
{
0.0, 0.0, 0.0, 0.0, 0.5106601285017516, 0.372184929637312 },
{
0.6368569242587503, 0.2641081649064907, 0.8838497770378833, 0.32896979849915453, 0.5653157241542246, 0.062134307772364394 }
}
	Var sr_7x7 : Matrix<Double, 7, 7> 
sr_7x7= {
{
0.48177931738600377, 0.0, 0.0, 0.0, 0.0, 0.0, 0.3305098868484484 },
{
0.0, 0.535298746906977, 0.0, 0.0, 0.0, 0.0, 0.46634940303980466 },
{
0.0, 0.0, 0.64701464125667, 0.0, 0.0, 0.0, 0.2637415765143547 },
{
0.0, 0.0, 0.0, 0.7936528202120418, 0.0, 0.0, 0.3820966918188752 },
{
0.0, 0.0, 0.0, 0.0, 0.8757686520208419, 0.0, 0.17249147221861794 },
{
0.0, 0.0, 0.0, 0.0, 0.0, 0.7441457340530452, 0.27912549254250074 },
{
0.6867841748082819, 0.07866213728049898, 0.0682765555041277, 0.5478917299689156, 0.9470913208812639, 0.6719520851383362, 0.29147773218536277 }
}

	Var sr_7x7_2x2 : Matrix<Double, 7, 7> 
sr_7x7_2x2= {
{
0.9742630108992758, 0.3896554607515246, 0.0, 0.0, 0.0, 0.0, 0.708954859056676 },
{
0.8583069197822313, 0.7676145486923681, 0.0, 0.0, 0.0, 0.0, 0.9405765182427863 },
{
0.0, 0.0, 0.4231598245552223, 0.22032122959294598, 0.0, 0.0, 0.27323113403368504 },
{
0.0, 0.0, 0.4527148190745256, 0.3855320368656294, 0.0, 0.0, 0.09573287149820575 },
{
0.0, 0.0, 0.0, 0.0, 0.15334020878784893, 0.41271887996881607, 0.444462690402153 },
{
0.0, 0.0, 0.0, 0.0, 0.5877125733945704, 0.5826512586683583, 0.6007961377406694 },
{
0.22708145374963717, 0.5852080381806556, 0.8554674537777677, 0.05194934011368724, 0.7917809687783385, 0.563884109154678, 0.47250277531700513 }
}

	Var sr_7x7_3x3 : Matrix<Double, 7, 7>
sr_7x7_3x3  = {
{
0.748621487260385, 0.3221317907812754, 0.6706183280204606, 0.0, 0.0, 0.0, 0.80618062732355 },
{
0.21837185302680207, 0.4492603149618831, 0.7045970297392246, 0.0, 0.0, 0.0, 0.6882324541114411 },
{
0.7010326993238524, 0.47478967360114455, 0.9016077297042252, 0.0, 0.0, 0.0, 0.07510232399652794 },
{
0.0, 0.0, 0.0, 0.4182193187320925, 0.9980383092215537, 0.9582933750059631, 0.6325703158775556 },
{
0.0, 0.0, 0.0, 0.37791354320824433, 0.7517799650619362, 0.20305033628953206, 0.9710177394541102 },
{
0.0, 0.0, 0.0, 0.00758501645723253, 0.3528708711604923, 0.3740212915653027, 0.4363161418280709 },
{
0.8270553248310906, 0.29706246003212466, 0.7586419937898451, 0.7395960685600746, 0.9665770096521105, 0.30429283172839483, 0.5703991235561693 }
}
/////////////////////////////////////// MEASURE ///////////////////////////////////////////////////



/////////////// 3x3 schur ///////////////////////////////////////////////////////////////////////////////////////////

	Var sr_3x3_inv : Matrix<Double, 3, 3> 
	Var sr_3x3_f : Matrix<Double, 3, 1> = {{2},{5},{1}}
	Var sr_3x3_u : Matrix<Double, 3, 1> 

	// INVERSION
	sr_3x3_inv = inverse(sr_3x3, "shape=schur", "block=2","A=diagonal")
sr_3x3_inv = inverse(sr_3x3, "shape=schur", "block=2","A=diagonal")
sr_3x3_inv = inverse(sr_3x3, "shape=schur", "block=2","A=diagonal")
sr_3x3_inv = inverse(sr_3x3, "shape=schur", "block=2","A=diagonal")
sr_3x3_inv = inverse(sr_3x3, "shape=schur", "block=2","A=diagonal")
sr_3x3_inv = inverse(sr_3x3, "shape=schur", "block=2","A=diagonal")
sr_3x3_inv = inverse(sr_3x3, "shape=schur", "block=2","A=diagonal")
sr_3x3_inv = inverse(sr_3x3, "shape=schur", "block=2","A=diagonal")
sr_3x3_inv = inverse(sr_3x3, "shape=schur", "block=2","A=diagonal")

sr_3x3_inv = inverse(sr_3x3, "shape=schur", "block=2","A=diagonal")
/*	
	// Solve by inversion
		sr_3x3_inv = inverse(sr_3x3, "shape=schur", "block=2","A=diagonal")
		sr_3x3_u = sr_3x3_inv * sr_3x3_f

	// SYSTEM SOLVE
		solveMatSys sr_3x3, sr_3x3_u, sr_3x3_f {shape=schur,block=2, A=diagonal}
*/
/////////////// 4x4 schur ///////////////////////////////////////////////////////////////////////////////////////////

	Var sr_4x4_inv : Matrix<Double, 4, 4> 
	Var sr_4x4_f : Matrix<Double, 4, 1> = {{7},{2},{5},{1}}
	Var sr_4x4_u : Matrix<Double, 4, 1> 
/*
	// INVERSION
	sr_4x4_inv = inverse(sr_4x4, "shape=schur", "block=3","A=diagonal")
sr_4x4_inv = inverse(sr_4x4, "shape=schur", "block=3","A=diagonal")
sr_4x4_inv = inverse(sr_4x4, "shape=schur", "block=3","A=diagonal")
sr_4x4_inv = inverse(sr_4x4, "shape=schur", "block=3","A=diagonal")
sr_4x4_inv = inverse(sr_4x4, "shape=schur", "block=3","A=diagonal")
sr_4x4_inv = inverse(sr_4x4, "shape=schur", "block=3","A=diagonal")
sr_4x4_inv = inverse(sr_4x4, "shape=schur", "block=3","A=diagonal")
sr_4x4_inv = inverse(sr_4x4, "shape=schur", "block=3","A=diagonal")
sr_4x4_inv = inverse(sr_4x4, "shape=schur", "block=3","A=diagonal")
sr_4x4_inv = inverse(sr_4x4, "shape=schur", "block=3","A=diagonal")

	
	// Solve by inversion
	sr_4x4_inv = inverse(sr_4x4, "shape=schur", "block=3","A=diagonal")
	sr_4x4_u = sr_4x4_inv * sr_4x4_f

	// SYSTEM SOLVE
	solveMatSys sr_4x4, sr_4x4_u, sr_4x4_f {shape=schur,block=3, A=diagonal}
*/
/////////////// 4x4_2 schur ///////////////////////////////////////////////////////////////////////////////////////////

	Var sr_4x4_2_inv : Matrix<Double, 4, 4> 
/*
	// INVERSION
	sr_4x4_2_inv = inverse(sr_4x4_2, "shape=schur", "block=2","A=diagonal")
sr_4x4_2_inv = inverse(sr_4x4_2, "shape=schur", "block=2","A=diagonal")
sr_4x4_2_inv = inverse(sr_4x4_2, "shape=schur", "block=2","A=diagonal")
sr_4x4_2_inv = inverse(sr_4x4_2, "shape=schur", "block=2","A=diagonal")
sr_4x4_2_inv = inverse(sr_4x4_2, "shape=schur", "block=2","A=diagonal")
sr_4x4_2_inv = inverse(sr_4x4_2, "shape=schur", "block=2","A=diagonal")
sr_4x4_2_inv = inverse(sr_4x4_2, "shape=schur", "block=2","A=diagonal")
sr_4x4_2_inv = inverse(sr_4x4_2, "shape=schur", "block=2","A=diagonal")
sr_4x4_2_inv = inverse(sr_4x4_2, "shape=schur", "block=2","A=diagonal")
sr_4x4_2_inv = inverse(sr_4x4_2, "shape=schur", "block=2","A=diagonal")

	*/

//////////////// 5x5 schur ///////////////////////////////////////////////////////////////////////////////////////////

	Var sr_5x5_inv : Matrix<Double, 5 , 5> 
	Var sr_5x5_f : Matrix<Double, 5, 1> = {{5},{1},{6},{5},{9}}
	Var sr_5x5_u : Matrix<Double, 5, 1>  
/*
	// INVERSION
	sr_5x5_inv = inverse(sr_5x5, "shape=schur", "block=4", "A=diagonal")
sr_5x5_inv = inverse(sr_5x5, "shape=schur", "block=4", "A=diagonal")
sr_5x5_inv = inverse(sr_5x5, "shape=schur", "block=4", "A=diagonal")
sr_5x5_inv = inverse(sr_5x5, "shape=schur", "block=4", "A=diagonal")
sr_5x5_inv = inverse(sr_5x5, "shape=schur", "block=4", "A=diagonal")
sr_5x5_inv = inverse(sr_5x5, "shape=schur", "block=4", "A=diagonal")
sr_5x5_inv = inverse(sr_5x5, "shape=schur", "block=4", "A=diagonal")
sr_5x5_inv = inverse(sr_5x5, "shape=schur", "block=4", "A=diagonal")
sr_5x5_inv = inverse(sr_5x5, "shape=schur", "block=4", "A=diagonal")
sr_5x5_inv = inverse(sr_5x5, "shape=schur", "block=4", "A=diagonal")

	// Solve by inversion
	sr_5x5_inv = inverse(sr_5x5, "shape=schur", "block=4", "A=diagonal")
	sr_5x5_u = sr_5x5_inv * sr_5x5_f

	// SYSTEM SOLVE
	solveMatSys sr_5x5, sr_5x5_u, sr_5x5_f {shape=schur, block=4, A=diagonal}
*/
//////////////// 5x5_2 schur ///////////////////////////////////////////////////////////////////////////////////////////
/*
	Var sr_5x5_2_inv : Matrix<Double, 5 , 5> 
	
	// INVERSION
	sr_5x5_2_inv = inverse(sr_5x5_2, "shape=schur", "block=3", "A=diagonal")
sr_5x5_2_inv = inverse(sr_5x5_2, "shape=schur", "block=3", "A=diagonal")
sr_5x5_2_inv = inverse(sr_5x5_2, "shape=schur", "block=3", "A=diagonal")
sr_5x5_2_inv = inverse(sr_5x5_2, "shape=schur", "block=3", "A=diagonal")
sr_5x5_2_inv = inverse(sr_5x5_2, "shape=schur", "block=3", "A=diagonal")
sr_5x5_2_inv = inverse(sr_5x5_2, "shape=schur", "block=3", "A=diagonal")
sr_5x5_2_inv = inverse(sr_5x5_2, "shape=schur", "block=3", "A=diagonal")
sr_5x5_2_inv = inverse(sr_5x5_2, "shape=schur", "block=3", "A=diagonal")
sr_5x5_2_inv = inverse(sr_5x5_2, "shape=schur", "block=3", "A=diagonal")
sr_5x5_2_inv = inverse(sr_5x5_2, "shape=schur", "block=3", "A=diagonal")

*/
//////////////// 5x5  with 2x2 blocks schur ///////////////////////////////////////////////////////////////////////////////////////////

	Var sr_5x5_2x2_inv : Matrix<Double, 5 , 5> 
/*
	// INVERSION
	sr_5x5_2x2_inv = inverse(sr_5x5_2x2, "shape=schur", "block=4", "A=blockdiagonal","Ablock=2")
sr_5x5_2x2_inv = inverse(sr_5x5_2x2, "shape=schur", "block=4", "A=blockdiagonal","Ablock=2")
sr_5x5_2x2_inv = inverse(sr_5x5_2x2, "shape=schur", "block=4", "A=blockdiagonal","Ablock=2")
sr_5x5_2x2_inv = inverse(sr_5x5_2x2, "shape=schur", "block=4", "A=blockdiagonal","Ablock=2")
sr_5x5_2x2_inv = inverse(sr_5x5_2x2, "shape=schur", "block=4", "A=blockdiagonal","Ablock=2")
sr_5x5_2x2_inv = inverse(sr_5x5_2x2, "shape=schur", "block=4", "A=blockdiagonal","Ablock=2")
sr_5x5_2x2_inv = inverse(sr_5x5_2x2, "shape=schur", "block=4", "A=blockdiagonal","Ablock=2")
sr_5x5_2x2_inv = inverse(sr_5x5_2x2, "shape=schur", "block=4", "A=blockdiagonal","Ablock=2")
sr_5x5_2x2_inv = inverse(sr_5x5_2x2, "shape=schur", "block=4", "A=blockdiagonal","Ablock=2")
sr_5x5_2x2_inv = inverse(sr_5x5_2x2, "shape=schur", "block=4", "A=blockdiagonal","Ablock=2")

	// Solve by inversion
	sr_5x5_2x2_inv = inverse(sr_5x5_2x2, "shape=schur", "block=4", "A=blockdiagonal","Ablock=2")
	sr_5x5_u = sr_5x5_2x2_inv * sr_5x5_f

	// SYSTEM SOLVE
	solveMatSys sr_5x5_2x2, sr_5x5_u, sr_5x5_f {shape=schur, block=4, A=blockdiagonal, Ablock=2}
*/
//////////////// 6x6 schur ///////////////////////////////////////////////////////////////////////////////////////////

	Var sr_6x6_inv : Matrix<Double, 6, 6> 
	Var sr_6x6_f : Matrix<Double, 6, 1> = {{2},{5},{1},{6},{5},{9}}
	Var sr_6x6_u : Matrix<Double, 6, 1>  
/*
	// INVERSION
	sr_6x6_inv = inverse(sr_6x6, "shape=schur", "block=5", "A=diagonal")
sr_6x6_inv = inverse(sr_6x6, "shape=schur", "block=5", "A=diagonal")
sr_6x6_inv = inverse(sr_6x6, "shape=schur", "block=5", "A=diagonal")
sr_6x6_inv = inverse(sr_6x6, "shape=schur", "block=5", "A=diagonal")
sr_6x6_inv = inverse(sr_6x6, "shape=schur", "block=5", "A=diagonal")
sr_6x6_inv = inverse(sr_6x6, "shape=schur", "block=5", "A=diagonal")
sr_6x6_inv = inverse(sr_6x6, "shape=schur", "block=5", "A=diagonal")
sr_6x6_inv = inverse(sr_6x6, "shape=schur", "block=5", "A=diagonal")
sr_6x6_inv = inverse(sr_6x6, "shape=schur", "block=5", "A=diagonal")
sr_6x6_inv = inverse(sr_6x6, "shape=schur", "block=5", "A=diagonal")


	// Solve by inversion
	sr_6x6_inv = inverse(sr_6x6, "shape=schur", "block=5", "A=diagonal")
	sr_6x6_u = sr_6x6_inv * sr_6x6_f

	// SYSTEM SOLVE
	solveMatSys sr_6x6, sr_6x6_u, sr_6x6_f {shape=schur, block=5, A=diagonal}
*/
//////////////// 6x6_2 schur ///////////////////////////////////////////////////////////////////////////////////////////

	Var sr_6x6_2_inv : Matrix<Double, 6, 6> 
/*
	// INVERSION
	sr_6x6_2_inv = inverse(sr_6x6_2, "shape=schur", "block=4", "A=diagonal")
sr_6x6_2_inv = inverse(sr_6x6_2, "shape=schur", "block=4", "A=diagonal")
sr_6x6_2_inv = inverse(sr_6x6_2, "shape=schur", "block=4", "A=diagonal")
sr_6x6_2_inv = inverse(sr_6x6_2, "shape=schur", "block=4", "A=diagonal")
sr_6x6_2_inv = inverse(sr_6x6_2, "shape=schur", "block=4", "A=diagonal")
sr_6x6_2_inv = inverse(sr_6x6_2, "shape=schur", "block=4", "A=diagonal")
sr_6x6_2_inv = inverse(sr_6x6_2, "shape=schur", "block=4", "A=diagonal")
sr_6x6_2_inv = inverse(sr_6x6_2, "shape=schur", "block=4", "A=diagonal")
sr_6x6_2_inv = inverse(sr_6x6_2, "shape=schur", "block=4", "A=diagonal")
sr_6x6_2_inv = inverse(sr_6x6_2, "shape=schur", "block=4", "A=diagonal")
*/




//////////////// 6x6_2x2_2 schur ///////////////////////////////////////////////////////////////////////////////////////////

	Var sr_6x6_2x2_2_inv : Matrix<Double, 6, 6> 
/*
	// INVERSION
	sr_6x6_2x2_2_inv = inverse(sr_6x6_2x2_2, "shape=schur", "block=4", "A=blockdiagonal", "Ablock=2")
sr_6x6_2x2_2_inv = inverse(sr_6x6_2x2_2, "shape=schur", "block=4", "A=blockdiagonal", "Ablock=2")
sr_6x6_2x2_2_inv = inverse(sr_6x6_2x2_2, "shape=schur", "block=4", "A=blockdiagonal", "Ablock=2")
sr_6x6_2x2_2_inv = inverse(sr_6x6_2x2_2, "shape=schur", "block=4", "A=blockdiagonal", "Ablock=2")
sr_6x6_2x2_2_inv = inverse(sr_6x6_2x2_2, "shape=schur", "block=4", "A=blockdiagonal", "Ablock=2")
sr_6x6_2x2_2_inv = inverse(sr_6x6_2x2_2, "shape=schur", "block=4", "A=blockdiagonal", "Ablock=2")
sr_6x6_2x2_2_inv = inverse(sr_6x6_2x2_2, "shape=schur", "block=4", "A=blockdiagonal", "Ablock=2")
sr_6x6_2x2_2_inv = inverse(sr_6x6_2x2_2, "shape=schur", "block=4", "A=blockdiagonal", "Ablock=2")
sr_6x6_2x2_2_inv = inverse(sr_6x6_2x2_2, "shape=schur", "block=4", "A=blockdiagonal", "Ablock=2")
sr_6x6_2x2_2_inv = inverse(sr_6x6_2x2_2, "shape=schur", "block=4", "A=blockdiagonal", "Ablock=2")
*/

//////////////// 7x7  schur ///////////////////////////////////////////////////////////////////////////////////////////

	Var sr_7x7_inv : Matrix<Double, 7 , 7> 
	Var sr_7x7_f : Matrix<Double, 7, 1> = {{1},{3},{5},{1},{6},{5},{9}}
	Var sr_7x7_u : Matrix<Double, 7, 1>  
/*
	// INVERSION
	sr_7x7_inv = inverse(sr_7x7, "shape=schur", "block=6", "A=diagonal")
sr_7x7_inv = inverse(sr_7x7, "shape=schur", "block=6", "A=diagonal")
sr_7x7_inv = inverse(sr_7x7, "shape=schur", "block=6", "A=diagonal")
sr_7x7_inv = inverse(sr_7x7, "shape=schur", "block=6", "A=diagonal")
sr_7x7_inv = inverse(sr_7x7, "shape=schur", "block=6", "A=diagonal")
sr_7x7_inv = inverse(sr_7x7, "shape=schur", "block=6", "A=diagonal")
sr_7x7_inv = inverse(sr_7x7, "shape=schur", "block=6", "A=diagonal")
sr_7x7_inv = inverse(sr_7x7, "shape=schur", "block=6", "A=diagonal")
sr_7x7_inv = inverse(sr_7x7, "shape=schur", "block=6", "A=diagonal")
sr_7x7_inv = inverse(sr_7x7, "shape=schur", "block=6", "A=diagonal")
sr_7x7_inv = inverse(sr_7x7, "shape=schur", "block=6", "A=diagonal")
	
	// Solve by inversion
	sr_7x7_inv = inverse(sr_7x7, "shape=schur", "block=6", "A=diagonal")
	sr_7x7_u = sr_7x7_inv * sr_7x7_f
	
	// SYSTEM SOLVE
	solveMatSys sr_7x7, sr_7x7_u, sr_7x7_f {shape=schur, block=6, A=diagonal}
*/	
//////////////// 7x7  with 2x2 blocks schur ///////////////////////////////////////////////////////////////////////////////////////////

	Var sr_7x7_2x2_inv : Matrix<Double, 7 , 7> 
	
	// INVERSION
/*	sr_7x7_2x2_inv = inverse(sr_7x7_2x2, "shape=schur", "block=6", "A=blockdiagonal","Ablock=2")

	// Solve by inversion
	sr_7x7_2x2_inv = inverse(sr_7x7_2x2, "shape=schur", "block=6", "A=blockdiagonal","Ablock=2")
	sr_7x7_u = sr_7x7_2x2_inv * sr_7x7_f
	
	// SYSTEM SOLVE
	solveMatSys sr_7x7_2x2, sr_7x7_u, sr_7x7_f {shape=schur, block=6, A=blockdiagonal,Ablock=2}
*/	
//////////////// 7x7  with 3x3 blocks schur ///////////////////////////////////////////////////////////////////////////////////////////

	Var sr_7x7_3x3_inv : Matrix<Double, 7 , 7> 	
	// INVERSION
/*	sr_7x7_3x3_inv = inverse(sr_7x7_3x3, "shape=schur", "block=6", "A=blockdiagonal","Ablock=3")

	// Solve by inversion
	sr_7x7_3x3_inv = inverse(sr_7x7_3x3, "shape=schur", "block=6", "A=blockdiagonal","Ablock=3")
	sr_7x7_u = sr_7x7_3x3_inv * sr_7x7_f
	
	// SYSTEM SOLVE
	solveMatSys sr_7x7_3x3, sr_7x7_u, sr_7x7_f {shape=schur, block=6, A=blockdiagonal,Ablock=3}
*/

}