// domain declarations

// field layout declarations

// field declarations

// field combinations

// external field declarations

// stencil declarations

// stencil field declarations

// equations declarations

Domain global< [0.0, 0.0] to [1000.0, 1000.0] >

Globals {
	Var dt : Real = 0.01
	Var t : Real = 0
	Expr tMax = 1500
	Expr g = 0.16
	Expr printInterval = 100
	Var print_count : Integer = 0
	Var it : Integer = 0
	Var errceta@4 : Real = 0
	Var errcu@4 : Real = 0
	Var errcv@4 : Real = 0
}

Function InitTriInfo@all {
	
}

Function InitBath@all {
	loop over bath starting [-1, -1] ending [-1, -1] {
		bath = ( ( ( 0.001 * vf_nodePosition_0@[0, 0] ) + ( 0.002 * vf_nodePosition_1@[0, 0] ) ) + 15.0 )
	}
	communicate bath
}

Function CheckGrid@all {
	
}

Function InitFieldsAnalytical@all {
	startTimer ( "InitFieldsAnalytical" )
	loop over cetaLower0 {
		cetaLower0 = ( ( 31.25 * 1.4142135623731 ) * ( ( ( ( -0.133333333333333 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 0] ) ) ) ) ) - ( 0.133333333333333 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 1] ) ) ) ) ) ) - ( 0.133333333333333 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 0] ) ) ) ) ) ) + 2.3 ) )
		cetaLower1 = ( ( ( -2.08333333333333 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 0] ) ) ) ) ) - ( 2.08333333333333 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 1] ) ) ) ) ) ) + ( 4.16666666666667 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 0] ) ) ) ) ) )
		cetaLower2 = ( ( -5.20833333333333 * 1.73205080756888 ) * ( ( 0.4 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 0] ) ) ) ) ) - ( 0.4 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 1] ) ) ) ) ) ) )
		cuLower0 = ( ( 31.25 * 1.4142135623731 ) * ( ( ( ( 0.0133333333333333 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 0] ) ) ) ) ) + ( 0.0133333333333333 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 1] ) ) ) ) ) ) + ( 0.0133333333333333 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 0] ) ) ) ) ) ) + 0.6 ) )
		cuLower1 = ( ( ( 0.208333333333333 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 0] ) ) ) ) ) + ( 0.208333333333333 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 1] ) ) ) ) ) ) - ( 0.416666666666667 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 0] ) ) ) ) ) )
		cuLower2 = ( ( -5.20833333333333 * 1.73205080756888 ) * ( ( -0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 0] ) ) ) ) ) + ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 1] ) ) ) ) ) ) )
		cvLower0 = ( ( 31.25 * 1.4142135623731 ) * ( ( ( ( 0.0133333333333333 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 0] ) ) ) ) ) + ( 0.0133333333333333 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 1] ) ) ) ) ) ) + ( 0.0133333333333333 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 0] ) ) ) ) ) ) + 0.3 ) )
		cvLower1 = ( ( ( 0.208333333333333 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 0] ) ) ) ) ) + ( 0.208333333333333 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 1] ) ) ) ) ) ) - ( 0.416666666666667 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 0] ) ) ) ) ) )
		cvLower2 = ( ( -5.20833333333333 * 1.73205080756888 ) * ( ( -0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 0] ) ) ) ) ) + ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 1] ) ) ) ) ) ) )
		cetaUpper0 = ( ( 31.25 * 1.4142135623731 ) * ( ( ( ( -0.133333333333333 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 1] ) ) ) ) ) - ( 0.133333333333333 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 0] ) ) ) ) ) ) - ( 0.133333333333333 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 1] ) ) ) ) ) ) + 2.3 ) )
		cetaUpper1 = ( ( ( 4.16666666666667 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 1] ) ) ) ) ) - ( 2.08333333333333 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 0] ) ) ) ) ) ) - ( 2.08333333333333 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 1] ) ) ) ) ) )
		cetaUpper2 = ( ( -5.20833333333333 * 1.73205080756888 ) * ( ( -0.4 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 0] ) ) ) ) ) + ( 0.4 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 1] ) ) ) ) ) ) )
		cuUpper0 = ( ( 31.25 * 1.4142135623731 ) * ( ( ( ( 0.0133333333333333 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 1] ) ) ) ) ) + ( 0.0133333333333333 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 0] ) ) ) ) ) ) + ( 0.0133333333333333 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 1] ) ) ) ) ) ) + 0.6 ) )
		cuUpper1 = ( ( ( -0.416666666666667 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 1] ) ) ) ) ) + ( 0.208333333333333 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 0] ) ) ) ) ) ) + ( 0.208333333333333 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 1] ) ) ) ) ) )
		cuUpper2 = ( ( -5.20833333333333 * 1.73205080756888 ) * ( ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 0] ) ) ) ) ) - ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 1] ) ) ) ) ) ) )
		cvUpper0 = ( ( 31.25 * 1.4142135623731 ) * ( ( ( ( 0.0133333333333333 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 1] ) ) ) ) ) + ( 0.0133333333333333 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 0] ) ) ) ) ) ) + ( 0.0133333333333333 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 1] ) ) ) ) ) ) + 0.3 ) )
		cvUpper1 = ( ( ( -0.416666666666667 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 1] ) ) ) ) ) + ( 0.208333333333333 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 0] ) ) ) ) ) ) + ( 0.208333333333333 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 1] ) ) ) ) ) )
		cvUpper2 = ( ( -5.20833333333333 * 1.73205080756888 ) * ( ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 0] ) ) ) ) ) - ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 1] ) ) ) ) ) ) )
	}
	stopTimer ( "InitFieldsAnalytical" )
}

Function UpdateCTilde@all {
	startTimer ( "UpdateCTilde" )
	loop over cuTildeLower0 {
		solve locally {
			cuTildeLower0 => ( ( ( cuTildeLower0 * ( ( ( ( 0.333333333333333 * bath@[0, 0] ) + ( 0.333333333333333 * bath@[0, 1] ) ) + ( 0.333333333333333 * bath@[1, 0] ) ) + ( ( 0.016 * 1.4142135623731 ) * cetaLower0 ) ) ) + ( cuTildeLower1 * ( ( ( ( ( 0.0833333333333333 * 1.4142135623731 ) * bath@[0, 0] ) + ( ( 0.0833333333333333 * 1.4142135623731 ) * bath@[0, 1] ) ) - ( ( 0.166666666666667 * 1.4142135623731 ) * bath@[1, 0] ) ) + ( ( 0.016 * 1.4142135623731 ) * cetaLower1 ) ) ) ) + ( cuTildeLower2 * ( ( ( ( 0.0833333333333333 * 2.44948974278318 ) * bath@[0, 0] ) - ( ( 0.0833333333333333 * 2.44948974278318 ) * bath@[0, 1] ) ) + ( ( 0.016 * 1.4142135623731 ) * cetaLower2 ) ) ) ) == cuLower0
			cuTildeLower1 => ( ( ( cuTildeLower0 * ( ( ( ( ( 0.0833333333333333 * 1.4142135623731 ) * bath@[0, 0] ) + ( ( 0.0833333333333333 * 1.4142135623731 ) * bath@[0, 1] ) ) - ( ( 0.166666666666667 * 1.4142135623731 ) * bath@[1, 0] ) ) + ( ( 0.016 * 1.4142135623731 ) * cetaLower1 ) ) ) + ( cuTildeLower1 * ( ( ( ( ( 0.266666666666667 * bath@[0, 0] ) + ( 0.266666666666667 * bath@[0, 1] ) ) + ( 0.466666666666667 * bath@[1, 0] ) ) + ( ( 0.016 * 1.4142135623731 ) * cetaLower0 ) ) - ( 0.0128 * cetaLower1 ) ) ) ) + ( cuTildeLower2 * ( ( ( ( 0.0666666666666667 * 1.73205080756888 ) * bath@[0, 0] ) - ( ( 0.0666666666666667 * 1.73205080756888 ) * bath@[0, 1] ) ) + ( 0.0128 * cetaLower2 ) ) ) ) == cuLower1
			cuTildeLower2 => ( ( ( cuTildeLower0 * ( ( ( ( 0.0833333333333333 * 2.44948974278318 ) * bath@[0, 0] ) - ( ( 0.0833333333333333 * 2.44948974278318 ) * bath@[0, 1] ) ) + ( ( 0.016 * 1.4142135623731 ) * cetaLower2 ) ) ) + ( cuTildeLower1 * ( ( ( ( 0.0666666666666667 * 1.73205080756888 ) * bath@[0, 0] ) - ( ( 0.0666666666666667 * 1.73205080756888 ) * bath@[0, 1] ) ) + ( 0.0128 * cetaLower2 ) ) ) ) + ( cuTildeLower2 * ( ( ( ( ( 0.4 * bath@[0, 0] ) + ( 0.4 * bath@[0, 1] ) ) + ( 0.2 * bath@[1, 0] ) ) + ( ( 0.016 * 1.4142135623731 ) * cetaLower0 ) ) + ( 0.0128 * cetaLower1 ) ) ) ) == cuLower2
		}
		solve locally {
			cuTildeUpper0 => ( ( ( cuTildeUpper0 * ( ( ( ( 0.333333333333333 * bath@[0, 1] ) + ( 0.333333333333333 * bath@[1, 0] ) ) + ( 0.333333333333333 * bath@[1, 1] ) ) + ( ( 0.016 * 1.4142135623731 ) * cetaUpper0 ) ) ) + ( cuTildeUpper1 * ( ( ( ( ( -0.166666666666667 * 1.4142135623731 ) * bath@[0, 1] ) + ( ( 0.0833333333333333 * 1.4142135623731 ) * bath@[1, 0] ) ) + ( ( 0.0833333333333333 * 1.4142135623731 ) * bath@[1, 1] ) ) + ( ( 0.016 * 1.4142135623731 ) * cetaUpper1 ) ) ) ) + ( cuTildeUpper2 * ( ( ( ( -0.0833333333333333 * 2.44948974278318 ) * bath@[1, 0] ) + ( ( 0.0833333333333333 * 2.44948974278318 ) * bath@[1, 1] ) ) + ( ( 0.016 * 1.4142135623731 ) * cetaUpper2 ) ) ) ) == cuUpper0
			cuTildeUpper1 => ( ( ( cuTildeUpper0 * ( ( ( ( ( -0.166666666666667 * 1.4142135623731 ) * bath@[0, 1] ) + ( ( 0.0833333333333333 * 1.4142135623731 ) * bath@[1, 0] ) ) + ( ( 0.0833333333333333 * 1.4142135623731 ) * bath@[1, 1] ) ) + ( ( 0.016 * 1.4142135623731 ) * cetaUpper1 ) ) ) + ( cuTildeUpper1 * ( ( ( ( ( 0.466666666666667 * bath@[0, 1] ) + ( 0.266666666666667 * bath@[1, 0] ) ) + ( 0.266666666666667 * bath@[1, 1] ) ) + ( ( 0.016 * 1.4142135623731 ) * cetaUpper0 ) ) - ( 0.0128 * cetaUpper1 ) ) ) ) + ( cuTildeUpper2 * ( ( ( ( -0.0666666666666667 * 1.73205080756888 ) * bath@[1, 0] ) + ( ( 0.0666666666666667 * 1.73205080756888 ) * bath@[1, 1] ) ) + ( 0.0128 * cetaUpper2 ) ) ) ) == cuUpper1
			cuTildeUpper2 => ( ( ( cuTildeUpper0 * ( ( ( ( -0.0833333333333333 * 2.44948974278318 ) * bath@[1, 0] ) + ( ( 0.0833333333333333 * 2.44948974278318 ) * bath@[1, 1] ) ) + ( ( 0.016 * 1.4142135623731 ) * cetaUpper2 ) ) ) + ( cuTildeUpper1 * ( ( ( ( -0.0666666666666667 * 1.73205080756888 ) * bath@[1, 0] ) + ( ( 0.0666666666666667 * 1.73205080756888 ) * bath@[1, 1] ) ) + ( 0.0128 * cetaUpper2 ) ) ) ) + ( cuTildeUpper2 * ( ( ( ( ( 0.2 * bath@[0, 1] ) + ( 0.4 * bath@[1, 0] ) ) + ( 0.4 * bath@[1, 1] ) ) + ( ( 0.016 * 1.4142135623731 ) * cetaUpper0 ) ) + ( 0.0128 * cetaUpper1 ) ) ) ) == cuUpper2
		}
	}
	loop over cvTildeLower0 {
		solve locally {
			cvTildeLower0 => ( ( ( cvTildeLower0 * ( ( ( ( 0.333333333333333 * bath@[0, 0] ) + ( 0.333333333333333 * bath@[0, 1] ) ) + ( 0.333333333333333 * bath@[1, 0] ) ) + ( ( 0.016 * 1.4142135623731 ) * cetaLower0 ) ) ) + ( cvTildeLower1 * ( ( ( ( ( 0.0833333333333333 * 1.4142135623731 ) * bath@[0, 0] ) + ( ( 0.0833333333333333 * 1.4142135623731 ) * bath@[0, 1] ) ) - ( ( 0.166666666666667 * 1.4142135623731 ) * bath@[1, 0] ) ) + ( ( 0.016 * 1.4142135623731 ) * cetaLower1 ) ) ) ) + ( cvTildeLower2 * ( ( ( ( 0.0833333333333333 * 2.44948974278318 ) * bath@[0, 0] ) - ( ( 0.0833333333333333 * 2.44948974278318 ) * bath@[0, 1] ) ) + ( ( 0.016 * 1.4142135623731 ) * cetaLower2 ) ) ) ) == cvLower0
			cvTildeLower1 => ( ( ( cvTildeLower0 * ( ( ( ( ( 0.0833333333333333 * 1.4142135623731 ) * bath@[0, 0] ) + ( ( 0.0833333333333333 * 1.4142135623731 ) * bath@[0, 1] ) ) - ( ( 0.166666666666667 * 1.4142135623731 ) * bath@[1, 0] ) ) + ( ( 0.016 * 1.4142135623731 ) * cetaLower1 ) ) ) + ( cvTildeLower1 * ( ( ( ( ( 0.266666666666667 * bath@[0, 0] ) + ( 0.266666666666667 * bath@[0, 1] ) ) + ( 0.466666666666667 * bath@[1, 0] ) ) + ( ( 0.016 * 1.4142135623731 ) * cetaLower0 ) ) - ( 0.0128 * cetaLower1 ) ) ) ) + ( cvTildeLower2 * ( ( ( ( 0.0666666666666667 * 1.73205080756888 ) * bath@[0, 0] ) - ( ( 0.0666666666666667 * 1.73205080756888 ) * bath@[0, 1] ) ) + ( 0.0128 * cetaLower2 ) ) ) ) == cvLower1
			cvTildeLower2 => ( ( ( cvTildeLower0 * ( ( ( ( 0.0833333333333333 * 2.44948974278318 ) * bath@[0, 0] ) - ( ( 0.0833333333333333 * 2.44948974278318 ) * bath@[0, 1] ) ) + ( ( 0.016 * 1.4142135623731 ) * cetaLower2 ) ) ) + ( cvTildeLower1 * ( ( ( ( 0.0666666666666667 * 1.73205080756888 ) * bath@[0, 0] ) - ( ( 0.0666666666666667 * 1.73205080756888 ) * bath@[0, 1] ) ) + ( 0.0128 * cetaLower2 ) ) ) ) + ( cvTildeLower2 * ( ( ( ( ( 0.4 * bath@[0, 0] ) + ( 0.4 * bath@[0, 1] ) ) + ( 0.2 * bath@[1, 0] ) ) + ( ( 0.016 * 1.4142135623731 ) * cetaLower0 ) ) + ( 0.0128 * cetaLower1 ) ) ) ) == cvLower2
		}
		solve locally {
			cvTildeUpper0 => ( ( ( cvTildeUpper0 * ( ( ( ( 0.333333333333333 * bath@[0, 1] ) + ( 0.333333333333333 * bath@[1, 0] ) ) + ( 0.333333333333333 * bath@[1, 1] ) ) + ( ( 0.016 * 1.4142135623731 ) * cetaUpper0 ) ) ) + ( cvTildeUpper1 * ( ( ( ( ( -0.166666666666667 * 1.4142135623731 ) * bath@[0, 1] ) + ( ( 0.0833333333333333 * 1.4142135623731 ) * bath@[1, 0] ) ) + ( ( 0.0833333333333333 * 1.4142135623731 ) * bath@[1, 1] ) ) + ( ( 0.016 * 1.4142135623731 ) * cetaUpper1 ) ) ) ) + ( cvTildeUpper2 * ( ( ( ( -0.0833333333333333 * 2.44948974278318 ) * bath@[1, 0] ) + ( ( 0.0833333333333333 * 2.44948974278318 ) * bath@[1, 1] ) ) + ( ( 0.016 * 1.4142135623731 ) * cetaUpper2 ) ) ) ) == cvUpper0
			cvTildeUpper1 => ( ( ( cvTildeUpper0 * ( ( ( ( ( -0.166666666666667 * 1.4142135623731 ) * bath@[0, 1] ) + ( ( 0.0833333333333333 * 1.4142135623731 ) * bath@[1, 0] ) ) + ( ( 0.0833333333333333 * 1.4142135623731 ) * bath@[1, 1] ) ) + ( ( 0.016 * 1.4142135623731 ) * cetaUpper1 ) ) ) + ( cvTildeUpper1 * ( ( ( ( ( 0.466666666666667 * bath@[0, 1] ) + ( 0.266666666666667 * bath@[1, 0] ) ) + ( 0.266666666666667 * bath@[1, 1] ) ) + ( ( 0.016 * 1.4142135623731 ) * cetaUpper0 ) ) - ( 0.0128 * cetaUpper1 ) ) ) ) + ( cvTildeUpper2 * ( ( ( ( -0.0666666666666667 * 1.73205080756888 ) * bath@[1, 0] ) + ( ( 0.0666666666666667 * 1.73205080756888 ) * bath@[1, 1] ) ) + ( 0.0128 * cetaUpper2 ) ) ) ) == cvUpper1
			cvTildeUpper2 => ( ( ( cvTildeUpper0 * ( ( ( ( -0.0833333333333333 * 2.44948974278318 ) * bath@[1, 0] ) + ( ( 0.0833333333333333 * 2.44948974278318 ) * bath@[1, 1] ) ) + ( ( 0.016 * 1.4142135623731 ) * cetaUpper2 ) ) ) + ( cvTildeUpper1 * ( ( ( ( -0.0666666666666667 * 1.73205080756888 ) * bath@[1, 0] ) + ( ( 0.0666666666666667 * 1.73205080756888 ) * bath@[1, 1] ) ) + ( 0.0128 * cetaUpper2 ) ) ) ) + ( cvTildeUpper2 * ( ( ( ( ( 0.2 * bath@[0, 1] ) + ( 0.4 * bath@[1, 0] ) ) + ( 0.4 * bath@[1, 1] ) ) + ( ( 0.016 * 1.4142135623731 ) * cetaUpper0 ) ) + ( 0.0128 * cetaUpper1 ) ) ) ) == cvUpper2
		}
	}
	stopTimer ( "UpdateCTilde" )
}

Function CommunicateAll@all {
	startTimer ( "CommunicateAll" )
	communicate cetaLower0
	communicate cetaLower1
	communicate cetaLower2
	communicate cetaUpper0
	communicate cetaUpper1
	communicate cetaUpper2
	communicate cuLower0
	communicate cuLower1
	communicate cuLower2
	communicate cuUpper0
	communicate cuUpper1
	communicate cuUpper2
	communicate cvLower0
	communicate cvLower1
	communicate cvLower2
	communicate cvUpper0
	communicate cvUpper1
	communicate cvUpper2
	communicate cuTildeLower0
	communicate cuTildeLower1
	communicate cuTildeLower2
	communicate cuTildeUpper0
	communicate cuTildeUpper1
	communicate cuTildeUpper2
	communicate cvTildeLower0
	communicate cvTildeLower1
	communicate cvTildeLower2
	communicate cvTildeUpper0
	communicate cvTildeUpper1
	communicate cvTildeUpper2
	stopTimer ( "CommunicateAll" )
}

Function ApplyAllBc@all {
	startTimer ( "ApplyAllBc" )
	loop over cetaUpper0 only ghost [-1, 0] on boundary {
		cetaUpper0 = ( ( ( 15.625 * 1.4142135623731 ) * ( 2.3 - ( 0.4 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 0] ) ) ) ) ) ) ) + ( ( 15.625 * 1.4142135623731 ) * ( 2.3 - ( 0.4 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 1] ) ) ) ) ) ) ) )
		cetaUpper1 = 0
		cetaUpper2 = ( ( ( -5.20833333333333 * 1.73205080756888 ) * ( 2.3 - ( 0.4 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 0] ) ) ) ) ) ) ) + ( ( 5.20833333333333 * 1.73205080756888 ) * ( 2.3 - ( 0.4 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 1] ) ) ) ) ) ) ) )
	}
	loop over cuUpper0 only ghost [-1, 0] on boundary {
		cuUpper0 = ( ( ( 15.625 * 1.4142135623731 ) * ( ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 0] ) ) ) ) ) + 0.6 ) ) + ( ( 15.625 * 1.4142135623731 ) * ( ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 1] ) ) ) ) ) + 0.6 ) ) )
		cuUpper1 = 0
		cuUpper2 = ( ( ( -5.20833333333333 * 1.73205080756888 ) * ( ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 0] ) ) ) ) ) + 0.6 ) ) + ( ( 5.20833333333333 * 1.73205080756888 ) * ( ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 1] ) ) ) ) ) + 0.6 ) ) )
	}
	loop over cvUpper0 only ghost [-1, 0] on boundary {
		cvUpper0 = ( ( ( 15.625 * 1.4142135623731 ) * ( ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 0] ) ) ) ) ) + 0.3 ) ) + ( ( 15.625 * 1.4142135623731 ) * ( ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 1] ) ) ) ) ) + 0.3 ) ) )
		cvUpper1 = 0
		cvUpper2 = ( ( ( -5.20833333333333 * 1.73205080756888 ) * ( ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 0] ) ) ) ) ) + 0.3 ) ) + ( ( 5.20833333333333 * 1.73205080756888 ) * ( ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 1] ) ) ) ) ) + 0.3 ) ) )
	}
	loop over cetaLower0 only ghost [1, 0] on boundary {
		cetaLower0 = ( ( ( 15.625 * 1.4142135623731 ) * ( 2.3 - ( 0.4 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 0] ) ) ) ) ) ) ) + ( ( 15.625 * 1.4142135623731 ) * ( 2.3 - ( 0.4 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 1] ) ) ) ) ) ) ) )
		cetaLower1 = 0
		cetaLower2 = ( ( ( 5.20833333333333 * 1.73205080756888 ) * ( 2.3 - ( 0.4 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 0] ) ) ) ) ) ) ) - ( ( 5.20833333333333 * 1.73205080756888 ) * ( 2.3 - ( 0.4 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 1] ) ) ) ) ) ) ) )
	}
	loop over cuLower0 only ghost [1, 0] on boundary {
		cuLower0 = ( ( ( 15.625 * 1.4142135623731 ) * ( ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 0] ) ) ) ) ) + 0.6 ) ) + ( ( 15.625 * 1.4142135623731 ) * ( ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 1] ) ) ) ) ) + 0.6 ) ) )
		cuLower1 = 0
		cuLower2 = ( ( ( 5.20833333333333 * 1.73205080756888 ) * ( ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 0] ) ) ) ) ) + 0.6 ) ) - ( ( 5.20833333333333 * 1.73205080756888 ) * ( ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 1] ) ) ) ) ) + 0.6 ) ) )
	}
	loop over cvLower0 only ghost [1, 0] on boundary {
		cvLower0 = ( ( ( 15.625 * 1.4142135623731 ) * ( ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 0] ) ) ) ) ) + 0.3 ) ) + ( ( 15.625 * 1.4142135623731 ) * ( ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 1] ) ) ) ) ) + 0.3 ) ) )
		cvLower1 = 0
		cvLower2 = ( ( ( 5.20833333333333 * 1.73205080756888 ) * ( ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 0] ) ) ) ) ) + 0.3 ) ) - ( ( 5.20833333333333 * 1.73205080756888 ) * ( ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 1] ) ) ) ) ) + 0.3 ) ) )
	}
	loop over cetaUpper0 only ghost [0, -1] on boundary {
		cetaUpper0 = ( ( 31.25 * 1.4142135623731 ) * ( 2.3 - ( 0.4 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 1] ) ) ) ) ) ) )
		cetaUpper1 = 0
		cetaUpper2 = ( ( ( -10.4166666666667 * 1.73205080756888 ) * ( 2.3 - ( 0.4 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 1] ) ) ) ) ) ) ) + ( ( 10.4166666666667 * 1.73205080756888 ) * ( 2.3 - ( 0.4 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 1] ) ) ) ) ) ) ) )
	}
	loop over cuUpper0 only ghost [0, -1] on boundary {
		cuUpper0 = ( ( 31.25 * 1.4142135623731 ) * ( ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 1] ) ) ) ) ) + 0.6 ) )
		cuUpper1 = 0
		cuUpper2 = ( ( ( -10.4166666666667 * 1.73205080756888 ) * ( ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 1] ) ) ) ) ) + 0.6 ) ) + ( ( 10.4166666666667 * 1.73205080756888 ) * ( ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 1] ) ) ) ) ) + 0.6 ) ) )
	}
	loop over cvUpper0 only ghost [0, -1] on boundary {
		cvUpper0 = ( ( 31.25 * 1.4142135623731 ) * ( ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 1] ) ) ) ) ) + 0.3 ) )
		cvUpper1 = 0
		cvUpper2 = ( ( ( -10.4166666666667 * 1.73205080756888 ) * ( ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 1] ) ) ) ) ) + 0.3 ) ) + ( ( 10.4166666666667 * 1.73205080756888 ) * ( ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 1] ) ) ) ) ) + 0.3 ) ) )
	}
	loop over cetaLower0 only ghost [0, 1] on boundary {
		cetaLower0 = ( ( 31.25 * 1.4142135623731 ) * ( 2.3 - ( 0.4 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 0] ) ) ) ) ) ) )
		cetaLower1 = 0
		cetaLower2 = ( ( ( 10.4166666666667 * 1.73205080756888 ) * ( 2.3 - ( 0.4 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 0] ) ) ) ) ) ) ) - ( ( 10.4166666666667 * 1.73205080756888 ) * ( 2.3 - ( 0.4 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 0] ) ) ) ) ) ) ) )
	}
	loop over cuLower0 only ghost [0, 1] on boundary {
		cuLower0 = ( ( 31.25 * 1.4142135623731 ) * ( ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 0] ) ) ) ) ) + 0.6 ) )
		cuLower1 = 0
		cuLower2 = ( ( ( 10.4166666666667 * 1.73205080756888 ) * ( ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 0] ) ) ) ) ) + 0.6 ) ) - ( ( 10.4166666666667 * 1.73205080756888 ) * ( ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 0] ) ) ) ) ) + 0.6 ) ) )
	}
	loop over cvLower0 only ghost [0, 1] on boundary {
		cvLower0 = ( ( 31.25 * 1.4142135623731 ) * ( ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 0] ) ) ) ) ) + 0.3 ) )
		cvLower1 = 0
		cvLower2 = ( ( ( 10.4166666666667 * 1.73205080756888 ) * ( ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 0] ) ) ) ) ) + 0.3 ) ) - ( ( 10.4166666666667 * 1.73205080756888 ) * ( ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 0] ) ) ) ) ) + 0.3 ) ) )
	}
	loop over cuTildeUpper0 only ghost [-1, 0] on boundary {
		solve locally {
			cuTildeUpper0 => ( ( cuTildeUpper0 * ( ( bath@[1, 0] + bath@[1, 1] ) + ( ( 0.032 * 1.4142135623731 ) * cetaUpper0 ) ) ) + ( cuTildeUpper2 * ( ( ( ( -0.333333333333333 * 2.44948974278318 ) * bath@[1, 0] ) + ( ( 0.333333333333333 * 2.44948974278318 ) * bath@[1, 1] ) ) + ( ( 0.064 * 1.4142135623731 ) * cetaUpper2 ) ) ) ) == ( 2.0 * cuUpper0 )
			cuTildeUpper2 => ( ( cuTildeUpper0 * ( ( ( ( -0.333333333333333 * 2.44948974278318 ) * bath@[1, 0] ) + ( ( 0.333333333333333 * 2.44948974278318 ) * bath@[1, 1] ) ) + ( ( 0.064 * 1.4142135623731 ) * cetaUpper2 ) ) ) + ( cuTildeUpper2 * ( ( ( 2.0 * bath@[1, 0] ) + ( 2.0 * bath@[1, 1] ) ) + ( ( 0.064 * 1.4142135623731 ) * cetaUpper0 ) ) ) ) == ( 4.0 * cuUpper2 )
		}
	}
	loop over cvTildeUpper0 only ghost [-1, 0] on boundary {
		solve locally {
			cvTildeUpper0 => ( ( cvTildeUpper0 * ( ( bath@[1, 0] + bath@[1, 1] ) + ( ( 0.032 * 1.4142135623731 ) * cetaUpper0 ) ) ) + ( cvTildeUpper2 * ( ( ( ( -0.333333333333333 * 2.44948974278318 ) * bath@[1, 0] ) + ( ( 0.333333333333333 * 2.44948974278318 ) * bath@[1, 1] ) ) + ( ( 0.064 * 1.4142135623731 ) * cetaUpper2 ) ) ) ) == ( 2.0 * cvUpper0 )
			cvTildeUpper2 => ( ( cvTildeUpper0 * ( ( ( ( -0.333333333333333 * 2.44948974278318 ) * bath@[1, 0] ) + ( ( 0.333333333333333 * 2.44948974278318 ) * bath@[1, 1] ) ) + ( ( 0.064 * 1.4142135623731 ) * cetaUpper2 ) ) ) + ( cvTildeUpper2 * ( ( ( 2.0 * bath@[1, 0] ) + ( 2.0 * bath@[1, 1] ) ) + ( ( 0.064 * 1.4142135623731 ) * cetaUpper0 ) ) ) ) == ( 4.0 * cvUpper2 )
		}
	}
	loop over cuTildeLower0 only ghost [1, 0] on boundary {
		solve locally {
			cuTildeLower0 => ( ( cuTildeLower0 * ( ( bath@[0, 0] + bath@[0, 1] ) + ( ( 0.032 * 1.4142135623731 ) * cetaLower0 ) ) ) + ( cuTildeLower2 * ( ( ( ( 0.333333333333333 * 2.44948974278318 ) * bath@[0, 0] ) - ( ( 0.333333333333333 * 2.44948974278318 ) * bath@[0, 1] ) ) + ( ( 0.064 * 1.4142135623731 ) * cetaLower2 ) ) ) ) == ( 2.0 * cuLower0 )
			cuTildeLower2 => ( ( cuTildeLower0 * ( ( ( ( 0.333333333333333 * 2.44948974278318 ) * bath@[0, 0] ) - ( ( 0.333333333333333 * 2.44948974278318 ) * bath@[0, 1] ) ) + ( ( 0.064 * 1.4142135623731 ) * cetaLower2 ) ) ) + ( cuTildeLower2 * ( ( ( 2.0 * bath@[0, 0] ) + ( 2.0 * bath@[0, 1] ) ) + ( ( 0.064 * 1.4142135623731 ) * cetaLower0 ) ) ) ) == ( 4.0 * cuLower2 )
		}
	}
	loop over cvTildeLower0 only ghost [1, 0] on boundary {
		solve locally {
			cvTildeLower0 => ( ( cvTildeLower0 * ( ( bath@[0, 0] + bath@[0, 1] ) + ( ( 0.032 * 1.4142135623731 ) * cetaLower0 ) ) ) + ( cvTildeLower2 * ( ( ( ( 0.333333333333333 * 2.44948974278318 ) * bath@[0, 0] ) - ( ( 0.333333333333333 * 2.44948974278318 ) * bath@[0, 1] ) ) + ( ( 0.064 * 1.4142135623731 ) * cetaLower2 ) ) ) ) == ( 2.0 * cvLower0 )
			cvTildeLower2 => ( ( cvTildeLower0 * ( ( ( ( 0.333333333333333 * 2.44948974278318 ) * bath@[0, 0] ) - ( ( 0.333333333333333 * 2.44948974278318 ) * bath@[0, 1] ) ) + ( ( 0.064 * 1.4142135623731 ) * cetaLower2 ) ) ) + ( cvTildeLower2 * ( ( ( 2.0 * bath@[0, 0] ) + ( 2.0 * bath@[0, 1] ) ) + ( ( 0.064 * 1.4142135623731 ) * cetaLower0 ) ) ) ) == ( 4.0 * cvLower2 )
		}
	}
	loop over cuTildeUpper0 only ghost [0, -1] on boundary {
		solve locally {
			cuTildeUpper0 => ( ( cuTildeUpper0 * ( ( ( bath@[0, 1] + bath@[1, 1] ) + ( ( 0.032 * 1.4142135623731 ) * cetaUpper0 ) ) + ( ( 0.032 * 1.73205080756888 ) * cetaUpper2 ) ) ) + ( cuTildeUpper2 * ( ( ( ( ( 0.333333333333333 * 2.44948974278318 ) * bath@[0, 1] ) + ( ( 0.666666666666667 * 2.44948974278318 ) * bath@[1, 1] ) ) + ( ( 0.032 * 1.73205080756888 ) * cetaUpper0 ) ) + ( ( 0.064 * 1.4142135623731 ) * cetaUpper2 ) ) ) ) == ( ( 2.0 * cuUpper0 ) + ( 2.44948974278318 * cuUpper2 ) )
			cuTildeUpper2 => ( ( cuTildeUpper0 * ( ( ( ( ( 0.333333333333333 * 2.44948974278318 ) * bath@[0, 1] ) + ( ( 0.666666666666667 * 2.44948974278318 ) * bath@[1, 1] ) ) + ( ( 0.032 * 1.73205080756888 ) * cetaUpper0 ) ) + ( ( 0.064 * 1.4142135623731 ) * cetaUpper2 ) ) ) + ( cuTildeUpper2 * ( ( ( bath@[0, 1] + ( 3.0 * bath@[1, 1] ) ) + ( ( 0.064 * 1.4142135623731 ) * cetaUpper0 ) ) + ( ( 0.096 * 1.73205080756888 ) * cetaUpper2 ) ) ) ) == ( ( 2.44948974278318 * cuUpper0 ) + ( 4.0 * cuUpper2 ) )
		}
	}
	loop over cvTildeUpper0 only ghost [0, -1] on boundary {
		solve locally {
			cvTildeUpper0 => ( ( cvTildeUpper0 * ( ( ( bath@[0, 1] + bath@[1, 1] ) + ( ( 0.032 * 1.4142135623731 ) * cetaUpper0 ) ) + ( ( 0.032 * 1.73205080756888 ) * cetaUpper2 ) ) ) + ( cvTildeUpper2 * ( ( ( ( ( 0.333333333333333 * 2.44948974278318 ) * bath@[0, 1] ) + ( ( 0.666666666666667 * 2.44948974278318 ) * bath@[1, 1] ) ) + ( ( 0.032 * 1.73205080756888 ) * cetaUpper0 ) ) + ( ( 0.064 * 1.4142135623731 ) * cetaUpper2 ) ) ) ) == ( ( 2.0 * cvUpper0 ) + ( 2.44948974278318 * cvUpper2 ) )
			cvTildeUpper2 => ( ( cvTildeUpper0 * ( ( ( ( ( 0.333333333333333 * 2.44948974278318 ) * bath@[0, 1] ) + ( ( 0.666666666666667 * 2.44948974278318 ) * bath@[1, 1] ) ) + ( ( 0.032 * 1.73205080756888 ) * cetaUpper0 ) ) + ( ( 0.064 * 1.4142135623731 ) * cetaUpper2 ) ) ) + ( cvTildeUpper2 * ( ( ( bath@[0, 1] + ( 3.0 * bath@[1, 1] ) ) + ( ( 0.064 * 1.4142135623731 ) * cetaUpper0 ) ) + ( ( 0.096 * 1.73205080756888 ) * cetaUpper2 ) ) ) ) == ( ( 2.44948974278318 * cvUpper0 ) + ( 4.0 * cvUpper2 ) )
		}
	}
	loop over cuTildeLower0 only ghost [0, 1] on boundary {
		solve locally {
			cuTildeLower0 => ( ( cuTildeLower0 * ( ( ( bath@[0, 0] + bath@[1, 0] ) + ( ( 0.032 * 1.4142135623731 ) * cetaLower0 ) ) + ( ( 0.032 * 1.73205080756888 ) * cetaLower2 ) ) ) + ( cuTildeLower2 * ( ( ( ( ( 0.666666666666667 * 2.44948974278318 ) * bath@[0, 0] ) + ( ( 0.333333333333333 * 2.44948974278318 ) * bath@[1, 0] ) ) + ( ( 0.032 * 1.73205080756888 ) * cetaLower0 ) ) + ( ( 0.064 * 1.4142135623731 ) * cetaLower2 ) ) ) ) == ( ( 2.0 * cuLower0 ) + ( 2.44948974278318 * cuLower2 ) )
			cuTildeLower2 => ( ( cuTildeLower0 * ( ( ( ( ( 0.666666666666667 * 2.44948974278318 ) * bath@[0, 0] ) + ( ( 0.333333333333333 * 2.44948974278318 ) * bath@[1, 0] ) ) + ( ( 0.032 * 1.73205080756888 ) * cetaLower0 ) ) + ( ( 0.064 * 1.4142135623731 ) * cetaLower2 ) ) ) + ( cuTildeLower2 * ( ( ( ( 3.0 * bath@[0, 0] ) + bath@[1, 0] ) + ( ( 0.064 * 1.4142135623731 ) * cetaLower0 ) ) + ( ( 0.096 * 1.73205080756888 ) * cetaLower2 ) ) ) ) == ( ( 2.44948974278318 * cuLower0 ) + ( 4.0 * cuLower2 ) )
		}
	}
	loop over cvTildeLower0 only ghost [0, 1] on boundary {
		solve locally {
			cvTildeLower0 => ( ( cvTildeLower0 * ( ( ( bath@[0, 0] + bath@[1, 0] ) + ( ( 0.032 * 1.4142135623731 ) * cetaLower0 ) ) + ( ( 0.032 * 1.73205080756888 ) * cetaLower2 ) ) ) + ( cvTildeLower2 * ( ( ( ( ( 0.666666666666667 * 2.44948974278318 ) * bath@[0, 0] ) + ( ( 0.333333333333333 * 2.44948974278318 ) * bath@[1, 0] ) ) + ( ( 0.032 * 1.73205080756888 ) * cetaLower0 ) ) + ( ( 0.064 * 1.4142135623731 ) * cetaLower2 ) ) ) ) == ( ( 2.0 * cvLower0 ) + ( 2.44948974278318 * cvLower2 ) )
			cvTildeLower2 => ( ( cvTildeLower0 * ( ( ( ( ( 0.666666666666667 * 2.44948974278318 ) * bath@[0, 0] ) + ( ( 0.333333333333333 * 2.44948974278318 ) * bath@[1, 0] ) ) + ( ( 0.032 * 1.73205080756888 ) * cetaLower0 ) ) + ( ( 0.064 * 1.4142135623731 ) * cetaLower2 ) ) ) + ( cvTildeLower2 * ( ( ( ( 3.0 * bath@[0, 0] ) + bath@[1, 0] ) + ( ( 0.064 * 1.4142135623731 ) * cetaLower0 ) ) + ( ( 0.096 * 1.73205080756888 ) * cetaLower2 ) ) ) ) == ( ( 2.44948974278318 * cvLower0 ) + ( 4.0 * cvLower2 ) )
		}
	}
	stopTimer ( "ApplyAllBc" )
}

Function PrintError@all {
	Var normErr_ceta_Lower : Real = 0
	loop over cetaLower0 with reduction ( + : normErr_ceta_Lower ) {
		normErr_ceta_Lower += ( ( ( ( ( ( 325.520833333333 * ( ( ( ( ( ( 0.016 * 1.4142135623731 ) * cetaLower0@[0, 0] ) - ( 0.064 * cetaLower1@[0, 0] ) ) + ( 0.4 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 0] ) ) ) ) ) ) - 2.3 ) * ( ( ( ( ( 0.016 * 1.4142135623731 ) * cetaLower0@[0, 0] ) - ( 0.064 * cetaLower1@[0, 0] ) ) + ( 0.4 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 0] ) ) ) ) ) ) - 2.3 ) ) ) + ( 325.520833333333 * ( ( ( ( ( ( 0.016 * 1.4142135623731 ) * cetaLower0@[0, 0] ) + ( 0.032 * cetaLower1@[0, 0] ) ) + ( 0.4 * sin ( ( M_PI * ( ( ( ( ( 3.33333333333333E-4 * t ) + ( 8.33333333333333E-4 * vf_nodePosition_0@[0, 0] ) ) + ( 8.33333333333333E-4 * vf_nodePosition_0@[0, 1] ) ) + ( 8.33333333333333E-4 * vf_nodePosition_1@[0, 0] ) ) + ( 8.33333333333333E-4 * vf_nodePosition_1@[0, 1] ) ) ) ) ) ) - 2.3 ) * ( ( ( ( ( 0.016 * 1.4142135623731 ) * cetaLower0@[0, 0] ) + ( 0.032 * cetaLower1@[0, 0] ) ) + ( 0.4 * sin ( ( M_PI * ( ( ( ( ( 3.33333333333333E-4 * t ) + ( 8.33333333333333E-4 * vf_nodePosition_0@[0, 0] ) ) + ( 8.33333333333333E-4 * vf_nodePosition_0@[0, 1] ) ) + ( 8.33333333333333E-4 * vf_nodePosition_1@[0, 0] ) ) + ( 8.33333333333333E-4 * vf_nodePosition_1@[0, 1] ) ) ) ) ) ) - 2.3 ) ) ) ) + ( 325.520833333333 * ( ( ( ( ( ( ( 0.016 * 1.4142135623731 ) * cetaLower0@[0, 0] ) - ( 0.016 * cetaLower1@[0, 0] ) ) - ( ( 0.016 * 1.73205080756888 ) * cetaLower2@[0, 0] ) ) + ( 0.4 * sin ( ( M_PI * ( ( ( ( ( 3.33333333333333E-4 * t ) + ( 8.33333333333333E-4 * vf_nodePosition_0@[0, 1] ) ) + ( 8.33333333333333E-4 * vf_nodePosition_0@[1, 0] ) ) + ( 8.33333333333333E-4 * vf_nodePosition_1@[0, 1] ) ) + ( 8.33333333333333E-4 * vf_nodePosition_1@[1, 0] ) ) ) ) ) ) - 2.3 ) * ( ( ( ( ( ( 0.016 * 1.4142135623731 ) * cetaLower0@[0, 0] ) - ( 0.016 * cetaLower1@[0, 0] ) ) - ( ( 0.016 * 1.73205080756888 ) * cetaLower2@[0, 0] ) ) + ( 0.4 * sin ( ( M_PI * ( ( ( ( ( 3.33333333333333E-4 * t ) + ( 8.33333333333333E-4 * vf_nodePosition_0@[0, 1] ) ) + ( 8.33333333333333E-4 * vf_nodePosition_0@[1, 0] ) ) + ( 8.33333333333333E-4 * vf_nodePosition_1@[0, 1] ) ) + ( 8.33333333333333E-4 * vf_nodePosition_1@[1, 0] ) ) ) ) ) ) - 2.3 ) ) ) ) + ( 325.520833333333 * ( ( ( ( ( ( ( 0.016 * 1.4142135623731 ) * cetaLower0@[0, 0] ) - ( 0.016 * cetaLower1@[0, 0] ) ) + ( ( 0.016 * 1.73205080756888 ) * cetaLower2@[0, 0] ) ) + ( 0.4 * sin ( ( M_PI * ( ( ( ( ( 3.33333333333333E-4 * t ) + ( 8.33333333333333E-4 * vf_nodePosition_0@[0, 0] ) ) + ( 8.33333333333333E-4 * vf_nodePosition_0@[1, 0] ) ) + ( 8.33333333333333E-4 * vf_nodePosition_1@[0, 0] ) ) + ( 8.33333333333333E-4 * vf_nodePosition_1@[1, 0] ) ) ) ) ) ) - 2.3 ) * ( ( ( ( ( ( 0.016 * 1.4142135623731 ) * cetaLower0@[0, 0] ) - ( 0.016 * cetaLower1@[0, 0] ) ) + ( ( 0.016 * 1.73205080756888 ) * cetaLower2@[0, 0] ) ) + ( 0.4 * sin ( ( M_PI * ( ( ( ( ( 3.33333333333333E-4 * t ) + ( 8.33333333333333E-4 * vf_nodePosition_0@[0, 0] ) ) + ( 8.33333333333333E-4 * vf_nodePosition_0@[1, 0] ) ) + ( 8.33333333333333E-4 * vf_nodePosition_1@[0, 0] ) ) + ( 8.33333333333333E-4 * vf_nodePosition_1@[1, 0] ) ) ) ) ) ) - 2.3 ) ) ) ) + ( 325.520833333333 * ( ( ( ( ( ( ( 0.016 * 1.4142135623731 ) * cetaLower0@[0, 0] ) + ( 0.032 * cetaLower1@[0, 0] ) ) - ( ( 0.032 * 1.73205080756888 ) * cetaLower2@[0, 0] ) ) + ( 0.4 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 1] ) ) ) ) ) ) - 2.3 ) * ( ( ( ( ( ( 0.016 * 1.4142135623731 ) * cetaLower0@[0, 0] ) + ( 0.032 * cetaLower1@[0, 0] ) ) - ( ( 0.032 * 1.73205080756888 ) * cetaLower2@[0, 0] ) ) + ( 0.4 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 1] ) ) ) ) ) ) - 2.3 ) ) ) ) + ( 325.520833333333 * ( ( ( ( ( ( ( 0.016 * 1.4142135623731 ) * cetaLower0@[0, 0] ) + ( 0.032 * cetaLower1@[0, 0] ) ) + ( ( 0.032 * 1.73205080756888 ) * cetaLower2@[0, 0] ) ) + ( 0.4 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 0] ) ) ) ) ) ) - 2.3 ) * ( ( ( ( ( ( 0.016 * 1.4142135623731 ) * cetaLower0@[0, 0] ) + ( 0.032 * cetaLower1@[0, 0] ) ) + ( ( 0.032 * 1.73205080756888 ) * cetaLower2@[0, 0] ) ) + ( 0.4 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 0] ) ) ) ) ) ) - 2.3 ) ) ) )
	}
	print ( "Error for cetaLower:", sqrt ( normErr_ceta_Lower ) )
	Var normErr_ceta_Upper : Real = 0
	loop over cetaUpper0 with reduction ( + : normErr_ceta_Upper ) {
		normErr_ceta_Upper += ( ( ( ( ( ( 325.520833333333 * ( ( ( ( ( ( 0.016 * 1.4142135623731 ) * cetaUpper0@[0, 0] ) - ( 0.064 * cetaUpper1@[0, 0] ) ) + ( 0.4 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 1] ) ) ) ) ) ) - 2.3 ) * ( ( ( ( ( 0.016 * 1.4142135623731 ) * cetaUpper0@[0, 0] ) - ( 0.064 * cetaUpper1@[0, 0] ) ) + ( 0.4 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 1] ) ) ) ) ) ) - 2.3 ) ) ) + ( 325.520833333333 * ( ( ( ( ( ( 0.016 * 1.4142135623731 ) * cetaUpper0@[0, 0] ) + ( 0.032 * cetaUpper1@[0, 0] ) ) + ( 0.4 * sin ( ( M_PI * ( ( ( ( ( 3.33333333333333E-4 * t ) + ( 8.33333333333333E-4 * vf_nodePosition_0@[1, 0] ) ) + ( 8.33333333333333E-4 * vf_nodePosition_0@[1, 1] ) ) + ( 8.33333333333333E-4 * vf_nodePosition_1@[1, 0] ) ) + ( 8.33333333333333E-4 * vf_nodePosition_1@[1, 1] ) ) ) ) ) ) - 2.3 ) * ( ( ( ( ( 0.016 * 1.4142135623731 ) * cetaUpper0@[0, 0] ) + ( 0.032 * cetaUpper1@[0, 0] ) ) + ( 0.4 * sin ( ( M_PI * ( ( ( ( ( 3.33333333333333E-4 * t ) + ( 8.33333333333333E-4 * vf_nodePosition_0@[1, 0] ) ) + ( 8.33333333333333E-4 * vf_nodePosition_0@[1, 1] ) ) + ( 8.33333333333333E-4 * vf_nodePosition_1@[1, 0] ) ) + ( 8.33333333333333E-4 * vf_nodePosition_1@[1, 1] ) ) ) ) ) ) - 2.3 ) ) ) ) + ( 325.520833333333 * ( ( ( ( ( ( ( 0.016 * 1.4142135623731 ) * cetaUpper0@[0, 0] ) - ( 0.016 * cetaUpper1@[0, 0] ) ) - ( ( 0.016 * 1.73205080756888 ) * cetaUpper2@[0, 0] ) ) + ( 0.4 * sin ( ( M_PI * ( ( ( ( ( 3.33333333333333E-4 * t ) + ( 8.33333333333333E-4 * vf_nodePosition_0@[0, 1] ) ) + ( 8.33333333333333E-4 * vf_nodePosition_0@[1, 0] ) ) + ( 8.33333333333333E-4 * vf_nodePosition_1@[0, 1] ) ) + ( 8.33333333333333E-4 * vf_nodePosition_1@[1, 0] ) ) ) ) ) ) - 2.3 ) * ( ( ( ( ( ( 0.016 * 1.4142135623731 ) * cetaUpper0@[0, 0] ) - ( 0.016 * cetaUpper1@[0, 0] ) ) - ( ( 0.016 * 1.73205080756888 ) * cetaUpper2@[0, 0] ) ) + ( 0.4 * sin ( ( M_PI * ( ( ( ( ( 3.33333333333333E-4 * t ) + ( 8.33333333333333E-4 * vf_nodePosition_0@[0, 1] ) ) + ( 8.33333333333333E-4 * vf_nodePosition_0@[1, 0] ) ) + ( 8.33333333333333E-4 * vf_nodePosition_1@[0, 1] ) ) + ( 8.33333333333333E-4 * vf_nodePosition_1@[1, 0] ) ) ) ) ) ) - 2.3 ) ) ) ) + ( 325.520833333333 * ( ( ( ( ( ( ( 0.016 * 1.4142135623731 ) * cetaUpper0@[0, 0] ) - ( 0.016 * cetaUpper1@[0, 0] ) ) + ( ( 0.016 * 1.73205080756888 ) * cetaUpper2@[0, 0] ) ) + ( 0.4 * sin ( ( M_PI * ( ( ( ( ( 3.33333333333333E-4 * t ) + ( 8.33333333333333E-4 * vf_nodePosition_0@[0, 1] ) ) + ( 8.33333333333333E-4 * vf_nodePosition_0@[1, 1] ) ) + ( 8.33333333333333E-4 * vf_nodePosition_1@[0, 1] ) ) + ( 8.33333333333333E-4 * vf_nodePosition_1@[1, 1] ) ) ) ) ) ) - 2.3 ) * ( ( ( ( ( ( 0.016 * 1.4142135623731 ) * cetaUpper0@[0, 0] ) - ( 0.016 * cetaUpper1@[0, 0] ) ) + ( ( 0.016 * 1.73205080756888 ) * cetaUpper2@[0, 0] ) ) + ( 0.4 * sin ( ( M_PI * ( ( ( ( ( 3.33333333333333E-4 * t ) + ( 8.33333333333333E-4 * vf_nodePosition_0@[0, 1] ) ) + ( 8.33333333333333E-4 * vf_nodePosition_0@[1, 1] ) ) + ( 8.33333333333333E-4 * vf_nodePosition_1@[0, 1] ) ) + ( 8.33333333333333E-4 * vf_nodePosition_1@[1, 1] ) ) ) ) ) ) - 2.3 ) ) ) ) + ( 325.520833333333 * ( ( ( ( ( ( ( 0.016 * 1.4142135623731 ) * cetaUpper0@[0, 0] ) + ( 0.032 * cetaUpper1@[0, 0] ) ) - ( ( 0.032 * 1.73205080756888 ) * cetaUpper2@[0, 0] ) ) + ( 0.4 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 0] ) ) ) ) ) ) - 2.3 ) * ( ( ( ( ( ( 0.016 * 1.4142135623731 ) * cetaUpper0@[0, 0] ) + ( 0.032 * cetaUpper1@[0, 0] ) ) - ( ( 0.032 * 1.73205080756888 ) * cetaUpper2@[0, 0] ) ) + ( 0.4 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 0] ) ) ) ) ) ) - 2.3 ) ) ) ) + ( 325.520833333333 * ( ( ( ( ( ( ( 0.016 * 1.4142135623731 ) * cetaUpper0@[0, 0] ) + ( 0.032 * cetaUpper1@[0, 0] ) ) + ( ( 0.032 * 1.73205080756888 ) * cetaUpper2@[0, 0] ) ) + ( 0.4 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 1] ) ) ) ) ) ) - 2.3 ) * ( ( ( ( ( ( 0.016 * 1.4142135623731 ) * cetaUpper0@[0, 0] ) + ( 0.032 * cetaUpper1@[0, 0] ) ) + ( ( 0.032 * 1.73205080756888 ) * cetaUpper2@[0, 0] ) ) + ( 0.4 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 1] ) ) ) ) ) ) - 2.3 ) ) ) )
	}
	print ( "Error for cetaUpper:", sqrt ( normErr_ceta_Upper ) )
	errceta@current = sqrt ( ( normErr_ceta_Lower + normErr_ceta_Upper ) )
	print ( "Error for ceta:", errceta@current )
	Var normErr_cu_Lower : Real = 0
	loop over cuLower0 with reduction ( + : normErr_cu_Lower ) {
		normErr_cu_Lower += ( ( ( ( ( ( 325.520833333333 * ( ( ( ( ( ( 0.016 * 1.4142135623731 ) * cuLower0@[0, 0] ) - ( 0.064 * cuLower1@[0, 0] ) ) - ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 0] ) ) ) ) ) ) - 0.6 ) * ( ( ( ( ( 0.016 * 1.4142135623731 ) * cuLower0@[0, 0] ) - ( 0.064 * cuLower1@[0, 0] ) ) - ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 0] ) ) ) ) ) ) - 0.6 ) ) ) + ( 325.520833333333 * ( ( ( ( ( ( 0.016 * 1.4142135623731 ) * cuLower0@[0, 0] ) + ( 0.032 * cuLower1@[0, 0] ) ) - ( 0.04 * sin ( ( M_PI * ( ( ( ( ( 3.33333333333333E-4 * t ) + ( 8.33333333333333E-4 * vf_nodePosition_0@[0, 0] ) ) + ( 8.33333333333333E-4 * vf_nodePosition_0@[0, 1] ) ) + ( 8.33333333333333E-4 * vf_nodePosition_1@[0, 0] ) ) + ( 8.33333333333333E-4 * vf_nodePosition_1@[0, 1] ) ) ) ) ) ) - 0.6 ) * ( ( ( ( ( 0.016 * 1.4142135623731 ) * cuLower0@[0, 0] ) + ( 0.032 * cuLower1@[0, 0] ) ) - ( 0.04 * sin ( ( M_PI * ( ( ( ( ( 3.33333333333333E-4 * t ) + ( 8.33333333333333E-4 * vf_nodePosition_0@[0, 0] ) ) + ( 8.33333333333333E-4 * vf_nodePosition_0@[0, 1] ) ) + ( 8.33333333333333E-4 * vf_nodePosition_1@[0, 0] ) ) + ( 8.33333333333333E-4 * vf_nodePosition_1@[0, 1] ) ) ) ) ) ) - 0.6 ) ) ) ) + ( 325.520833333333 * ( ( ( ( ( ( ( 0.016 * 1.4142135623731 ) * cuLower0@[0, 0] ) - ( 0.016 * cuLower1@[0, 0] ) ) - ( ( 0.016 * 1.73205080756888 ) * cuLower2@[0, 0] ) ) - ( 0.04 * sin ( ( M_PI * ( ( ( ( ( 3.33333333333333E-4 * t ) + ( 8.33333333333333E-4 * vf_nodePosition_0@[0, 1] ) ) + ( 8.33333333333333E-4 * vf_nodePosition_0@[1, 0] ) ) + ( 8.33333333333333E-4 * vf_nodePosition_1@[0, 1] ) ) + ( 8.33333333333333E-4 * vf_nodePosition_1@[1, 0] ) ) ) ) ) ) - 0.6 ) * ( ( ( ( ( ( 0.016 * 1.4142135623731 ) * cuLower0@[0, 0] ) - ( 0.016 * cuLower1@[0, 0] ) ) - ( ( 0.016 * 1.73205080756888 ) * cuLower2@[0, 0] ) ) - ( 0.04 * sin ( ( M_PI * ( ( ( ( ( 3.33333333333333E-4 * t ) + ( 8.33333333333333E-4 * vf_nodePosition_0@[0, 1] ) ) + ( 8.33333333333333E-4 * vf_nodePosition_0@[1, 0] ) ) + ( 8.33333333333333E-4 * vf_nodePosition_1@[0, 1] ) ) + ( 8.33333333333333E-4 * vf_nodePosition_1@[1, 0] ) ) ) ) ) ) - 0.6 ) ) ) ) + ( 325.520833333333 * ( ( ( ( ( ( ( 0.016 * 1.4142135623731 ) * cuLower0@[0, 0] ) - ( 0.016 * cuLower1@[0, 0] ) ) + ( ( 0.016 * 1.73205080756888 ) * cuLower2@[0, 0] ) ) - ( 0.04 * sin ( ( M_PI * ( ( ( ( ( 3.33333333333333E-4 * t ) + ( 8.33333333333333E-4 * vf_nodePosition_0@[0, 0] ) ) + ( 8.33333333333333E-4 * vf_nodePosition_0@[1, 0] ) ) + ( 8.33333333333333E-4 * vf_nodePosition_1@[0, 0] ) ) + ( 8.33333333333333E-4 * vf_nodePosition_1@[1, 0] ) ) ) ) ) ) - 0.6 ) * ( ( ( ( ( ( 0.016 * 1.4142135623731 ) * cuLower0@[0, 0] ) - ( 0.016 * cuLower1@[0, 0] ) ) + ( ( 0.016 * 1.73205080756888 ) * cuLower2@[0, 0] ) ) - ( 0.04 * sin ( ( M_PI * ( ( ( ( ( 3.33333333333333E-4 * t ) + ( 8.33333333333333E-4 * vf_nodePosition_0@[0, 0] ) ) + ( 8.33333333333333E-4 * vf_nodePosition_0@[1, 0] ) ) + ( 8.33333333333333E-4 * vf_nodePosition_1@[0, 0] ) ) + ( 8.33333333333333E-4 * vf_nodePosition_1@[1, 0] ) ) ) ) ) ) - 0.6 ) ) ) ) + ( 325.520833333333 * ( ( ( ( ( ( ( 0.016 * 1.4142135623731 ) * cuLower0@[0, 0] ) + ( 0.032 * cuLower1@[0, 0] ) ) - ( ( 0.032 * 1.73205080756888 ) * cuLower2@[0, 0] ) ) - ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 1] ) ) ) ) ) ) - 0.6 ) * ( ( ( ( ( ( 0.016 * 1.4142135623731 ) * cuLower0@[0, 0] ) + ( 0.032 * cuLower1@[0, 0] ) ) - ( ( 0.032 * 1.73205080756888 ) * cuLower2@[0, 0] ) ) - ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 1] ) ) ) ) ) ) - 0.6 ) ) ) ) + ( 325.520833333333 * ( ( ( ( ( ( ( 0.016 * 1.4142135623731 ) * cuLower0@[0, 0] ) + ( 0.032 * cuLower1@[0, 0] ) ) + ( ( 0.032 * 1.73205080756888 ) * cuLower2@[0, 0] ) ) - ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 0] ) ) ) ) ) ) - 0.6 ) * ( ( ( ( ( ( 0.016 * 1.4142135623731 ) * cuLower0@[0, 0] ) + ( 0.032 * cuLower1@[0, 0] ) ) + ( ( 0.032 * 1.73205080756888 ) * cuLower2@[0, 0] ) ) - ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 0] ) ) ) ) ) ) - 0.6 ) ) ) )
	}
	print ( "Error for cuLower:", sqrt ( normErr_cu_Lower ) )
	Var normErr_cu_Upper : Real = 0
	loop over cuUpper0 with reduction ( + : normErr_cu_Upper ) {
		normErr_cu_Upper += ( ( ( ( ( ( 325.520833333333 * ( ( ( ( ( ( 0.016 * 1.4142135623731 ) * cuUpper0@[0, 0] ) - ( 0.064 * cuUpper1@[0, 0] ) ) - ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 1] ) ) ) ) ) ) - 0.6 ) * ( ( ( ( ( 0.016 * 1.4142135623731 ) * cuUpper0@[0, 0] ) - ( 0.064 * cuUpper1@[0, 0] ) ) - ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 1] ) ) ) ) ) ) - 0.6 ) ) ) + ( 325.520833333333 * ( ( ( ( ( ( 0.016 * 1.4142135623731 ) * cuUpper0@[0, 0] ) + ( 0.032 * cuUpper1@[0, 0] ) ) - ( 0.04 * sin ( ( M_PI * ( ( ( ( ( 3.33333333333333E-4 * t ) + ( 8.33333333333333E-4 * vf_nodePosition_0@[1, 0] ) ) + ( 8.33333333333333E-4 * vf_nodePosition_0@[1, 1] ) ) + ( 8.33333333333333E-4 * vf_nodePosition_1@[1, 0] ) ) + ( 8.33333333333333E-4 * vf_nodePosition_1@[1, 1] ) ) ) ) ) ) - 0.6 ) * ( ( ( ( ( 0.016 * 1.4142135623731 ) * cuUpper0@[0, 0] ) + ( 0.032 * cuUpper1@[0, 0] ) ) - ( 0.04 * sin ( ( M_PI * ( ( ( ( ( 3.33333333333333E-4 * t ) + ( 8.33333333333333E-4 * vf_nodePosition_0@[1, 0] ) ) + ( 8.33333333333333E-4 * vf_nodePosition_0@[1, 1] ) ) + ( 8.33333333333333E-4 * vf_nodePosition_1@[1, 0] ) ) + ( 8.33333333333333E-4 * vf_nodePosition_1@[1, 1] ) ) ) ) ) ) - 0.6 ) ) ) ) + ( 325.520833333333 * ( ( ( ( ( ( ( 0.016 * 1.4142135623731 ) * cuUpper0@[0, 0] ) - ( 0.016 * cuUpper1@[0, 0] ) ) - ( ( 0.016 * 1.73205080756888 ) * cuUpper2@[0, 0] ) ) - ( 0.04 * sin ( ( M_PI * ( ( ( ( ( 3.33333333333333E-4 * t ) + ( 8.33333333333333E-4 * vf_nodePosition_0@[0, 1] ) ) + ( 8.33333333333333E-4 * vf_nodePosition_0@[1, 0] ) ) + ( 8.33333333333333E-4 * vf_nodePosition_1@[0, 1] ) ) + ( 8.33333333333333E-4 * vf_nodePosition_1@[1, 0] ) ) ) ) ) ) - 0.6 ) * ( ( ( ( ( ( 0.016 * 1.4142135623731 ) * cuUpper0@[0, 0] ) - ( 0.016 * cuUpper1@[0, 0] ) ) - ( ( 0.016 * 1.73205080756888 ) * cuUpper2@[0, 0] ) ) - ( 0.04 * sin ( ( M_PI * ( ( ( ( ( 3.33333333333333E-4 * t ) + ( 8.33333333333333E-4 * vf_nodePosition_0@[0, 1] ) ) + ( 8.33333333333333E-4 * vf_nodePosition_0@[1, 0] ) ) + ( 8.33333333333333E-4 * vf_nodePosition_1@[0, 1] ) ) + ( 8.33333333333333E-4 * vf_nodePosition_1@[1, 0] ) ) ) ) ) ) - 0.6 ) ) ) ) + ( 325.520833333333 * ( ( ( ( ( ( ( 0.016 * 1.4142135623731 ) * cuUpper0@[0, 0] ) - ( 0.016 * cuUpper1@[0, 0] ) ) + ( ( 0.016 * 1.73205080756888 ) * cuUpper2@[0, 0] ) ) - ( 0.04 * sin ( ( M_PI * ( ( ( ( ( 3.33333333333333E-4 * t ) + ( 8.33333333333333E-4 * vf_nodePosition_0@[0, 1] ) ) + ( 8.33333333333333E-4 * vf_nodePosition_0@[1, 1] ) ) + ( 8.33333333333333E-4 * vf_nodePosition_1@[0, 1] ) ) + ( 8.33333333333333E-4 * vf_nodePosition_1@[1, 1] ) ) ) ) ) ) - 0.6 ) * ( ( ( ( ( ( 0.016 * 1.4142135623731 ) * cuUpper0@[0, 0] ) - ( 0.016 * cuUpper1@[0, 0] ) ) + ( ( 0.016 * 1.73205080756888 ) * cuUpper2@[0, 0] ) ) - ( 0.04 * sin ( ( M_PI * ( ( ( ( ( 3.33333333333333E-4 * t ) + ( 8.33333333333333E-4 * vf_nodePosition_0@[0, 1] ) ) + ( 8.33333333333333E-4 * vf_nodePosition_0@[1, 1] ) ) + ( 8.33333333333333E-4 * vf_nodePosition_1@[0, 1] ) ) + ( 8.33333333333333E-4 * vf_nodePosition_1@[1, 1] ) ) ) ) ) ) - 0.6 ) ) ) ) + ( 325.520833333333 * ( ( ( ( ( ( ( 0.016 * 1.4142135623731 ) * cuUpper0@[0, 0] ) + ( 0.032 * cuUpper1@[0, 0] ) ) - ( ( 0.032 * 1.73205080756888 ) * cuUpper2@[0, 0] ) ) - ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 0] ) ) ) ) ) ) - 0.6 ) * ( ( ( ( ( ( 0.016 * 1.4142135623731 ) * cuUpper0@[0, 0] ) + ( 0.032 * cuUpper1@[0, 0] ) ) - ( ( 0.032 * 1.73205080756888 ) * cuUpper2@[0, 0] ) ) - ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 0] ) ) ) ) ) ) - 0.6 ) ) ) ) + ( 325.520833333333 * ( ( ( ( ( ( ( 0.016 * 1.4142135623731 ) * cuUpper0@[0, 0] ) + ( 0.032 * cuUpper1@[0, 0] ) ) + ( ( 0.032 * 1.73205080756888 ) * cuUpper2@[0, 0] ) ) - ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 1] ) ) ) ) ) ) - 0.6 ) * ( ( ( ( ( ( 0.016 * 1.4142135623731 ) * cuUpper0@[0, 0] ) + ( 0.032 * cuUpper1@[0, 0] ) ) + ( ( 0.032 * 1.73205080756888 ) * cuUpper2@[0, 0] ) ) - ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 1] ) ) ) ) ) ) - 0.6 ) ) ) )
	}
	print ( "Error for cuUpper:", sqrt ( normErr_cu_Upper ) )
	errcu@current = sqrt ( ( normErr_cu_Lower + normErr_cu_Upper ) )
	print ( "Error for cu:", errcu@current )
	Var normErr_cv_Lower : Real = 0
	loop over cvLower0 with reduction ( + : normErr_cv_Lower ) {
		normErr_cv_Lower += ( ( ( ( ( ( 325.520833333333 * ( ( ( ( ( ( 0.016 * 1.4142135623731 ) * cvLower0@[0, 0] ) - ( 0.064 * cvLower1@[0, 0] ) ) - ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 0] ) ) ) ) ) ) - 0.3 ) * ( ( ( ( ( 0.016 * 1.4142135623731 ) * cvLower0@[0, 0] ) - ( 0.064 * cvLower1@[0, 0] ) ) - ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 0] ) ) ) ) ) ) - 0.3 ) ) ) + ( 325.520833333333 * ( ( ( ( ( ( 0.016 * 1.4142135623731 ) * cvLower0@[0, 0] ) + ( 0.032 * cvLower1@[0, 0] ) ) - ( 0.04 * sin ( ( M_PI * ( ( ( ( ( 3.33333333333333E-4 * t ) + ( 8.33333333333333E-4 * vf_nodePosition_0@[0, 0] ) ) + ( 8.33333333333333E-4 * vf_nodePosition_0@[0, 1] ) ) + ( 8.33333333333333E-4 * vf_nodePosition_1@[0, 0] ) ) + ( 8.33333333333333E-4 * vf_nodePosition_1@[0, 1] ) ) ) ) ) ) - 0.3 ) * ( ( ( ( ( 0.016 * 1.4142135623731 ) * cvLower0@[0, 0] ) + ( 0.032 * cvLower1@[0, 0] ) ) - ( 0.04 * sin ( ( M_PI * ( ( ( ( ( 3.33333333333333E-4 * t ) + ( 8.33333333333333E-4 * vf_nodePosition_0@[0, 0] ) ) + ( 8.33333333333333E-4 * vf_nodePosition_0@[0, 1] ) ) + ( 8.33333333333333E-4 * vf_nodePosition_1@[0, 0] ) ) + ( 8.33333333333333E-4 * vf_nodePosition_1@[0, 1] ) ) ) ) ) ) - 0.3 ) ) ) ) + ( 325.520833333333 * ( ( ( ( ( ( ( 0.016 * 1.4142135623731 ) * cvLower0@[0, 0] ) - ( 0.016 * cvLower1@[0, 0] ) ) - ( ( 0.016 * 1.73205080756888 ) * cvLower2@[0, 0] ) ) - ( 0.04 * sin ( ( M_PI * ( ( ( ( ( 3.33333333333333E-4 * t ) + ( 8.33333333333333E-4 * vf_nodePosition_0@[0, 1] ) ) + ( 8.33333333333333E-4 * vf_nodePosition_0@[1, 0] ) ) + ( 8.33333333333333E-4 * vf_nodePosition_1@[0, 1] ) ) + ( 8.33333333333333E-4 * vf_nodePosition_1@[1, 0] ) ) ) ) ) ) - 0.3 ) * ( ( ( ( ( ( 0.016 * 1.4142135623731 ) * cvLower0@[0, 0] ) - ( 0.016 * cvLower1@[0, 0] ) ) - ( ( 0.016 * 1.73205080756888 ) * cvLower2@[0, 0] ) ) - ( 0.04 * sin ( ( M_PI * ( ( ( ( ( 3.33333333333333E-4 * t ) + ( 8.33333333333333E-4 * vf_nodePosition_0@[0, 1] ) ) + ( 8.33333333333333E-4 * vf_nodePosition_0@[1, 0] ) ) + ( 8.33333333333333E-4 * vf_nodePosition_1@[0, 1] ) ) + ( 8.33333333333333E-4 * vf_nodePosition_1@[1, 0] ) ) ) ) ) ) - 0.3 ) ) ) ) + ( 325.520833333333 * ( ( ( ( ( ( ( 0.016 * 1.4142135623731 ) * cvLower0@[0, 0] ) - ( 0.016 * cvLower1@[0, 0] ) ) + ( ( 0.016 * 1.73205080756888 ) * cvLower2@[0, 0] ) ) - ( 0.04 * sin ( ( M_PI * ( ( ( ( ( 3.33333333333333E-4 * t ) + ( 8.33333333333333E-4 * vf_nodePosition_0@[0, 0] ) ) + ( 8.33333333333333E-4 * vf_nodePosition_0@[1, 0] ) ) + ( 8.33333333333333E-4 * vf_nodePosition_1@[0, 0] ) ) + ( 8.33333333333333E-4 * vf_nodePosition_1@[1, 0] ) ) ) ) ) ) - 0.3 ) * ( ( ( ( ( ( 0.016 * 1.4142135623731 ) * cvLower0@[0, 0] ) - ( 0.016 * cvLower1@[0, 0] ) ) + ( ( 0.016 * 1.73205080756888 ) * cvLower2@[0, 0] ) ) - ( 0.04 * sin ( ( M_PI * ( ( ( ( ( 3.33333333333333E-4 * t ) + ( 8.33333333333333E-4 * vf_nodePosition_0@[0, 0] ) ) + ( 8.33333333333333E-4 * vf_nodePosition_0@[1, 0] ) ) + ( 8.33333333333333E-4 * vf_nodePosition_1@[0, 0] ) ) + ( 8.33333333333333E-4 * vf_nodePosition_1@[1, 0] ) ) ) ) ) ) - 0.3 ) ) ) ) + ( 325.520833333333 * ( ( ( ( ( ( ( 0.016 * 1.4142135623731 ) * cvLower0@[0, 0] ) + ( 0.032 * cvLower1@[0, 0] ) ) - ( ( 0.032 * 1.73205080756888 ) * cvLower2@[0, 0] ) ) - ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 1] ) ) ) ) ) ) - 0.3 ) * ( ( ( ( ( ( 0.016 * 1.4142135623731 ) * cvLower0@[0, 0] ) + ( 0.032 * cvLower1@[0, 0] ) ) - ( ( 0.032 * 1.73205080756888 ) * cvLower2@[0, 0] ) ) - ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 1] ) ) ) ) ) ) - 0.3 ) ) ) ) + ( 325.520833333333 * ( ( ( ( ( ( ( 0.016 * 1.4142135623731 ) * cvLower0@[0, 0] ) + ( 0.032 * cvLower1@[0, 0] ) ) + ( ( 0.032 * 1.73205080756888 ) * cvLower2@[0, 0] ) ) - ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 0] ) ) ) ) ) ) - 0.3 ) * ( ( ( ( ( ( 0.016 * 1.4142135623731 ) * cvLower0@[0, 0] ) + ( 0.032 * cvLower1@[0, 0] ) ) + ( ( 0.032 * 1.73205080756888 ) * cvLower2@[0, 0] ) ) - ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 0] ) ) ) ) ) ) - 0.3 ) ) ) )
	}
	print ( "Error for cvLower:", sqrt ( normErr_cv_Lower ) )
	Var normErr_cv_Upper : Real = 0
	loop over cvUpper0 with reduction ( + : normErr_cv_Upper ) {
		normErr_cv_Upper += ( ( ( ( ( ( 325.520833333333 * ( ( ( ( ( ( 0.016 * 1.4142135623731 ) * cvUpper0@[0, 0] ) - ( 0.064 * cvUpper1@[0, 0] ) ) - ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 1] ) ) ) ) ) ) - 0.3 ) * ( ( ( ( ( 0.016 * 1.4142135623731 ) * cvUpper0@[0, 0] ) - ( 0.064 * cvUpper1@[0, 0] ) ) - ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 1] ) ) ) ) ) ) - 0.3 ) ) ) + ( 325.520833333333 * ( ( ( ( ( ( 0.016 * 1.4142135623731 ) * cvUpper0@[0, 0] ) + ( 0.032 * cvUpper1@[0, 0] ) ) - ( 0.04 * sin ( ( M_PI * ( ( ( ( ( 3.33333333333333E-4 * t ) + ( 8.33333333333333E-4 * vf_nodePosition_0@[1, 0] ) ) + ( 8.33333333333333E-4 * vf_nodePosition_0@[1, 1] ) ) + ( 8.33333333333333E-4 * vf_nodePosition_1@[1, 0] ) ) + ( 8.33333333333333E-4 * vf_nodePosition_1@[1, 1] ) ) ) ) ) ) - 0.3 ) * ( ( ( ( ( 0.016 * 1.4142135623731 ) * cvUpper0@[0, 0] ) + ( 0.032 * cvUpper1@[0, 0] ) ) - ( 0.04 * sin ( ( M_PI * ( ( ( ( ( 3.33333333333333E-4 * t ) + ( 8.33333333333333E-4 * vf_nodePosition_0@[1, 0] ) ) + ( 8.33333333333333E-4 * vf_nodePosition_0@[1, 1] ) ) + ( 8.33333333333333E-4 * vf_nodePosition_1@[1, 0] ) ) + ( 8.33333333333333E-4 * vf_nodePosition_1@[1, 1] ) ) ) ) ) ) - 0.3 ) ) ) ) + ( 325.520833333333 * ( ( ( ( ( ( ( 0.016 * 1.4142135623731 ) * cvUpper0@[0, 0] ) - ( 0.016 * cvUpper1@[0, 0] ) ) - ( ( 0.016 * 1.73205080756888 ) * cvUpper2@[0, 0] ) ) - ( 0.04 * sin ( ( M_PI * ( ( ( ( ( 3.33333333333333E-4 * t ) + ( 8.33333333333333E-4 * vf_nodePosition_0@[0, 1] ) ) + ( 8.33333333333333E-4 * vf_nodePosition_0@[1, 0] ) ) + ( 8.33333333333333E-4 * vf_nodePosition_1@[0, 1] ) ) + ( 8.33333333333333E-4 * vf_nodePosition_1@[1, 0] ) ) ) ) ) ) - 0.3 ) * ( ( ( ( ( ( 0.016 * 1.4142135623731 ) * cvUpper0@[0, 0] ) - ( 0.016 * cvUpper1@[0, 0] ) ) - ( ( 0.016 * 1.73205080756888 ) * cvUpper2@[0, 0] ) ) - ( 0.04 * sin ( ( M_PI * ( ( ( ( ( 3.33333333333333E-4 * t ) + ( 8.33333333333333E-4 * vf_nodePosition_0@[0, 1] ) ) + ( 8.33333333333333E-4 * vf_nodePosition_0@[1, 0] ) ) + ( 8.33333333333333E-4 * vf_nodePosition_1@[0, 1] ) ) + ( 8.33333333333333E-4 * vf_nodePosition_1@[1, 0] ) ) ) ) ) ) - 0.3 ) ) ) ) + ( 325.520833333333 * ( ( ( ( ( ( ( 0.016 * 1.4142135623731 ) * cvUpper0@[0, 0] ) - ( 0.016 * cvUpper1@[0, 0] ) ) + ( ( 0.016 * 1.73205080756888 ) * cvUpper2@[0, 0] ) ) - ( 0.04 * sin ( ( M_PI * ( ( ( ( ( 3.33333333333333E-4 * t ) + ( 8.33333333333333E-4 * vf_nodePosition_0@[0, 1] ) ) + ( 8.33333333333333E-4 * vf_nodePosition_0@[1, 1] ) ) + ( 8.33333333333333E-4 * vf_nodePosition_1@[0, 1] ) ) + ( 8.33333333333333E-4 * vf_nodePosition_1@[1, 1] ) ) ) ) ) ) - 0.3 ) * ( ( ( ( ( ( 0.016 * 1.4142135623731 ) * cvUpper0@[0, 0] ) - ( 0.016 * cvUpper1@[0, 0] ) ) + ( ( 0.016 * 1.73205080756888 ) * cvUpper2@[0, 0] ) ) - ( 0.04 * sin ( ( M_PI * ( ( ( ( ( 3.33333333333333E-4 * t ) + ( 8.33333333333333E-4 * vf_nodePosition_0@[0, 1] ) ) + ( 8.33333333333333E-4 * vf_nodePosition_0@[1, 1] ) ) + ( 8.33333333333333E-4 * vf_nodePosition_1@[0, 1] ) ) + ( 8.33333333333333E-4 * vf_nodePosition_1@[1, 1] ) ) ) ) ) ) - 0.3 ) ) ) ) + ( 325.520833333333 * ( ( ( ( ( ( ( 0.016 * 1.4142135623731 ) * cvUpper0@[0, 0] ) + ( 0.032 * cvUpper1@[0, 0] ) ) - ( ( 0.032 * 1.73205080756888 ) * cvUpper2@[0, 0] ) ) - ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 0] ) ) ) ) ) ) - 0.3 ) * ( ( ( ( ( ( 0.016 * 1.4142135623731 ) * cvUpper0@[0, 0] ) + ( 0.032 * cvUpper1@[0, 0] ) ) - ( ( 0.032 * 1.73205080756888 ) * cvUpper2@[0, 0] ) ) - ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 0] ) ) ) ) ) ) - 0.3 ) ) ) ) + ( 325.520833333333 * ( ( ( ( ( ( ( 0.016 * 1.4142135623731 ) * cvUpper0@[0, 0] ) + ( 0.032 * cvUpper1@[0, 0] ) ) + ( ( 0.032 * 1.73205080756888 ) * cvUpper2@[0, 0] ) ) - ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 1] ) ) ) ) ) ) - 0.3 ) * ( ( ( ( ( ( 0.016 * 1.4142135623731 ) * cvUpper0@[0, 0] ) + ( 0.032 * cvUpper1@[0, 0] ) ) + ( ( 0.032 * 1.73205080756888 ) * cvUpper2@[0, 0] ) ) - ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 1] ) ) ) ) ) ) - 0.3 ) ) ) )
	}
	print ( "Error for cvUpper:", sqrt ( normErr_cv_Upper ) )
	errcv@current = sqrt ( ( normErr_cv_Lower + normErr_cv_Upper ) )
	print ( "Error for cv:", errcv@current )
}

Function PrintDebugFields@all {
	
}

Function PrintVTK@finest {
	loop over cetaLower0 {
		etaDiscLower0 = ( ( ( ( 0.016 * 1.4142135623731 ) * cetaLower0@[0, 0] ) + ( 0.032 * cetaLower1@[0, 0] ) ) + ( ( 0.032 * 1.73205080756888 ) * cetaLower2@[0, 0] ) )
		uDiscLower0 = ( ( ( ( 0.016 * 1.4142135623731 ) * cuLower0@[0, 0] ) + ( 0.032 * cuLower1@[0, 0] ) ) + ( ( 0.032 * 1.73205080756888 ) * cuLower2@[0, 0] ) )
		vDiscLower0 = ( ( ( ( 0.016 * 1.4142135623731 ) * cvLower0@[0, 0] ) + ( 0.032 * cvLower1@[0, 0] ) ) + ( ( 0.032 * 1.73205080756888 ) * cvLower2@[0, 0] ) )
		etaDiscLower1 = ( ( ( 0.016 * 1.4142135623731 ) * cetaLower0@[0, 0] ) - ( 0.064 * cetaLower1@[0, 0] ) )
		uDiscLower1 = ( ( ( 0.016 * 1.4142135623731 ) * cuLower0@[0, 0] ) - ( 0.064 * cuLower1@[0, 0] ) )
		vDiscLower1 = ( ( ( 0.016 * 1.4142135623731 ) * cvLower0@[0, 0] ) - ( 0.064 * cvLower1@[0, 0] ) )
		etaDiscLower2 = ( ( ( ( 0.016 * 1.4142135623731 ) * cetaLower0@[0, 0] ) + ( 0.032 * cetaLower1@[0, 0] ) ) - ( ( 0.032 * 1.73205080756888 ) * cetaLower2@[0, 0] ) )
		uDiscLower2 = ( ( ( ( 0.016 * 1.4142135623731 ) * cuLower0@[0, 0] ) + ( 0.032 * cuLower1@[0, 0] ) ) - ( ( 0.032 * 1.73205080756888 ) * cuLower2@[0, 0] ) )
		vDiscLower2 = ( ( ( ( 0.016 * 1.4142135623731 ) * cvLower0@[0, 0] ) + ( 0.032 * cvLower1@[0, 0] ) ) - ( ( 0.032 * 1.73205080756888 ) * cvLower2@[0, 0] ) )
		etaDiscUpper0 = ( ( ( ( 0.016 * 1.4142135623731 ) * cetaUpper0@[0, 0] ) + ( 0.032 * cetaUpper1@[0, 0] ) ) + ( ( 0.032 * 1.73205080756888 ) * cetaUpper2@[0, 0] ) )
		uDiscUpper0 = ( ( ( ( 0.016 * 1.4142135623731 ) * cuUpper0@[0, 0] ) + ( 0.032 * cuUpper1@[0, 0] ) ) + ( ( 0.032 * 1.73205080756888 ) * cuUpper2@[0, 0] ) )
		vDiscUpper0 = ( ( ( ( 0.016 * 1.4142135623731 ) * cvUpper0@[0, 0] ) + ( 0.032 * cvUpper1@[0, 0] ) ) + ( ( 0.032 * 1.73205080756888 ) * cvUpper2@[0, 0] ) )
		etaDiscUpper1 = ( ( ( 0.016 * 1.4142135623731 ) * cetaUpper0@[0, 0] ) - ( 0.064 * cetaUpper1@[0, 0] ) )
		uDiscUpper1 = ( ( ( 0.016 * 1.4142135623731 ) * cuUpper0@[0, 0] ) - ( 0.064 * cuUpper1@[0, 0] ) )
		vDiscUpper1 = ( ( ( 0.016 * 1.4142135623731 ) * cvUpper0@[0, 0] ) - ( 0.064 * cvUpper1@[0, 0] ) )
		etaDiscUpper2 = ( ( ( ( 0.016 * 1.4142135623731 ) * cetaUpper0@[0, 0] ) + ( 0.032 * cetaUpper1@[0, 0] ) ) - ( ( 0.032 * 1.73205080756888 ) * cetaUpper2@[0, 0] ) )
		uDiscUpper2 = ( ( ( ( 0.016 * 1.4142135623731 ) * cuUpper0@[0, 0] ) + ( 0.032 * cuUpper1@[0, 0] ) ) - ( ( 0.032 * 1.73205080756888 ) * cuUpper2@[0, 0] ) )
		vDiscUpper2 = ( ( ( ( 0.016 * 1.4142135623731 ) * cvUpper0@[0, 0] ) + ( 0.032 * cvUpper1@[0, 0] ) ) - ( ( 0.032 * 1.73205080756888 ) * cvUpper2@[0, 0] ) )
	}
	Var filename_vtk : String = ""
	buildString ( filename_vtk, "../../data/swe_o1_rk2_l4_noPloy_uniform_-_", print_count, ".vtk" )
	printVtkSWE ( filename_vtk, levels@current (  ) )
}

Function SetupPhase@all {
	startTimer ( "SetupPhase" )
	it = 0
	t = 0
	print ( "t:", t )
	InitTriInfo (  )
	InitBath (  )
	CheckGrid (  )
	InitFieldsAnalytical (  )
	UpdateCTilde (  )
	CommunicateAll (  )
	ApplyAllBc (  )
	PrintError (  )
	PrintDebugFields (  )
	PrintVTK (  )
	print_count += 1
	print ( "------------------" )
	stopTimer ( "SetupPhase" )
}

Function UpdateUnknowns@all {
	startTimer ( "UpdateUnknowns" )
	loop over fragments {
		loop over cetaEdgeDLower0 only inner [0, 0] {
			Var tmp0 : Real = ( ( ( ( 0.016 * 1.4142135623731 ) * cetaLower0@[0, 0] ) - ( 0.016 * cetaLower1@[0, 0] ) ) - ( ( 0.016 * 1.73205080756888 ) * cetaLower2@[0, 0] ) )
			Var tmp1 : Real = ( ( ( 0.016 * 1.73205080756888 ) * cetaLower1@[0, 0] ) - ( 0.016 * cetaLower2@[0, 0] ) )
			Var tmp2 : Real = ( ( ( ( 0.016 * 1.4142135623731 ) * cetaUpper0@[0, 0] ) - ( 0.016 * cetaUpper1@[0, 0] ) ) - ( ( 0.016 * 1.73205080756888 ) * cetaUpper2@[0, 0] ) )
			Var tmp3 : Real = ( ( ( -0.016 * 1.73205080756888 ) * cetaUpper1@[0, 0] ) + ( 0.016 * cetaUpper2@[0, 0] ) )
			Var tmp4 : Real = ( ( ( ( 0.016 * 1.4142135623731 ) * cuLower0@[0, 0] ) - ( 0.016 * cuLower1@[0, 0] ) ) - ( ( 0.016 * 1.73205080756888 ) * cuLower2@[0, 0] ) )
			Var tmp5 : Real = ( ( ( 0.016 * 1.73205080756888 ) * cuLower1@[0, 0] ) - ( 0.016 * cuLower2@[0, 0] ) )
			Var tmp6 : Real = ( ( ( ( 0.016 * 1.4142135623731 ) * cuUpper0@[0, 0] ) - ( 0.016 * cuUpper1@[0, 0] ) ) - ( ( 0.016 * 1.73205080756888 ) * cuUpper2@[0, 0] ) )
			Var tmp7 : Real = ( ( ( -0.016 * 1.73205080756888 ) * cuUpper1@[0, 0] ) + ( 0.016 * cuUpper2@[0, 0] ) )
			Var tmp8 : Real = ( ( ( ( 0.016 * 1.4142135623731 ) * cvLower0@[0, 0] ) - ( 0.016 * cvLower1@[0, 0] ) ) - ( ( 0.016 * 1.73205080756888 ) * cvLower2@[0, 0] ) )
			Var tmp9 : Real = ( ( ( 0.016 * 1.73205080756888 ) * cvLower1@[0, 0] ) - ( 0.016 * cvLower2@[0, 0] ) )
			Var tmp10 : Real = ( ( ( ( 0.016 * 1.4142135623731 ) * cvUpper0@[0, 0] ) - ( 0.016 * cvUpper1@[0, 0] ) ) - ( ( 0.016 * 1.73205080756888 ) * cvUpper2@[0, 0] ) )
			Var tmp11 : Real = ( ( ( -0.016 * 1.73205080756888 ) * cvUpper1@[0, 0] ) + ( 0.016 * cvUpper2@[0, 0] ) )
			Var tmp12 : Real = ( ( ( ( 0.016 * 1.4142135623731 ) * cuTildeLower0@[0, 0] ) - ( 0.016 * cuTildeLower1@[0, 0] ) ) - ( ( 0.016 * 1.73205080756888 ) * cuTildeLower2@[0, 0] ) )
			Var tmp13 : Real = ( ( ( 0.016 * 1.73205080756888 ) * cuTildeLower1@[0, 0] ) - ( 0.016 * cuTildeLower2@[0, 0] ) )
			Var tmp14 : Real = ( ( ( ( 0.016 * 1.4142135623731 ) * cuTildeUpper0@[0, 0] ) - ( 0.016 * cuTildeUpper1@[0, 0] ) ) - ( ( 0.016 * 1.73205080756888 ) * cuTildeUpper2@[0, 0] ) )
			Var tmp15 : Real = ( ( ( -0.016 * 1.73205080756888 ) * cuTildeUpper1@[0, 0] ) + ( 0.016 * cuTildeUpper2@[0, 0] ) )
			Var tmp16 : Real = ( ( ( ( 0.016 * 1.4142135623731 ) * cvTildeLower0@[0, 0] ) - ( 0.016 * cvTildeLower1@[0, 0] ) ) - ( ( 0.016 * 1.73205080756888 ) * cvTildeLower2@[0, 0] ) )
			Var tmp17 : Real = ( ( ( 0.016 * 1.73205080756888 ) * cvTildeLower1@[0, 0] ) - ( 0.016 * cvTildeLower2@[0, 0] ) )
			Var tmp18 : Real = ( ( ( ( 0.016 * 1.4142135623731 ) * cvTildeUpper0@[0, 0] ) - ( 0.016 * cvTildeUpper1@[0, 0] ) ) - ( ( 0.016 * 1.73205080756888 ) * cvTildeUpper2@[0, 0] ) )
			Var tmp19 : Real = ( ( ( -0.016 * 1.73205080756888 ) * cvTildeUpper1@[0, 0] ) + ( 0.016 * cvTildeUpper2@[0, 0] ) )
			Var tmp20 : Real = ( ( ( ( 0.016 * 1.4142135623731 ) * cetaLower0@[0, 0] ) - ( 0.016 * cetaLower1@[0, 0] ) ) - ( ( 0.016 * 1.73205080756888 ) * cetaLower2@[0, 0] ) )
			Var tmp21 : Real = ( ( ( 0.016 * 1.73205080756888 ) * cetaLower1@[0, 0] ) - ( 0.016 * cetaLower2@[0, 0] ) )
			Var tmp22 : Real = ( ( ( ( 0.016 * 1.4142135623731 ) * cetaUpper0@[0, 0] ) - ( 0.016 * cetaUpper1@[0, 0] ) ) - ( ( 0.016 * 1.73205080756888 ) * cetaUpper2@[0, 0] ) )
			Var tmp23 : Real = ( ( ( -0.016 * 1.73205080756888 ) * cetaUpper1@[0, 0] ) + ( 0.016 * cetaUpper2@[0, 0] ) )
			Var tmp24 : Real = ( ( ( ( 0.016 * 1.4142135623731 ) * cuLower0@[0, 0] ) - ( 0.016 * cuLower1@[0, 0] ) ) - ( ( 0.016 * 1.73205080756888 ) * cuLower2@[0, 0] ) )
			Var tmp25 : Real = ( ( ( 0.016 * 1.73205080756888 ) * cuLower1@[0, 0] ) - ( 0.016 * cuLower2@[0, 0] ) )
			Var tmp26 : Real = ( ( ( ( 0.016 * 1.4142135623731 ) * cuUpper0@[0, 0] ) - ( 0.016 * cuUpper1@[0, 0] ) ) - ( ( 0.016 * 1.73205080756888 ) * cuUpper2@[0, 0] ) )
			Var tmp27 : Real = ( ( ( -0.016 * 1.73205080756888 ) * cuUpper1@[0, 0] ) + ( 0.016 * cuUpper2@[0, 0] ) )
			Var tmp28 : Real = ( ( ( ( 0.016 * 1.4142135623731 ) * cvLower0@[0, 0] ) - ( 0.016 * cvLower1@[0, 0] ) ) - ( ( 0.016 * 1.73205080756888 ) * cvLower2@[0, 0] ) )
			Var tmp29 : Real = ( ( ( 0.016 * 1.73205080756888 ) * cvLower1@[0, 0] ) - ( 0.016 * cvLower2@[0, 0] ) )
			Var tmp30 : Real = ( ( ( ( 0.016 * 1.4142135623731 ) * cvUpper0@[0, 0] ) - ( 0.016 * cvUpper1@[0, 0] ) ) - ( ( 0.016 * 1.73205080756888 ) * cvUpper2@[0, 0] ) )
			Var tmp31 : Real = ( ( ( -0.016 * 1.73205080756888 ) * cvUpper1@[0, 0] ) + ( 0.016 * cvUpper2@[0, 0] ) )
			Var tmp32 : Real = ( ( ( ( 0.016 * 1.4142135623731 ) * cuTildeLower0@[0, 0] ) - ( 0.016 * cuTildeLower1@[0, 0] ) ) - ( ( 0.016 * 1.73205080756888 ) * cuTildeLower2@[0, 0] ) )
			Var tmp33 : Real = ( ( ( 0.016 * 1.73205080756888 ) * cuTildeLower1@[0, 0] ) - ( 0.016 * cuTildeLower2@[0, 0] ) )
			Var tmp34 : Real = ( ( ( ( 0.016 * 1.4142135623731 ) * cuTildeUpper0@[0, 0] ) - ( 0.016 * cuTildeUpper1@[0, 0] ) ) - ( ( 0.016 * 1.73205080756888 ) * cuTildeUpper2@[0, 0] ) )
			Var tmp35 : Real = ( ( ( -0.016 * 1.73205080756888 ) * cuTildeUpper1@[0, 0] ) + ( 0.016 * cuTildeUpper2@[0, 0] ) )
			Var tmp36 : Real = ( ( ( ( 0.016 * 1.4142135623731 ) * cvTildeLower0@[0, 0] ) - ( 0.016 * cvTildeLower1@[0, 0] ) ) - ( ( 0.016 * 1.73205080756888 ) * cvTildeLower2@[0, 0] ) )
			Var tmp37 : Real = ( ( ( 0.016 * 1.73205080756888 ) * cvTildeLower1@[0, 0] ) - ( 0.016 * cvTildeLower2@[0, 0] ) )
			Var tmp38 : Real = ( ( ( ( 0.016 * 1.4142135623731 ) * cvTildeUpper0@[0, 0] ) - ( 0.016 * cvTildeUpper1@[0, 0] ) ) - ( ( 0.016 * 1.73205080756888 ) * cvTildeUpper2@[0, 0] ) )
			Var tmp39 : Real = ( ( ( -0.016 * 1.73205080756888 ) * cvTildeUpper1@[0, 0] ) + ( 0.016 * cvTildeUpper2@[0, 0] ) )
			Var lam0 : Real = ( ( sqrt ( g ) * sqrt ( fmax ( 0, fmax ( ( ( ( 0.5 * bath@[0, 1] ) + ( 0.5 * bath@[1, 0] ) ) + tmp20 ), ( ( ( 0.5 * bath@[0, 1] ) + ( 0.5 * bath@[1, 0] ) ) + tmp22 ) ) ) ) ) + fmax ( fabs ( ( ( ( ( 1.0 / 2.0 ) * M_SQRT2 ) * tmp32 ) + ( ( ( 1.0 / 2.0 ) * M_SQRT2 ) * tmp36 ) ) ), fabs ( ( ( ( ( 1.0 / 2.0 ) * M_SQRT2 ) * tmp34 ) + ( ( ( 1.0 / 2.0 ) * M_SQRT2 ) * tmp38 ) ) ) ) )
			Var tmp40 : Real = ( ( ( 0.5 * 1.4142135623731 ) * tmp4 ) + ( ( 0.5 * 1.4142135623731 ) * tmp8 ) )
			Var tmp41 : Real = ( ( ( 0.5 * 1.4142135623731 ) * tmp5 ) + ( ( 0.5 * 1.4142135623731 ) * tmp9 ) )
			Var tmp42 : Real = ( ( ( 0.5 * 1.4142135623731 ) * tmp10 ) + ( ( 0.5 * 1.4142135623731 ) * tmp6 ) )
			Var tmp43 : Real = ( ( ( 0.5 * 1.4142135623731 ) * tmp11 ) + ( ( 0.5 * 1.4142135623731 ) * tmp7 ) )
			Var tmp44 : Real = ( ( ( ( ( ( ( ( ( ( ( ( ( 0.25 * 1.4142135623731 ) * bath@[0, 1] ) * g ) * tmp0 ) + ( ( ( ( 0.0833333333333333 * 2.44948974278318 ) * bath@[0, 1] ) * g ) * tmp1 ) ) + ( ( ( ( 0.25 * 1.4142135623731 ) * bath@[1, 0] ) * g ) * tmp0 ) ) - ( ( ( ( 0.0833333333333333 * 2.44948974278318 ) * bath@[1, 0] ) * g ) * tmp1 ) ) + ( ( ( 0.25 * 1.4142135623731 ) * g ) * ( tmp0 * tmp0 ) ) ) + ( ( ( 0.25 * 1.4142135623731 ) * g ) * ( tmp1 * tmp1 ) ) ) + ( ( ( 0.5 * 1.4142135623731 ) * tmp12 ) * tmp4 ) ) + ( ( ( 0.5 * 1.4142135623731 ) * tmp13 ) * tmp5 ) ) + ( ( ( 0.5 * 1.4142135623731 ) * tmp16 ) * tmp4 ) ) + ( ( ( 0.5 * 1.4142135623731 ) * tmp17 ) * tmp5 ) )
			Var tmp45 : Real = ( ( ( ( ( ( ( ( ( ( ( ( 0.0833333333333333 * 2.44948974278318 ) * bath@[0, 1] ) * g ) * tmp0 ) + ( ( ( ( 0.25 * 1.4142135623731 ) * bath@[0, 1] ) * g ) * tmp1 ) ) - ( ( ( ( 0.0833333333333333 * 2.44948974278318 ) * bath@[1, 0] ) * g ) * tmp0 ) ) + ( ( ( ( 0.25 * 1.4142135623731 ) * bath@[1, 0] ) * g ) * tmp1 ) ) + ( ( ( ( 0.5 * 1.4142135623731 ) * g ) * tmp0 ) * tmp1 ) ) + ( ( ( 0.5 * 1.4142135623731 ) * tmp12 ) * tmp5 ) ) + ( ( ( 0.5 * 1.4142135623731 ) * tmp13 ) * tmp4 ) ) + ( ( ( 0.5 * 1.4142135623731 ) * tmp16 ) * tmp5 ) ) + ( ( ( 0.5 * 1.4142135623731 ) * tmp17 ) * tmp4 ) )
			Var tmp46 : Real = ( ( ( ( ( ( ( ( ( ( ( ( ( 0.25 * 1.4142135623731 ) * bath@[0, 1] ) * g ) * tmp2 ) + ( ( ( ( 0.0833333333333333 * 2.44948974278318 ) * bath@[0, 1] ) * g ) * tmp3 ) ) + ( ( ( ( 0.25 * 1.4142135623731 ) * bath@[1, 0] ) * g ) * tmp2 ) ) - ( ( ( ( 0.0833333333333333 * 2.44948974278318 ) * bath@[1, 0] ) * g ) * tmp3 ) ) + ( ( ( 0.25 * 1.4142135623731 ) * g ) * ( tmp2 * tmp2 ) ) ) + ( ( ( 0.25 * 1.4142135623731 ) * g ) * ( tmp3 * tmp3 ) ) ) + ( ( ( 0.5 * 1.4142135623731 ) * tmp14 ) * tmp6 ) ) + ( ( ( 0.5 * 1.4142135623731 ) * tmp15 ) * tmp7 ) ) + ( ( ( 0.5 * 1.4142135623731 ) * tmp18 ) * tmp6 ) ) + ( ( ( 0.5 * 1.4142135623731 ) * tmp19 ) * tmp7 ) )
			Var tmp47 : Real = ( ( ( ( ( ( ( ( ( ( ( ( 0.0833333333333333 * 2.44948974278318 ) * bath@[0, 1] ) * g ) * tmp2 ) + ( ( ( ( 0.25 * 1.4142135623731 ) * bath@[0, 1] ) * g ) * tmp3 ) ) - ( ( ( ( 0.0833333333333333 * 2.44948974278318 ) * bath@[1, 0] ) * g ) * tmp2 ) ) + ( ( ( ( 0.25 * 1.4142135623731 ) * bath@[1, 0] ) * g ) * tmp3 ) ) + ( ( ( ( 0.5 * 1.4142135623731 ) * g ) * tmp2 ) * tmp3 ) ) + ( ( ( 0.5 * 1.4142135623731 ) * tmp14 ) * tmp7 ) ) + ( ( ( 0.5 * 1.4142135623731 ) * tmp15 ) * tmp6 ) ) + ( ( ( 0.5 * 1.4142135623731 ) * tmp18 ) * tmp7 ) ) + ( ( ( 0.5 * 1.4142135623731 ) * tmp19 ) * tmp6 ) )
			Var tmp48 : Real = ( ( ( ( ( ( ( ( ( ( ( ( ( 0.25 * 1.4142135623731 ) * bath@[0, 1] ) * g ) * tmp0 ) + ( ( ( ( 0.0833333333333333 * 2.44948974278318 ) * bath@[0, 1] ) * g ) * tmp1 ) ) + ( ( ( ( 0.25 * 1.4142135623731 ) * bath@[1, 0] ) * g ) * tmp0 ) ) - ( ( ( ( 0.0833333333333333 * 2.44948974278318 ) * bath@[1, 0] ) * g ) * tmp1 ) ) + ( ( ( 0.25 * 1.4142135623731 ) * g ) * ( tmp0 * tmp0 ) ) ) + ( ( ( 0.25 * 1.4142135623731 ) * g ) * ( tmp1 * tmp1 ) ) ) + ( ( ( 0.5 * 1.4142135623731 ) * tmp12 ) * tmp8 ) ) + ( ( ( 0.5 * 1.4142135623731 ) * tmp13 ) * tmp9 ) ) + ( ( ( 0.5 * 1.4142135623731 ) * tmp16 ) * tmp8 ) ) + ( ( ( 0.5 * 1.4142135623731 ) * tmp17 ) * tmp9 ) )
			Var tmp49 : Real = ( ( ( ( ( ( ( ( ( ( ( ( 0.0833333333333333 * 2.44948974278318 ) * bath@[0, 1] ) * g ) * tmp0 ) + ( ( ( ( 0.25 * 1.4142135623731 ) * bath@[0, 1] ) * g ) * tmp1 ) ) - ( ( ( ( 0.0833333333333333 * 2.44948974278318 ) * bath@[1, 0] ) * g ) * tmp0 ) ) + ( ( ( ( 0.25 * 1.4142135623731 ) * bath@[1, 0] ) * g ) * tmp1 ) ) + ( ( ( ( 0.5 * 1.4142135623731 ) * g ) * tmp0 ) * tmp1 ) ) + ( ( ( 0.5 * 1.4142135623731 ) * tmp12 ) * tmp9 ) ) + ( ( ( 0.5 * 1.4142135623731 ) * tmp13 ) * tmp8 ) ) + ( ( ( 0.5 * 1.4142135623731 ) * tmp16 ) * tmp9 ) ) + ( ( ( 0.5 * 1.4142135623731 ) * tmp17 ) * tmp8 ) )
			Var tmp50 : Real = ( ( ( ( ( ( ( ( ( ( ( ( ( 0.25 * 1.4142135623731 ) * bath@[0, 1] ) * g ) * tmp2 ) + ( ( ( ( 0.0833333333333333 * 2.44948974278318 ) * bath@[0, 1] ) * g ) * tmp3 ) ) + ( ( ( ( 0.25 * 1.4142135623731 ) * bath@[1, 0] ) * g ) * tmp2 ) ) - ( ( ( ( 0.0833333333333333 * 2.44948974278318 ) * bath@[1, 0] ) * g ) * tmp3 ) ) + ( ( ( 0.25 * 1.4142135623731 ) * g ) * ( tmp2 * tmp2 ) ) ) + ( ( ( 0.25 * 1.4142135623731 ) * g ) * ( tmp3 * tmp3 ) ) ) + ( ( ( 0.5 * 1.4142135623731 ) * tmp10 ) * tmp14 ) ) + ( ( ( 0.5 * 1.4142135623731 ) * tmp10 ) * tmp18 ) ) + ( ( ( 0.5 * 1.4142135623731 ) * tmp11 ) * tmp15 ) ) + ( ( ( 0.5 * 1.4142135623731 ) * tmp11 ) * tmp19 ) )
			Var tmp51 : Real = ( ( ( ( ( ( ( ( ( ( ( ( 0.0833333333333333 * 2.44948974278318 ) * bath@[0, 1] ) * g ) * tmp2 ) + ( ( ( ( 0.25 * 1.4142135623731 ) * bath@[0, 1] ) * g ) * tmp3 ) ) - ( ( ( ( 0.0833333333333333 * 2.44948974278318 ) * bath@[1, 0] ) * g ) * tmp2 ) ) + ( ( ( ( 0.25 * 1.4142135623731 ) * bath@[1, 0] ) * g ) * tmp3 ) ) + ( ( ( ( 0.5 * 1.4142135623731 ) * g ) * tmp2 ) * tmp3 ) ) + ( ( ( 0.5 * 1.4142135623731 ) * tmp10 ) * tmp15 ) ) + ( ( ( 0.5 * 1.4142135623731 ) * tmp10 ) * tmp19 ) ) + ( ( ( 0.5 * 1.4142135623731 ) * tmp11 ) * tmp14 ) ) + ( ( ( 0.5 * 1.4142135623731 ) * tmp11 ) * tmp18 ) )
			cetaEdgeDLower0 = ( ( 62.5 * 1.4142135623731 ) * ( ( ( ( ( ( 0.5 * 1.4142135623731 ) * lam0 ) * tmp0 ) - ( ( ( 0.5 * 1.4142135623731 ) * lam0 ) * tmp2 ) ) + ( ( 0.5 * 1.4142135623731 ) * tmp40 ) ) + ( ( 0.5 * 1.4142135623731 ) * tmp42 ) ) )
			cetaEdgeDLower1 = ( ( 62.5 * 1.4142135623731 ) * ( ( ( ( ( ( ( ( ( -0.5 * lam0 ) * tmp0 ) + ( ( ( 0.5 * 1.73205080756888 ) * lam0 ) * tmp1 ) ) + ( ( 0.5 * lam0 ) * tmp2 ) ) - ( ( ( 0.5 * 1.73205080756888 ) * lam0 ) * tmp3 ) ) - ( 0.5 * tmp40 ) ) + ( ( 0.5 * 1.73205080756888 ) * tmp41 ) ) - ( 0.5 * tmp42 ) ) + ( ( 0.5 * 1.73205080756888 ) * tmp43 ) ) )
			cetaEdgeDLower2 = ( ( 62.5 * 1.4142135623731 ) * ( ( ( ( ( ( ( ( ( ( -0.5 * 1.73205080756888 ) * lam0 ) * tmp0 ) - ( ( 0.5 * lam0 ) * tmp1 ) ) + ( ( ( 0.5 * 1.73205080756888 ) * lam0 ) * tmp2 ) ) + ( ( 0.5 * lam0 ) * tmp3 ) ) - ( ( 0.5 * 1.73205080756888 ) * tmp40 ) ) - ( 0.5 * tmp41 ) ) - ( ( 0.5 * 1.73205080756888 ) * tmp42 ) ) - ( 0.5 * tmp43 ) ) )
			cuEdgeDLower0 = ( ( 62.5 * 1.4142135623731 ) * ( ( ( ( ( ( 0.5 * 1.4142135623731 ) * lam0 ) * tmp4 ) - ( ( ( 0.5 * 1.4142135623731 ) * lam0 ) * tmp6 ) ) + ( ( 0.5 * 1.4142135623731 ) * tmp44 ) ) + ( ( 0.5 * 1.4142135623731 ) * tmp46 ) ) )
			cuEdgeDLower1 = ( ( 62.5 * 1.4142135623731 ) * ( ( ( ( ( ( ( ( ( -0.5 * lam0 ) * tmp4 ) + ( ( ( 0.5 * 1.73205080756888 ) * lam0 ) * tmp5 ) ) + ( ( 0.5 * lam0 ) * tmp6 ) ) - ( ( ( 0.5 * 1.73205080756888 ) * lam0 ) * tmp7 ) ) - ( 0.5 * tmp44 ) ) + ( ( 0.5 * 1.73205080756888 ) * tmp45 ) ) - ( 0.5 * tmp46 ) ) + ( ( 0.5 * 1.73205080756888 ) * tmp47 ) ) )
			cuEdgeDLower2 = ( ( 62.5 * 1.4142135623731 ) * ( ( ( ( ( ( ( ( ( ( -0.5 * 1.73205080756888 ) * lam0 ) * tmp4 ) - ( ( 0.5 * lam0 ) * tmp5 ) ) + ( ( ( 0.5 * 1.73205080756888 ) * lam0 ) * tmp6 ) ) + ( ( 0.5 * lam0 ) * tmp7 ) ) - ( ( 0.5 * 1.73205080756888 ) * tmp44 ) ) - ( 0.5 * tmp45 ) ) - ( ( 0.5 * 1.73205080756888 ) * tmp46 ) ) - ( 0.5 * tmp47 ) ) )
			cvEdgeDLower0 = ( ( 62.5 * 1.4142135623731 ) * ( ( ( ( ( ( -0.5 * 1.4142135623731 ) * lam0 ) * tmp10 ) + ( ( ( 0.5 * 1.4142135623731 ) * lam0 ) * tmp8 ) ) + ( ( 0.5 * 1.4142135623731 ) * tmp48 ) ) + ( ( 0.5 * 1.4142135623731 ) * tmp50 ) ) )
			cvEdgeDLower1 = ( ( 62.5 * 1.4142135623731 ) * ( ( ( ( ( ( ( ( ( 0.5 * lam0 ) * tmp10 ) - ( ( ( 0.5 * 1.73205080756888 ) * lam0 ) * tmp11 ) ) - ( ( 0.5 * lam0 ) * tmp8 ) ) + ( ( ( 0.5 * 1.73205080756888 ) * lam0 ) * tmp9 ) ) - ( 0.5 * tmp48 ) ) + ( ( 0.5 * 1.73205080756888 ) * tmp49 ) ) - ( 0.5 * tmp50 ) ) + ( ( 0.5 * 1.73205080756888 ) * tmp51 ) ) )
			cvEdgeDLower2 = ( ( 62.5 * 1.4142135623731 ) * ( ( ( ( ( ( ( ( ( ( 0.5 * 1.73205080756888 ) * lam0 ) * tmp10 ) + ( ( 0.5 * lam0 ) * tmp11 ) ) - ( ( ( 0.5 * 1.73205080756888 ) * lam0 ) * tmp8 ) ) - ( ( 0.5 * lam0 ) * tmp9 ) ) - ( ( 0.5 * 1.73205080756888 ) * tmp48 ) ) - ( 0.5 * tmp49 ) ) - ( ( 0.5 * 1.73205080756888 ) * tmp50 ) ) - ( 0.5 * tmp51 ) ) )
			cetaEdgeDUpper0 = ( ( 62.5 * 1.4142135623731 ) * ( ( ( ( ( ( -0.5 * 1.4142135623731 ) * lam0 ) * tmp0 ) + ( ( ( 0.5 * 1.4142135623731 ) * lam0 ) * tmp2 ) ) - ( ( 0.5 * 1.4142135623731 ) * tmp40 ) ) - ( ( 0.5 * 1.4142135623731 ) * tmp42 ) ) )
			cetaEdgeDUpper1 = ( ( 62.5 * 1.4142135623731 ) * ( ( ( ( ( ( ( ( ( 0.5 * lam0 ) * tmp0 ) + ( ( ( 0.5 * 1.73205080756888 ) * lam0 ) * tmp1 ) ) - ( ( 0.5 * lam0 ) * tmp2 ) ) - ( ( ( 0.5 * 1.73205080756888 ) * lam0 ) * tmp3 ) ) + ( 0.5 * tmp40 ) ) + ( ( 0.5 * 1.73205080756888 ) * tmp41 ) ) + ( 0.5 * tmp42 ) ) + ( ( 0.5 * 1.73205080756888 ) * tmp43 ) ) )
			cetaEdgeDUpper2 = ( ( 62.5 * 1.4142135623731 ) * ( ( ( ( ( ( ( ( ( ( 0.5 * 1.73205080756888 ) * lam0 ) * tmp0 ) - ( ( 0.5 * lam0 ) * tmp1 ) ) - ( ( ( 0.5 * 1.73205080756888 ) * lam0 ) * tmp2 ) ) + ( ( 0.5 * lam0 ) * tmp3 ) ) + ( ( 0.5 * 1.73205080756888 ) * tmp40 ) ) - ( 0.5 * tmp41 ) ) + ( ( 0.5 * 1.73205080756888 ) * tmp42 ) ) - ( 0.5 * tmp43 ) ) )
			cuEdgeDUpper0 = ( ( 62.5 * 1.4142135623731 ) * ( ( ( ( ( ( -0.5 * 1.4142135623731 ) * lam0 ) * tmp4 ) + ( ( ( 0.5 * 1.4142135623731 ) * lam0 ) * tmp6 ) ) - ( ( 0.5 * 1.4142135623731 ) * tmp44 ) ) - ( ( 0.5 * 1.4142135623731 ) * tmp46 ) ) )
			cuEdgeDUpper1 = ( ( 62.5 * 1.4142135623731 ) * ( ( ( ( ( ( ( ( ( 0.5 * lam0 ) * tmp4 ) + ( ( ( 0.5 * 1.73205080756888 ) * lam0 ) * tmp5 ) ) - ( ( 0.5 * lam0 ) * tmp6 ) ) - ( ( ( 0.5 * 1.73205080756888 ) * lam0 ) * tmp7 ) ) + ( 0.5 * tmp44 ) ) + ( ( 0.5 * 1.73205080756888 ) * tmp45 ) ) + ( 0.5 * tmp46 ) ) + ( ( 0.5 * 1.73205080756888 ) * tmp47 ) ) )
			cuEdgeDUpper2 = ( ( 62.5 * 1.4142135623731 ) * ( ( ( ( ( ( ( ( ( ( 0.5 * 1.73205080756888 ) * lam0 ) * tmp4 ) - ( ( 0.5 * lam0 ) * tmp5 ) ) - ( ( ( 0.5 * 1.73205080756888 ) * lam0 ) * tmp6 ) ) + ( ( 0.5 * lam0 ) * tmp7 ) ) + ( ( 0.5 * 1.73205080756888 ) * tmp44 ) ) - ( 0.5 * tmp45 ) ) + ( ( 0.5 * 1.73205080756888 ) * tmp46 ) ) - ( 0.5 * tmp47 ) ) )
			cvEdgeDUpper0 = ( ( 62.5 * 1.4142135623731 ) * ( ( ( ( ( ( 0.5 * 1.4142135623731 ) * lam0 ) * tmp10 ) - ( ( ( 0.5 * 1.4142135623731 ) * lam0 ) * tmp8 ) ) - ( ( 0.5 * 1.4142135623731 ) * tmp48 ) ) - ( ( 0.5 * 1.4142135623731 ) * tmp50 ) ) )
			cvEdgeDUpper1 = ( ( 62.5 * 1.4142135623731 ) * ( ( ( ( ( ( ( ( ( -0.5 * lam0 ) * tmp10 ) - ( ( ( 0.5 * 1.73205080756888 ) * lam0 ) * tmp11 ) ) + ( ( 0.5 * lam0 ) * tmp8 ) ) + ( ( ( 0.5 * 1.73205080756888 ) * lam0 ) * tmp9 ) ) + ( 0.5 * tmp48 ) ) + ( ( 0.5 * 1.73205080756888 ) * tmp49 ) ) + ( 0.5 * tmp50 ) ) + ( ( 0.5 * 1.73205080756888 ) * tmp51 ) ) )
			cvEdgeDUpper2 = ( ( 62.5 * 1.4142135623731 ) * ( ( ( ( ( ( ( ( ( ( -0.5 * 1.73205080756888 ) * lam0 ) * tmp10 ) + ( ( 0.5 * lam0 ) * tmp11 ) ) + ( ( ( 0.5 * 1.73205080756888 ) * lam0 ) * tmp8 ) ) - ( ( 0.5 * lam0 ) * tmp9 ) ) + ( ( 0.5 * 1.73205080756888 ) * tmp48 ) ) - ( 0.5 * tmp49 ) ) + ( ( 0.5 * 1.73205080756888 ) * tmp50 ) ) - ( 0.5 * tmp51 ) ) )
		}
		loop over cetaEdgeVLower0 only inner [0, 0] {
			Var tmp52 : Real = ( ( ( 0.016 * 1.4142135623731 ) * cetaLower0@[0, 0] ) + ( 0.032 * cetaLower1@[0, 0] ) )
			Var tmp53 : Real = ( 0.032 * cetaLower2@[0, 0] )
			Var tmp54 : Real = ( ( ( 0.016 * 1.4142135623731 ) * cetaUpper0@[-1, 0] ) + ( 0.032 * cetaUpper1@[-1, 0] ) )
			Var tmp55 : Real = ( -0.032 * cetaUpper2@[-1, 0] )
			Var tmp56 : Real = ( ( ( 0.016 * 1.4142135623731 ) * cuLower0@[0, 0] ) + ( 0.032 * cuLower1@[0, 0] ) )
			Var tmp57 : Real = ( 0.032 * cuLower2@[0, 0] )
			Var tmp58 : Real = ( ( ( 0.016 * 1.4142135623731 ) * cuUpper0@[-1, 0] ) + ( 0.032 * cuUpper1@[-1, 0] ) )
			Var tmp59 : Real = ( -0.032 * cuUpper2@[-1, 0] )
			Var tmp60 : Real = ( ( ( 0.016 * 1.4142135623731 ) * cvLower0@[0, 0] ) + ( 0.032 * cvLower1@[0, 0] ) )
			Var tmp61 : Real = ( 0.032 * cvLower2@[0, 0] )
			Var tmp62 : Real = ( ( ( 0.016 * 1.4142135623731 ) * cvUpper0@[-1, 0] ) + ( 0.032 * cvUpper1@[-1, 0] ) )
			Var tmp63 : Real = ( -0.032 * cvUpper2@[-1, 0] )
			Var tmp64 : Real = ( ( ( 0.016 * 1.4142135623731 ) * cuTildeLower0@[0, 0] ) + ( 0.032 * cuTildeLower1@[0, 0] ) )
			Var tmp65 : Real = ( 0.032 * cuTildeLower2@[0, 0] )
			Var tmp66 : Real = ( ( ( 0.016 * 1.4142135623731 ) * cuTildeUpper0@[-1, 0] ) + ( 0.032 * cuTildeUpper1@[-1, 0] ) )
			Var tmp67 : Real = ( -0.032 * cuTildeUpper2@[-1, 0] )
			Var tmp68 : Real = ( ( ( 0.016 * 1.4142135623731 ) * cvTildeLower0@[0, 0] ) + ( 0.032 * cvTildeLower1@[0, 0] ) )
			Var tmp69 : Real = ( 0.032 * cvTildeLower2@[0, 0] )
			Var tmp70 : Real = ( ( ( 0.016 * 1.4142135623731 ) * cvTildeUpper0@[-1, 0] ) + ( 0.032 * cvTildeUpper1@[-1, 0] ) )
			Var tmp71 : Real = ( -0.032 * cvTildeUpper2@[-1, 0] )
			Var tmp72 : Real = ( ( ( 0.016 * 1.4142135623731 ) * cetaLower0@[0, 0] ) + ( 0.032 * cetaLower1@[0, 0] ) )
			Var tmp73 : Real = ( 0.032 * cetaLower2@[0, 0] )
			Var tmp74 : Real = ( ( ( 0.016 * 1.4142135623731 ) * cetaUpper0@[-1, 0] ) + ( 0.032 * cetaUpper1@[-1, 0] ) )
			Var tmp75 : Real = ( -0.032 * cetaUpper2@[-1, 0] )
			Var tmp76 : Real = ( ( ( 0.016 * 1.4142135623731 ) * cuLower0@[0, 0] ) + ( 0.032 * cuLower1@[0, 0] ) )
			Var tmp77 : Real = ( 0.032 * cuLower2@[0, 0] )
			Var tmp78 : Real = ( ( ( 0.016 * 1.4142135623731 ) * cuUpper0@[-1, 0] ) + ( 0.032 * cuUpper1@[-1, 0] ) )
			Var tmp79 : Real = ( -0.032 * cuUpper2@[-1, 0] )
			Var tmp80 : Real = ( ( ( 0.016 * 1.4142135623731 ) * cvLower0@[0, 0] ) + ( 0.032 * cvLower1@[0, 0] ) )
			Var tmp81 : Real = ( 0.032 * cvLower2@[0, 0] )
			Var tmp82 : Real = ( ( ( 0.016 * 1.4142135623731 ) * cvUpper0@[-1, 0] ) + ( 0.032 * cvUpper1@[-1, 0] ) )
			Var tmp83 : Real = ( -0.032 * cvUpper2@[-1, 0] )
			Var tmp84 : Real = ( ( ( 0.016 * 1.4142135623731 ) * cuTildeLower0@[0, 0] ) + ( 0.032 * cuTildeLower1@[0, 0] ) )
			Var tmp85 : Real = ( 0.032 * cuTildeLower2@[0, 0] )
			Var tmp86 : Real = ( ( ( 0.016 * 1.4142135623731 ) * cuTildeUpper0@[-1, 0] ) + ( 0.032 * cuTildeUpper1@[-1, 0] ) )
			Var tmp87 : Real = ( -0.032 * cuTildeUpper2@[-1, 0] )
			Var tmp88 : Real = ( ( ( 0.016 * 1.4142135623731 ) * cvTildeLower0@[0, 0] ) + ( 0.032 * cvTildeLower1@[0, 0] ) )
			Var tmp89 : Real = ( 0.032 * cvTildeLower2@[0, 0] )
			Var tmp90 : Real = ( ( ( 0.016 * 1.4142135623731 ) * cvTildeUpper0@[-1, 0] ) + ( 0.032 * cvTildeUpper1@[-1, 0] ) )
			Var tmp91 : Real = ( -0.032 * cvTildeUpper2@[-1, 0] )
			Var lam1 : Real = ( ( sqrt ( g ) * sqrt ( fmax ( 0, fmax ( ( ( ( 0.5 * bath@[0, 0] ) + ( 0.5 * bath@[0, 1] ) ) + tmp72 ), ( ( ( 0.5 * bath@[0, 0] ) + ( 0.5 * bath@[0, 1] ) ) + tmp74 ) ) ) ) ) + fmax ( fabs ( (-tmp84) ), fabs ( (-tmp86) ) ) )
			Var tmp92 : Real = (-tmp56)
			Var tmp93 : Real = (-tmp57)
			Var tmp94 : Real = (-tmp58)
			Var tmp95 : Real = (-tmp59)
			Var tmp96 : Real = ( ( ( ( ( ( ( ( ( ( -0.5 * bath@[0, 0] ) * g ) * tmp52 ) - ( ( ( ( 0.166666666666667 * 1.73205080756888 ) * bath@[0, 0] ) * g ) * tmp53 ) ) - ( ( ( 0.5 * bath@[0, 1] ) * g ) * tmp52 ) ) + ( ( ( ( 0.166666666666667 * 1.73205080756888 ) * bath@[0, 1] ) * g ) * tmp53 ) ) - ( ( 0.5 * g ) * ( tmp52 * tmp52 ) ) ) - ( ( 0.5 * g ) * ( tmp53 * tmp53 ) ) ) - ( tmp56 * tmp64 ) ) - ( tmp57 * tmp65 ) )
			Var tmp97 : Real = ( ( ( ( ( ( ( ( ( ( -0.166666666666667 * 1.73205080756888 ) * bath@[0, 0] ) * g ) * tmp52 ) - ( ( ( 0.5 * bath@[0, 0] ) * g ) * tmp53 ) ) + ( ( ( ( 0.166666666666667 * 1.73205080756888 ) * bath@[0, 1] ) * g ) * tmp52 ) ) - ( ( ( 0.5 * bath@[0, 1] ) * g ) * tmp53 ) ) - ( ( g * tmp52 ) * tmp53 ) ) - ( tmp56 * tmp65 ) ) - ( tmp57 * tmp64 ) )
			Var tmp98 : Real = ( ( ( ( ( ( ( ( ( ( -0.5 * bath@[0, 0] ) * g ) * tmp54 ) - ( ( ( ( 0.166666666666667 * 1.73205080756888 ) * bath@[0, 0] ) * g ) * tmp55 ) ) - ( ( ( 0.5 * bath@[0, 1] ) * g ) * tmp54 ) ) + ( ( ( ( 0.166666666666667 * 1.73205080756888 ) * bath@[0, 1] ) * g ) * tmp55 ) ) - ( ( 0.5 * g ) * ( tmp54 * tmp54 ) ) ) - ( ( 0.5 * g ) * ( tmp55 * tmp55 ) ) ) - ( tmp58 * tmp66 ) ) - ( tmp59 * tmp67 ) )
			Var tmp99 : Real = ( ( ( ( ( ( ( ( ( ( -0.166666666666667 * 1.73205080756888 ) * bath@[0, 0] ) * g ) * tmp54 ) - ( ( ( 0.5 * bath@[0, 0] ) * g ) * tmp55 ) ) + ( ( ( ( 0.166666666666667 * 1.73205080756888 ) * bath@[0, 1] ) * g ) * tmp54 ) ) - ( ( ( 0.5 * bath@[0, 1] ) * g ) * tmp55 ) ) - ( ( g * tmp54 ) * tmp55 ) ) - ( tmp58 * tmp67 ) ) - ( tmp59 * tmp66 ) )
			Var tmp100 : Real = ( ( (-tmp60) * tmp64 ) - ( tmp61 * tmp65 ) )
			Var tmp101 : Real = ( ( (-tmp60) * tmp65 ) - ( tmp61 * tmp64 ) )
			Var tmp102 : Real = ( ( (-tmp62) * tmp66 ) - ( tmp63 * tmp67 ) )
			Var tmp103 : Real = ( ( (-tmp62) * tmp67 ) - ( tmp63 * tmp66 ) )
			cetaEdgeVLower0 = ( ( ( ( ( ( 31.25 * 1.4142135623731 ) * lam1 ) * tmp52 ) - ( ( ( 31.25 * 1.4142135623731 ) * lam1 ) * tmp54 ) ) + ( ( 31.25 * 1.4142135623731 ) * tmp92 ) ) + ( ( 31.25 * 1.4142135623731 ) * tmp94 ) )
			cetaEdgeVLower1 = ( ( ( ( ( 62.5 * lam1 ) * tmp52 ) - ( ( 62.5 * lam1 ) * tmp54 ) ) + ( 62.5 * tmp92 ) ) + ( 62.5 * tmp94 ) )
			cetaEdgeVLower2 = ( ( ( ( ( 62.5 * lam1 ) * tmp53 ) - ( ( 62.5 * lam1 ) * tmp55 ) ) + ( 62.5 * tmp93 ) ) + ( 62.5 * tmp95 ) )
			cuEdgeVLower0 = ( ( ( ( ( ( 31.25 * 1.4142135623731 ) * lam1 ) * tmp56 ) - ( ( ( 31.25 * 1.4142135623731 ) * lam1 ) * tmp58 ) ) + ( ( 31.25 * 1.4142135623731 ) * tmp96 ) ) + ( ( 31.25 * 1.4142135623731 ) * tmp98 ) )
			cuEdgeVLower1 = ( ( ( ( ( 62.5 * lam1 ) * tmp56 ) - ( ( 62.5 * lam1 ) * tmp58 ) ) + ( 62.5 * tmp96 ) ) + ( 62.5 * tmp98 ) )
			cuEdgeVLower2 = ( ( ( ( ( 62.5 * lam1 ) * tmp57 ) - ( ( 62.5 * lam1 ) * tmp59 ) ) + ( 62.5 * tmp97 ) ) + ( 62.5 * tmp99 ) )
			cvEdgeVLower0 = ( ( ( ( ( ( 31.25 * 1.4142135623731 ) * lam1 ) * tmp60 ) - ( ( ( 31.25 * 1.4142135623731 ) * lam1 ) * tmp62 ) ) + ( ( 31.25 * 1.4142135623731 ) * tmp100 ) ) + ( ( 31.25 * 1.4142135623731 ) * tmp102 ) )
			cvEdgeVLower1 = ( ( ( ( ( 62.5 * lam1 ) * tmp60 ) - ( ( 62.5 * lam1 ) * tmp62 ) ) + ( 62.5 * tmp100 ) ) + ( 62.5 * tmp102 ) )
			cvEdgeVLower2 = ( ( ( ( ( 62.5 * lam1 ) * tmp61 ) - ( ( 62.5 * lam1 ) * tmp63 ) ) + ( 62.5 * tmp101 ) ) + ( 62.5 * tmp103 ) )
			cetaEdgeVUpper0 = ( ( ( ( ( ( -31.25 * 1.4142135623731 ) * lam1 ) * tmp52 ) + ( ( ( 31.25 * 1.4142135623731 ) * lam1 ) * tmp54 ) ) - ( ( 31.25 * 1.4142135623731 ) * tmp92 ) ) - ( ( 31.25 * 1.4142135623731 ) * tmp94 ) )
			cetaEdgeVUpper1 = ( ( ( ( ( -62.5 * lam1 ) * tmp52 ) + ( ( 62.5 * lam1 ) * tmp54 ) ) - ( 62.5 * tmp92 ) ) - ( 62.5 * tmp94 ) )
			cetaEdgeVUpper2 = ( ( ( ( ( 62.5 * lam1 ) * tmp53 ) - ( ( 62.5 * lam1 ) * tmp55 ) ) + ( 62.5 * tmp93 ) ) + ( 62.5 * tmp95 ) )
			cuEdgeVUpper0 = ( ( ( ( ( ( -31.25 * 1.4142135623731 ) * lam1 ) * tmp56 ) + ( ( ( 31.25 * 1.4142135623731 ) * lam1 ) * tmp58 ) ) - ( ( 31.25 * 1.4142135623731 ) * tmp96 ) ) - ( ( 31.25 * 1.4142135623731 ) * tmp98 ) )
			cuEdgeVUpper1 = ( ( ( ( ( -62.5 * lam1 ) * tmp56 ) + ( ( 62.5 * lam1 ) * tmp58 ) ) - ( 62.5 * tmp96 ) ) - ( 62.5 * tmp98 ) )
			cuEdgeVUpper2 = ( ( ( ( ( 62.5 * lam1 ) * tmp57 ) - ( ( 62.5 * lam1 ) * tmp59 ) ) + ( 62.5 * tmp97 ) ) + ( 62.5 * tmp99 ) )
			cvEdgeVUpper0 = ( ( ( ( ( ( -31.25 * 1.4142135623731 ) * lam1 ) * tmp60 ) + ( ( ( 31.25 * 1.4142135623731 ) * lam1 ) * tmp62 ) ) - ( ( 31.25 * 1.4142135623731 ) * tmp100 ) ) - ( ( 31.25 * 1.4142135623731 ) * tmp102 ) )
			cvEdgeVUpper1 = ( ( ( ( ( -62.5 * lam1 ) * tmp60 ) + ( ( 62.5 * lam1 ) * tmp62 ) ) - ( 62.5 * tmp100 ) ) - ( 62.5 * tmp102 ) )
			cvEdgeVUpper2 = ( ( ( ( ( 62.5 * lam1 ) * tmp61 ) - ( ( 62.5 * lam1 ) * tmp63 ) ) + ( 62.5 * tmp101 ) ) + ( 62.5 * tmp103 ) )
		}
		if ( ( ( ( getNeighFragEdge ( fragmentIdx, 0 ) < 0 ) || ( getNeighFragEdge ( fragmentIdx, 0 ) == 0 ) ) || ( getNeighFragEdge ( fragmentIdx, 0 ) == 1 ) ) ) {
			loop over cetaEdgeVLower0 only dup [-1, 0] {
				Var tmp104 : Real = ( ( ( 0.016 * 1.4142135623731 ) * cetaLower0@[0, 0] ) + ( 0.032 * cetaLower1@[0, 0] ) )
				Var tmp105 : Real = ( 0.032 * cetaLower2@[0, 0] )
				Var tmp106 : Real = ( ( ( 0.016 * 1.4142135623731 ) * cetaUpper0@[-1, 0] ) + ( 0.032 * cetaUpper1@[-1, 0] ) )
				Var tmp107 : Real = ( -0.032 * cetaUpper2@[-1, 0] )
				Var tmp108 : Real = ( ( ( 0.016 * 1.4142135623731 ) * cuLower0@[0, 0] ) + ( 0.032 * cuLower1@[0, 0] ) )
				Var tmp109 : Real = ( 0.032 * cuLower2@[0, 0] )
				Var tmp110 : Real = ( ( ( 0.016 * 1.4142135623731 ) * cuUpper0@[-1, 0] ) + ( 0.032 * cuUpper1@[-1, 0] ) )
				Var tmp111 : Real = ( -0.032 * cuUpper2@[-1, 0] )
				Var tmp112 : Real = ( ( ( 0.016 * 1.4142135623731 ) * cvLower0@[0, 0] ) + ( 0.032 * cvLower1@[0, 0] ) )
				Var tmp113 : Real = ( 0.032 * cvLower2@[0, 0] )
				Var tmp114 : Real = ( ( ( 0.016 * 1.4142135623731 ) * cvUpper0@[-1, 0] ) + ( 0.032 * cvUpper1@[-1, 0] ) )
				Var tmp115 : Real = ( -0.032 * cvUpper2@[-1, 0] )
				Var tmp116 : Real = ( ( ( 0.016 * 1.4142135623731 ) * cuTildeLower0@[0, 0] ) + ( 0.032 * cuTildeLower1@[0, 0] ) )
				Var tmp117 : Real = ( 0.032 * cuTildeLower2@[0, 0] )
				Var tmp118 : Real = ( ( ( 0.016 * 1.4142135623731 ) * cuTildeUpper0@[-1, 0] ) + ( 0.032 * cuTildeUpper1@[-1, 0] ) )
				Var tmp119 : Real = ( -0.032 * cuTildeUpper2@[-1, 0] )
				Var tmp120 : Real = ( ( ( 0.016 * 1.4142135623731 ) * cvTildeLower0@[0, 0] ) + ( 0.032 * cvTildeLower1@[0, 0] ) )
				Var tmp121 : Real = ( 0.032 * cvTildeLower2@[0, 0] )
				Var tmp122 : Real = ( ( ( 0.016 * 1.4142135623731 ) * cvTildeUpper0@[-1, 0] ) + ( 0.032 * cvTildeUpper1@[-1, 0] ) )
				Var tmp123 : Real = ( -0.032 * cvTildeUpper2@[-1, 0] )
				Var tmp124 : Real = ( ( ( 0.016 * 1.4142135623731 ) * cetaLower0@[0, 0] ) + ( 0.032 * cetaLower1@[0, 0] ) )
				Var tmp125 : Real = ( 0.032 * cetaLower2@[0, 0] )
				Var tmp126 : Real = ( ( ( 0.016 * 1.4142135623731 ) * cetaUpper0@[-1, 0] ) + ( 0.032 * cetaUpper1@[-1, 0] ) )
				Var tmp127 : Real = ( -0.032 * cetaUpper2@[-1, 0] )
				Var tmp128 : Real = ( ( ( 0.016 * 1.4142135623731 ) * cuLower0@[0, 0] ) + ( 0.032 * cuLower1@[0, 0] ) )
				Var tmp129 : Real = ( 0.032 * cuLower2@[0, 0] )
				Var tmp130 : Real = ( ( ( 0.016 * 1.4142135623731 ) * cuUpper0@[-1, 0] ) + ( 0.032 * cuUpper1@[-1, 0] ) )
				Var tmp131 : Real = ( -0.032 * cuUpper2@[-1, 0] )
				Var tmp132 : Real = ( ( ( 0.016 * 1.4142135623731 ) * cvLower0@[0, 0] ) + ( 0.032 * cvLower1@[0, 0] ) )
				Var tmp133 : Real = ( 0.032 * cvLower2@[0, 0] )
				Var tmp134 : Real = ( ( ( 0.016 * 1.4142135623731 ) * cvUpper0@[-1, 0] ) + ( 0.032 * cvUpper1@[-1, 0] ) )
				Var tmp135 : Real = ( -0.032 * cvUpper2@[-1, 0] )
				Var tmp136 : Real = ( ( ( 0.016 * 1.4142135623731 ) * cuTildeLower0@[0, 0] ) + ( 0.032 * cuTildeLower1@[0, 0] ) )
				Var tmp137 : Real = ( 0.032 * cuTildeLower2@[0, 0] )
				Var tmp138 : Real = ( ( ( 0.016 * 1.4142135623731 ) * cuTildeUpper0@[-1, 0] ) + ( 0.032 * cuTildeUpper1@[-1, 0] ) )
				Var tmp139 : Real = ( -0.032 * cuTildeUpper2@[-1, 0] )
				Var tmp140 : Real = ( ( ( 0.016 * 1.4142135623731 ) * cvTildeLower0@[0, 0] ) + ( 0.032 * cvTildeLower1@[0, 0] ) )
				Var tmp141 : Real = ( 0.032 * cvTildeLower2@[0, 0] )
				Var tmp142 : Real = ( ( ( 0.016 * 1.4142135623731 ) * cvTildeUpper0@[-1, 0] ) + ( 0.032 * cvTildeUpper1@[-1, 0] ) )
				Var tmp143 : Real = ( -0.032 * cvTildeUpper2@[-1, 0] )
				Var lam1 : Real = ( ( sqrt ( g ) * sqrt ( fmax ( 0, fmax ( ( ( ( 0.5 * bath@[0, 0] ) + ( 0.5 * bath@[0, 1] ) ) + tmp124 ), ( ( ( 0.5 * bath@[0, 0] ) + ( 0.5 * bath@[0, 1] ) ) + tmp126 ) ) ) ) ) + fmax ( fabs ( (-tmp136) ), fabs ( (-tmp138) ) ) )
				Var tmp144 : Real = (-tmp108)
				Var tmp145 : Real = (-tmp109)
				Var tmp146 : Real = (-tmp110)
				Var tmp147 : Real = (-tmp111)
				Var tmp148 : Real = ( ( ( ( ( ( ( ( ( ( -0.5 * bath@[0, 0] ) * g ) * tmp104 ) - ( ( ( ( 0.166666666666667 * 1.73205080756888 ) * bath@[0, 0] ) * g ) * tmp105 ) ) - ( ( ( 0.5 * bath@[0, 1] ) * g ) * tmp104 ) ) + ( ( ( ( 0.166666666666667 * 1.73205080756888 ) * bath@[0, 1] ) * g ) * tmp105 ) ) - ( ( 0.5 * g ) * ( tmp104 * tmp104 ) ) ) - ( ( 0.5 * g ) * ( tmp105 * tmp105 ) ) ) - ( tmp108 * tmp116 ) ) - ( tmp109 * tmp117 ) )
				Var tmp149 : Real = ( ( ( ( ( ( ( ( ( ( -0.166666666666667 * 1.73205080756888 ) * bath@[0, 0] ) * g ) * tmp104 ) - ( ( ( 0.5 * bath@[0, 0] ) * g ) * tmp105 ) ) + ( ( ( ( 0.166666666666667 * 1.73205080756888 ) * bath@[0, 1] ) * g ) * tmp104 ) ) - ( ( ( 0.5 * bath@[0, 1] ) * g ) * tmp105 ) ) - ( ( g * tmp104 ) * tmp105 ) ) - ( tmp108 * tmp117 ) ) - ( tmp109 * tmp116 ) )
				Var tmp150 : Real = ( ( ( ( ( ( ( ( ( ( -0.5 * bath@[0, 0] ) * g ) * tmp106 ) - ( ( ( ( 0.166666666666667 * 1.73205080756888 ) * bath@[0, 0] ) * g ) * tmp107 ) ) - ( ( ( 0.5 * bath@[0, 1] ) * g ) * tmp106 ) ) + ( ( ( ( 0.166666666666667 * 1.73205080756888 ) * bath@[0, 1] ) * g ) * tmp107 ) ) - ( ( 0.5 * g ) * ( tmp106 * tmp106 ) ) ) - ( ( 0.5 * g ) * ( tmp107 * tmp107 ) ) ) - ( tmp110 * tmp118 ) ) - ( tmp111 * tmp119 ) )
				Var tmp151 : Real = ( ( ( ( ( ( ( ( ( ( -0.166666666666667 * 1.73205080756888 ) * bath@[0, 0] ) * g ) * tmp106 ) - ( ( ( 0.5 * bath@[0, 0] ) * g ) * tmp107 ) ) + ( ( ( ( 0.166666666666667 * 1.73205080756888 ) * bath@[0, 1] ) * g ) * tmp106 ) ) - ( ( ( 0.5 * bath@[0, 1] ) * g ) * tmp107 ) ) - ( ( g * tmp106 ) * tmp107 ) ) - ( tmp110 * tmp119 ) ) - ( tmp111 * tmp118 ) )
				Var tmp152 : Real = ( ( (-tmp112) * tmp116 ) - ( tmp113 * tmp117 ) )
				Var tmp153 : Real = ( ( (-tmp112) * tmp117 ) - ( tmp113 * tmp116 ) )
				Var tmp154 : Real = ( ( (-tmp114) * tmp118 ) - ( tmp115 * tmp119 ) )
				Var tmp155 : Real = ( ( (-tmp114) * tmp119 ) - ( tmp115 * tmp118 ) )
				cetaEdgeVLower0 = ( ( ( ( ( ( 31.25 * 1.4142135623731 ) * lam1 ) * tmp104 ) - ( ( ( 31.25 * 1.4142135623731 ) * lam1 ) * tmp106 ) ) + ( ( 31.25 * 1.4142135623731 ) * tmp144 ) ) + ( ( 31.25 * 1.4142135623731 ) * tmp146 ) )
				cetaEdgeVLower1 = ( ( ( ( ( 62.5 * lam1 ) * tmp104 ) - ( ( 62.5 * lam1 ) * tmp106 ) ) + ( 62.5 * tmp144 ) ) + ( 62.5 * tmp146 ) )
				cetaEdgeVLower2 = ( ( ( ( ( 62.5 * lam1 ) * tmp105 ) - ( ( 62.5 * lam1 ) * tmp107 ) ) + ( 62.5 * tmp145 ) ) + ( 62.5 * tmp147 ) )
				cuEdgeVLower0 = ( ( ( ( ( ( 31.25 * 1.4142135623731 ) * lam1 ) * tmp108 ) - ( ( ( 31.25 * 1.4142135623731 ) * lam1 ) * tmp110 ) ) + ( ( 31.25 * 1.4142135623731 ) * tmp148 ) ) + ( ( 31.25 * 1.4142135623731 ) * tmp150 ) )
				cuEdgeVLower1 = ( ( ( ( ( 62.5 * lam1 ) * tmp108 ) - ( ( 62.5 * lam1 ) * tmp110 ) ) + ( 62.5 * tmp148 ) ) + ( 62.5 * tmp150 ) )
				cuEdgeVLower2 = ( ( ( ( ( 62.5 * lam1 ) * tmp109 ) - ( ( 62.5 * lam1 ) * tmp111 ) ) + ( 62.5 * tmp149 ) ) + ( 62.5 * tmp151 ) )
				cvEdgeVLower0 = ( ( ( ( ( ( 31.25 * 1.4142135623731 ) * lam1 ) * tmp112 ) - ( ( ( 31.25 * 1.4142135623731 ) * lam1 ) * tmp114 ) ) + ( ( 31.25 * 1.4142135623731 ) * tmp152 ) ) + ( ( 31.25 * 1.4142135623731 ) * tmp154 ) )
				cvEdgeVLower1 = ( ( ( ( ( 62.5 * lam1 ) * tmp112 ) - ( ( 62.5 * lam1 ) * tmp114 ) ) + ( 62.5 * tmp152 ) ) + ( 62.5 * tmp154 ) )
				cvEdgeVLower2 = ( ( ( ( ( 62.5 * lam1 ) * tmp113 ) - ( ( 62.5 * lam1 ) * tmp115 ) ) + ( 62.5 * tmp153 ) ) + ( 62.5 * tmp155 ) )
			}
		} else {
			loop over cetaEdgeVLower0 only dup [-1, 0] {
				Var tmp156 : Real = ( ( ( 0.016 * 1.4142135623731 ) * cetaLower0@[0, 0] ) + ( 0.032 * cetaLower1@[0, 0] ) )
				Var tmp157 : Real = ( 0.032 * cetaLower2@[0, 0] )
				Var tmp158 : Real = ( ( ( ( 0.016 * 1.4142135623731 ) * cetaUpper0@[-1, 0] ) - ( 0.016 * cetaUpper1@[-1, 0] ) ) + ( ( 0.016 * 1.73205080756888 ) * cetaUpper2@[-1, 0] ) )
				Var tmp159 : Real = ( ( ( 0.016 * 1.73205080756888 ) * cetaUpper1@[-1, 0] ) + ( 0.016 * cetaUpper2@[-1, 0] ) )
				Var tmp160 : Real = ( ( ( 0.016 * 1.4142135623731 ) * cuLower0@[0, 0] ) + ( 0.032 * cuLower1@[0, 0] ) )
				Var tmp161 : Real = ( 0.032 * cuLower2@[0, 0] )
				Var tmp162 : Real = ( ( ( ( 0.016 * 1.4142135623731 ) * cuUpper0@[-1, 0] ) - ( 0.016 * cuUpper1@[-1, 0] ) ) + ( ( 0.016 * 1.73205080756888 ) * cuUpper2@[-1, 0] ) )
				Var tmp163 : Real = ( ( ( 0.016 * 1.73205080756888 ) * cuUpper1@[-1, 0] ) + ( 0.016 * cuUpper2@[-1, 0] ) )
				Var tmp164 : Real = ( ( ( 0.016 * 1.4142135623731 ) * cvLower0@[0, 0] ) + ( 0.032 * cvLower1@[0, 0] ) )
				Var tmp165 : Real = ( 0.032 * cvLower2@[0, 0] )
				Var tmp166 : Real = ( ( ( ( 0.016 * 1.4142135623731 ) * cvUpper0@[-1, 0] ) - ( 0.016 * cvUpper1@[-1, 0] ) ) + ( ( 0.016 * 1.73205080756888 ) * cvUpper2@[-1, 0] ) )
				Var tmp167 : Real = ( ( ( 0.016 * 1.73205080756888 ) * cvUpper1@[-1, 0] ) + ( 0.016 * cvUpper2@[-1, 0] ) )
				Var tmp168 : Real = ( ( ( 0.016 * 1.4142135623731 ) * cuTildeLower0@[0, 0] ) + ( 0.032 * cuTildeLower1@[0, 0] ) )
				Var tmp169 : Real = ( 0.032 * cuTildeLower2@[0, 0] )
				Var tmp170 : Real = ( ( ( ( 0.016 * 1.4142135623731 ) * cuTildeUpper0@[-1, 0] ) - ( 0.016 * cuTildeUpper1@[-1, 0] ) ) + ( ( 0.016 * 1.73205080756888 ) * cuTildeUpper2@[-1, 0] ) )
				Var tmp171 : Real = ( ( ( 0.016 * 1.73205080756888 ) * cuTildeUpper1@[-1, 0] ) + ( 0.016 * cuTildeUpper2@[-1, 0] ) )
				Var tmp172 : Real = ( ( ( 0.016 * 1.4142135623731 ) * cvTildeLower0@[0, 0] ) + ( 0.032 * cvTildeLower1@[0, 0] ) )
				Var tmp173 : Real = ( 0.032 * cvTildeLower2@[0, 0] )
				Var tmp174 : Real = ( ( ( ( 0.016 * 1.4142135623731 ) * cvTildeUpper0@[-1, 0] ) - ( 0.016 * cvTildeUpper1@[-1, 0] ) ) + ( ( 0.016 * 1.73205080756888 ) * cvTildeUpper2@[-1, 0] ) )
				Var tmp175 : Real = ( ( ( 0.016 * 1.73205080756888 ) * cvTildeUpper1@[-1, 0] ) + ( 0.016 * cvTildeUpper2@[-1, 0] ) )
				Var tmp176 : Real = ( ( ( 0.016 * 1.4142135623731 ) * cetaLower0@[0, 0] ) + ( 0.032 * cetaLower1@[0, 0] ) )
				Var tmp177 : Real = ( 0.032 * cetaLower2@[0, 0] )
				Var tmp178 : Real = ( ( ( ( 0.016 * 1.4142135623731 ) * cetaUpper0@[-1, 0] ) - ( 0.016 * cetaUpper1@[-1, 0] ) ) + ( ( 0.016 * 1.73205080756888 ) * cetaUpper2@[-1, 0] ) )
				Var tmp179 : Real = ( ( ( 0.016 * 1.73205080756888 ) * cetaUpper1@[-1, 0] ) + ( 0.016 * cetaUpper2@[-1, 0] ) )
				Var tmp180 : Real = ( ( ( 0.016 * 1.4142135623731 ) * cuLower0@[0, 0] ) + ( 0.032 * cuLower1@[0, 0] ) )
				Var tmp181 : Real = ( 0.032 * cuLower2@[0, 0] )
				Var tmp182 : Real = ( ( ( ( 0.016 * 1.4142135623731 ) * cuUpper0@[-1, 0] ) - ( 0.016 * cuUpper1@[-1, 0] ) ) + ( ( 0.016 * 1.73205080756888 ) * cuUpper2@[-1, 0] ) )
				Var tmp183 : Real = ( ( ( 0.016 * 1.73205080756888 ) * cuUpper1@[-1, 0] ) + ( 0.016 * cuUpper2@[-1, 0] ) )
				Var tmp184 : Real = ( ( ( 0.016 * 1.4142135623731 ) * cvLower0@[0, 0] ) + ( 0.032 * cvLower1@[0, 0] ) )
				Var tmp185 : Real = ( 0.032 * cvLower2@[0, 0] )
				Var tmp186 : Real = ( ( ( ( 0.016 * 1.4142135623731 ) * cvUpper0@[-1, 0] ) - ( 0.016 * cvUpper1@[-1, 0] ) ) + ( ( 0.016 * 1.73205080756888 ) * cvUpper2@[-1, 0] ) )
				Var tmp187 : Real = ( ( ( 0.016 * 1.73205080756888 ) * cvUpper1@[-1, 0] ) + ( 0.016 * cvUpper2@[-1, 0] ) )
				Var tmp188 : Real = ( ( ( 0.016 * 1.4142135623731 ) * cuTildeLower0@[0, 0] ) + ( 0.032 * cuTildeLower1@[0, 0] ) )
				Var tmp189 : Real = ( 0.032 * cuTildeLower2@[0, 0] )
				Var tmp190 : Real = ( ( ( ( 0.016 * 1.4142135623731 ) * cuTildeUpper0@[-1, 0] ) - ( 0.016 * cuTildeUpper1@[-1, 0] ) ) + ( ( 0.016 * 1.73205080756888 ) * cuTildeUpper2@[-1, 0] ) )
				Var tmp191 : Real = ( ( ( 0.016 * 1.73205080756888 ) * cuTildeUpper1@[-1, 0] ) + ( 0.016 * cuTildeUpper2@[-1, 0] ) )
				Var tmp192 : Real = ( ( ( 0.016 * 1.4142135623731 ) * cvTildeLower0@[0, 0] ) + ( 0.032 * cvTildeLower1@[0, 0] ) )
				Var tmp193 : Real = ( 0.032 * cvTildeLower2@[0, 0] )
				Var tmp194 : Real = ( ( ( ( 0.016 * 1.4142135623731 ) * cvTildeUpper0@[-1, 0] ) - ( 0.016 * cvTildeUpper1@[-1, 0] ) ) + ( ( 0.016 * 1.73205080756888 ) * cvTildeUpper2@[-1, 0] ) )
				Var tmp195 : Real = ( ( ( 0.016 * 1.73205080756888 ) * cvTildeUpper1@[-1, 0] ) + ( 0.016 * cvTildeUpper2@[-1, 0] ) )
				Var lam1 : Real = ( ( sqrt ( g ) * sqrt ( fmax ( 0, fmax ( ( ( ( 0.5 * bath@[0, 0] ) + ( 0.5 * bath@[0, 1] ) ) + tmp176 ), ( ( ( 0.5 * bath@[0, 0] ) + ( 0.5 * bath@[0, 1] ) ) + tmp178 ) ) ) ) ) + fmax ( fabs ( (-tmp188) ), fabs ( (-tmp190) ) ) )
				Var tmp196 : Real = (-tmp160)
				Var tmp197 : Real = (-tmp161)
				Var tmp198 : Real = (-tmp162)
				Var tmp199 : Real = (-tmp163)
				Var tmp200 : Real = ( ( ( ( ( ( ( ( ( ( -0.5 * bath@[0, 0] ) * g ) * tmp156 ) - ( ( ( ( 0.166666666666667 * 1.73205080756888 ) * bath@[0, 0] ) * g ) * tmp157 ) ) - ( ( ( 0.5 * bath@[0, 1] ) * g ) * tmp156 ) ) + ( ( ( ( 0.166666666666667 * 1.73205080756888 ) * bath@[0, 1] ) * g ) * tmp157 ) ) - ( ( 0.5 * g ) * ( tmp156 * tmp156 ) ) ) - ( ( 0.5 * g ) * ( tmp157 * tmp157 ) ) ) - ( tmp160 * tmp168 ) ) - ( tmp161 * tmp169 ) )
				Var tmp201 : Real = ( ( ( ( ( ( ( ( ( ( -0.166666666666667 * 1.73205080756888 ) * bath@[0, 0] ) * g ) * tmp156 ) - ( ( ( 0.5 * bath@[0, 0] ) * g ) * tmp157 ) ) + ( ( ( ( 0.166666666666667 * 1.73205080756888 ) * bath@[0, 1] ) * g ) * tmp156 ) ) - ( ( ( 0.5 * bath@[0, 1] ) * g ) * tmp157 ) ) - ( ( g * tmp156 ) * tmp157 ) ) - ( tmp160 * tmp169 ) ) - ( tmp161 * tmp168 ) )
				Var tmp202 : Real = ( ( ( ( ( ( ( ( ( ( -0.5 * bath@[0, 0] ) * g ) * tmp158 ) - ( ( ( ( 0.166666666666667 * 1.73205080756888 ) * bath@[0, 0] ) * g ) * tmp159 ) ) - ( ( ( 0.5 * bath@[0, 1] ) * g ) * tmp158 ) ) + ( ( ( ( 0.166666666666667 * 1.73205080756888 ) * bath@[0, 1] ) * g ) * tmp159 ) ) - ( ( 0.5 * g ) * ( tmp158 * tmp158 ) ) ) - ( ( 0.5 * g ) * ( tmp159 * tmp159 ) ) ) - ( tmp162 * tmp170 ) ) - ( tmp163 * tmp171 ) )
				Var tmp203 : Real = ( ( ( ( ( ( ( ( ( ( -0.166666666666667 * 1.73205080756888 ) * bath@[0, 0] ) * g ) * tmp158 ) - ( ( ( 0.5 * bath@[0, 0] ) * g ) * tmp159 ) ) + ( ( ( ( 0.166666666666667 * 1.73205080756888 ) * bath@[0, 1] ) * g ) * tmp158 ) ) - ( ( ( 0.5 * bath@[0, 1] ) * g ) * tmp159 ) ) - ( ( g * tmp158 ) * tmp159 ) ) - ( tmp162 * tmp171 ) ) - ( tmp163 * tmp170 ) )
				Var tmp204 : Real = ( ( (-tmp164) * tmp168 ) - ( tmp165 * tmp169 ) )
				Var tmp205 : Real = ( ( (-tmp164) * tmp169 ) - ( tmp165 * tmp168 ) )
				Var tmp206 : Real = ( ( (-tmp166) * tmp170 ) - ( tmp167 * tmp171 ) )
				Var tmp207 : Real = ( ( (-tmp166) * tmp171 ) - ( tmp167 * tmp170 ) )
				cetaEdgeVLower0 = ( ( ( ( ( ( 31.25 * 1.4142135623731 ) * lam1 ) * tmp156 ) - ( ( ( 31.25 * 1.4142135623731 ) * lam1 ) * tmp158 ) ) + ( ( 31.25 * 1.4142135623731 ) * tmp196 ) ) + ( ( 31.25 * 1.4142135623731 ) * tmp198 ) )
				cetaEdgeVLower1 = ( ( ( ( ( 62.5 * lam1 ) * tmp156 ) - ( ( 62.5 * lam1 ) * tmp158 ) ) + ( 62.5 * tmp196 ) ) + ( 62.5 * tmp198 ) )
				cetaEdgeVLower2 = ( ( ( ( ( 62.5 * lam1 ) * tmp157 ) - ( ( 62.5 * lam1 ) * tmp159 ) ) + ( 62.5 * tmp197 ) ) + ( 62.5 * tmp199 ) )
				cuEdgeVLower0 = ( ( ( ( ( ( 31.25 * 1.4142135623731 ) * lam1 ) * tmp160 ) - ( ( ( 31.25 * 1.4142135623731 ) * lam1 ) * tmp162 ) ) + ( ( 31.25 * 1.4142135623731 ) * tmp200 ) ) + ( ( 31.25 * 1.4142135623731 ) * tmp202 ) )
				cuEdgeVLower1 = ( ( ( ( ( 62.5 * lam1 ) * tmp160 ) - ( ( 62.5 * lam1 ) * tmp162 ) ) + ( 62.5 * tmp200 ) ) + ( 62.5 * tmp202 ) )
				cuEdgeVLower2 = ( ( ( ( ( 62.5 * lam1 ) * tmp161 ) - ( ( 62.5 * lam1 ) * tmp163 ) ) + ( 62.5 * tmp201 ) ) + ( 62.5 * tmp203 ) )
				cvEdgeVLower0 = ( ( ( ( ( ( 31.25 * 1.4142135623731 ) * lam1 ) * tmp164 ) - ( ( ( 31.25 * 1.4142135623731 ) * lam1 ) * tmp166 ) ) + ( ( 31.25 * 1.4142135623731 ) * tmp204 ) ) + ( ( 31.25 * 1.4142135623731 ) * tmp206 ) )
				cvEdgeVLower1 = ( ( ( ( ( 62.5 * lam1 ) * tmp164 ) - ( ( 62.5 * lam1 ) * tmp166 ) ) + ( 62.5 * tmp204 ) ) + ( 62.5 * tmp206 ) )
				cvEdgeVLower2 = ( ( ( ( ( 62.5 * lam1 ) * tmp165 ) - ( ( 62.5 * lam1 ) * tmp167 ) ) + ( 62.5 * tmp205 ) ) + ( 62.5 * tmp207 ) )
			}
		}
		if ( ( ( ( getNeighFragEdge ( fragmentIdx, 1 ) < 0 ) || ( getNeighFragEdge ( fragmentIdx, 1 ) == 0 ) ) || ( getNeighFragEdge ( fragmentIdx, 1 ) == 1 ) ) ) {
			loop over cetaEdgeVLower0 only dup [1, 0] {
				Var tmp208 : Real = ( ( ( 0.016 * 1.4142135623731 ) * cetaLower0@[0, 0] ) + ( 0.032 * cetaLower1@[0, 0] ) )
				Var tmp209 : Real = ( 0.032 * cetaLower2@[0, 0] )
				Var tmp210 : Real = ( ( ( 0.016 * 1.4142135623731 ) * cetaUpper0@[-1, 0] ) + ( 0.032 * cetaUpper1@[-1, 0] ) )
				Var tmp211 : Real = ( -0.032 * cetaUpper2@[-1, 0] )
				Var tmp212 : Real = ( ( ( 0.016 * 1.4142135623731 ) * cuLower0@[0, 0] ) + ( 0.032 * cuLower1@[0, 0] ) )
				Var tmp213 : Real = ( 0.032 * cuLower2@[0, 0] )
				Var tmp214 : Real = ( ( ( 0.016 * 1.4142135623731 ) * cuUpper0@[-1, 0] ) + ( 0.032 * cuUpper1@[-1, 0] ) )
				Var tmp215 : Real = ( -0.032 * cuUpper2@[-1, 0] )
				Var tmp216 : Real = ( ( ( 0.016 * 1.4142135623731 ) * cvLower0@[0, 0] ) + ( 0.032 * cvLower1@[0, 0] ) )
				Var tmp217 : Real = ( 0.032 * cvLower2@[0, 0] )
				Var tmp218 : Real = ( ( ( 0.016 * 1.4142135623731 ) * cvUpper0@[-1, 0] ) + ( 0.032 * cvUpper1@[-1, 0] ) )
				Var tmp219 : Real = ( -0.032 * cvUpper2@[-1, 0] )
				Var tmp220 : Real = ( ( ( 0.016 * 1.4142135623731 ) * cuTildeLower0@[0, 0] ) + ( 0.032 * cuTildeLower1@[0, 0] ) )
				Var tmp221 : Real = ( 0.032 * cuTildeLower2@[0, 0] )
				Var tmp222 : Real = ( ( ( 0.016 * 1.4142135623731 ) * cuTildeUpper0@[-1, 0] ) + ( 0.032 * cuTildeUpper1@[-1, 0] ) )
				Var tmp223 : Real = ( -0.032 * cuTildeUpper2@[-1, 0] )
				Var tmp224 : Real = ( ( ( 0.016 * 1.4142135623731 ) * cvTildeLower0@[0, 0] ) + ( 0.032 * cvTildeLower1@[0, 0] ) )
				Var tmp225 : Real = ( 0.032 * cvTildeLower2@[0, 0] )
				Var tmp226 : Real = ( ( ( 0.016 * 1.4142135623731 ) * cvTildeUpper0@[-1, 0] ) + ( 0.032 * cvTildeUpper1@[-1, 0] ) )
				Var tmp227 : Real = ( -0.032 * cvTildeUpper2@[-1, 0] )
				Var tmp228 : Real = ( ( ( 0.016 * 1.4142135623731 ) * cetaLower0@[0, 0] ) + ( 0.032 * cetaLower1@[0, 0] ) )
				Var tmp229 : Real = ( 0.032 * cetaLower2@[0, 0] )
				Var tmp230 : Real = ( ( ( 0.016 * 1.4142135623731 ) * cetaUpper0@[-1, 0] ) + ( 0.032 * cetaUpper1@[-1, 0] ) )
				Var tmp231 : Real = ( -0.032 * cetaUpper2@[-1, 0] )
				Var tmp232 : Real = ( ( ( 0.016 * 1.4142135623731 ) * cuLower0@[0, 0] ) + ( 0.032 * cuLower1@[0, 0] ) )
				Var tmp233 : Real = ( 0.032 * cuLower2@[0, 0] )
				Var tmp234 : Real = ( ( ( 0.016 * 1.4142135623731 ) * cuUpper0@[-1, 0] ) + ( 0.032 * cuUpper1@[-1, 0] ) )
				Var tmp235 : Real = ( -0.032 * cuUpper2@[-1, 0] )
				Var tmp236 : Real = ( ( ( 0.016 * 1.4142135623731 ) * cvLower0@[0, 0] ) + ( 0.032 * cvLower1@[0, 0] ) )
				Var tmp237 : Real = ( 0.032 * cvLower2@[0, 0] )
				Var tmp238 : Real = ( ( ( 0.016 * 1.4142135623731 ) * cvUpper0@[-1, 0] ) + ( 0.032 * cvUpper1@[-1, 0] ) )
				Var tmp239 : Real = ( -0.032 * cvUpper2@[-1, 0] )
				Var tmp240 : Real = ( ( ( 0.016 * 1.4142135623731 ) * cuTildeLower0@[0, 0] ) + ( 0.032 * cuTildeLower1@[0, 0] ) )
				Var tmp241 : Real = ( 0.032 * cuTildeLower2@[0, 0] )
				Var tmp242 : Real = ( ( ( 0.016 * 1.4142135623731 ) * cuTildeUpper0@[-1, 0] ) + ( 0.032 * cuTildeUpper1@[-1, 0] ) )
				Var tmp243 : Real = ( -0.032 * cuTildeUpper2@[-1, 0] )
				Var tmp244 : Real = ( ( ( 0.016 * 1.4142135623731 ) * cvTildeLower0@[0, 0] ) + ( 0.032 * cvTildeLower1@[0, 0] ) )
				Var tmp245 : Real = ( 0.032 * cvTildeLower2@[0, 0] )
				Var tmp246 : Real = ( ( ( 0.016 * 1.4142135623731 ) * cvTildeUpper0@[-1, 0] ) + ( 0.032 * cvTildeUpper1@[-1, 0] ) )
				Var tmp247 : Real = ( -0.032 * cvTildeUpper2@[-1, 0] )
				Var lam1 : Real = ( ( sqrt ( g ) * sqrt ( fmax ( 0, fmax ( ( ( ( 0.5 * bath@[0, 0] ) + ( 0.5 * bath@[0, 1] ) ) + tmp228 ), ( ( ( 0.5 * bath@[0, 0] ) + ( 0.5 * bath@[0, 1] ) ) + tmp230 ) ) ) ) ) + fmax ( fabs ( (-tmp240) ), fabs ( (-tmp242) ) ) )
				Var tmp248 : Real = (-tmp212)
				Var tmp249 : Real = (-tmp213)
				Var tmp250 : Real = (-tmp214)
				Var tmp251 : Real = (-tmp215)
				Var tmp252 : Real = ( ( ( ( ( ( ( ( ( ( -0.5 * bath@[0, 0] ) * g ) * tmp208 ) - ( ( ( ( 0.166666666666667 * 1.73205080756888 ) * bath@[0, 0] ) * g ) * tmp209 ) ) - ( ( ( 0.5 * bath@[0, 1] ) * g ) * tmp208 ) ) + ( ( ( ( 0.166666666666667 * 1.73205080756888 ) * bath@[0, 1] ) * g ) * tmp209 ) ) - ( ( 0.5 * g ) * ( tmp208 * tmp208 ) ) ) - ( ( 0.5 * g ) * ( tmp209 * tmp209 ) ) ) - ( tmp212 * tmp220 ) ) - ( tmp213 * tmp221 ) )
				Var tmp253 : Real = ( ( ( ( ( ( ( ( ( ( -0.166666666666667 * 1.73205080756888 ) * bath@[0, 0] ) * g ) * tmp208 ) - ( ( ( 0.5 * bath@[0, 0] ) * g ) * tmp209 ) ) + ( ( ( ( 0.166666666666667 * 1.73205080756888 ) * bath@[0, 1] ) * g ) * tmp208 ) ) - ( ( ( 0.5 * bath@[0, 1] ) * g ) * tmp209 ) ) - ( ( g * tmp208 ) * tmp209 ) ) - ( tmp212 * tmp221 ) ) - ( tmp213 * tmp220 ) )
				Var tmp254 : Real = ( ( ( ( ( ( ( ( ( ( -0.5 * bath@[0, 0] ) * g ) * tmp210 ) - ( ( ( ( 0.166666666666667 * 1.73205080756888 ) * bath@[0, 0] ) * g ) * tmp211 ) ) - ( ( ( 0.5 * bath@[0, 1] ) * g ) * tmp210 ) ) + ( ( ( ( 0.166666666666667 * 1.73205080756888 ) * bath@[0, 1] ) * g ) * tmp211 ) ) - ( ( 0.5 * g ) * ( tmp210 * tmp210 ) ) ) - ( ( 0.5 * g ) * ( tmp211 * tmp211 ) ) ) - ( tmp214 * tmp222 ) ) - ( tmp215 * tmp223 ) )
				Var tmp255 : Real = ( ( ( ( ( ( ( ( ( ( -0.166666666666667 * 1.73205080756888 ) * bath@[0, 0] ) * g ) * tmp210 ) - ( ( ( 0.5 * bath@[0, 0] ) * g ) * tmp211 ) ) + ( ( ( ( 0.166666666666667 * 1.73205080756888 ) * bath@[0, 1] ) * g ) * tmp210 ) ) - ( ( ( 0.5 * bath@[0, 1] ) * g ) * tmp211 ) ) - ( ( g * tmp210 ) * tmp211 ) ) - ( tmp214 * tmp223 ) ) - ( tmp215 * tmp222 ) )
				Var tmp256 : Real = ( ( (-tmp216) * tmp220 ) - ( tmp217 * tmp221 ) )
				Var tmp257 : Real = ( ( (-tmp216) * tmp221 ) - ( tmp217 * tmp220 ) )
				Var tmp258 : Real = ( ( (-tmp218) * tmp222 ) - ( tmp219 * tmp223 ) )
				Var tmp259 : Real = ( ( (-tmp218) * tmp223 ) - ( tmp219 * tmp222 ) )
				cetaEdgeVUpper0 = ( ( ( ( ( ( -31.25 * 1.4142135623731 ) * lam1 ) * tmp208 ) + ( ( ( 31.25 * 1.4142135623731 ) * lam1 ) * tmp210 ) ) - ( ( 31.25 * 1.4142135623731 ) * tmp248 ) ) - ( ( 31.25 * 1.4142135623731 ) * tmp250 ) )
				cetaEdgeVUpper1 = ( ( ( ( ( -62.5 * lam1 ) * tmp208 ) + ( ( 62.5 * lam1 ) * tmp210 ) ) - ( 62.5 * tmp248 ) ) - ( 62.5 * tmp250 ) )
				cetaEdgeVUpper2 = ( ( ( ( ( 62.5 * lam1 ) * tmp209 ) - ( ( 62.5 * lam1 ) * tmp211 ) ) + ( 62.5 * tmp249 ) ) + ( 62.5 * tmp251 ) )
				cuEdgeVUpper0 = ( ( ( ( ( ( -31.25 * 1.4142135623731 ) * lam1 ) * tmp212 ) + ( ( ( 31.25 * 1.4142135623731 ) * lam1 ) * tmp214 ) ) - ( ( 31.25 * 1.4142135623731 ) * tmp252 ) ) - ( ( 31.25 * 1.4142135623731 ) * tmp254 ) )
				cuEdgeVUpper1 = ( ( ( ( ( -62.5 * lam1 ) * tmp212 ) + ( ( 62.5 * lam1 ) * tmp214 ) ) - ( 62.5 * tmp252 ) ) - ( 62.5 * tmp254 ) )
				cuEdgeVUpper2 = ( ( ( ( ( 62.5 * lam1 ) * tmp213 ) - ( ( 62.5 * lam1 ) * tmp215 ) ) + ( 62.5 * tmp253 ) ) + ( 62.5 * tmp255 ) )
				cvEdgeVUpper0 = ( ( ( ( ( ( -31.25 * 1.4142135623731 ) * lam1 ) * tmp216 ) + ( ( ( 31.25 * 1.4142135623731 ) * lam1 ) * tmp218 ) ) - ( ( 31.25 * 1.4142135623731 ) * tmp256 ) ) - ( ( 31.25 * 1.4142135623731 ) * tmp258 ) )
				cvEdgeVUpper1 = ( ( ( ( ( -62.5 * lam1 ) * tmp216 ) + ( ( 62.5 * lam1 ) * tmp218 ) ) - ( 62.5 * tmp256 ) ) - ( 62.5 * tmp258 ) )
				cvEdgeVUpper2 = ( ( ( ( ( 62.5 * lam1 ) * tmp217 ) - ( ( 62.5 * lam1 ) * tmp219 ) ) + ( 62.5 * tmp257 ) ) + ( 62.5 * tmp259 ) )
			}
		} else {
			loop over cetaEdgeVLower0 only dup [1, 0] {
				Var tmp260 : Real = ( ( ( ( 0.016 * 1.4142135623731 ) * cetaLower0@[0, 0] ) - ( 0.016 * cetaLower1@[0, 0] ) ) + ( ( 0.016 * 1.73205080756888 ) * cetaLower2@[0, 0] ) )
				Var tmp261 : Real = ( ( ( -0.016 * 1.73205080756888 ) * cetaLower1@[0, 0] ) - ( 0.016 * cetaLower2@[0, 0] ) )
				Var tmp262 : Real = ( ( ( 0.016 * 1.4142135623731 ) * cetaUpper0@[-1, 0] ) + ( 0.032 * cetaUpper1@[-1, 0] ) )
				Var tmp263 : Real = ( -0.032 * cetaUpper2@[-1, 0] )
				Var tmp264 : Real = ( ( ( ( 0.016 * 1.4142135623731 ) * cuLower0@[0, 0] ) - ( 0.016 * cuLower1@[0, 0] ) ) + ( ( 0.016 * 1.73205080756888 ) * cuLower2@[0, 0] ) )
				Var tmp265 : Real = ( ( ( -0.016 * 1.73205080756888 ) * cuLower1@[0, 0] ) - ( 0.016 * cuLower2@[0, 0] ) )
				Var tmp266 : Real = ( ( ( 0.016 * 1.4142135623731 ) * cuUpper0@[-1, 0] ) + ( 0.032 * cuUpper1@[-1, 0] ) )
				Var tmp267 : Real = ( -0.032 * cuUpper2@[-1, 0] )
				Var tmp268 : Real = ( ( ( ( 0.016 * 1.4142135623731 ) * cvLower0@[0, 0] ) - ( 0.016 * cvLower1@[0, 0] ) ) + ( ( 0.016 * 1.73205080756888 ) * cvLower2@[0, 0] ) )
				Var tmp269 : Real = ( ( ( -0.016 * 1.73205080756888 ) * cvLower1@[0, 0] ) - ( 0.016 * cvLower2@[0, 0] ) )
				Var tmp270 : Real = ( ( ( 0.016 * 1.4142135623731 ) * cvUpper0@[-1, 0] ) + ( 0.032 * cvUpper1@[-1, 0] ) )
				Var tmp271 : Real = ( -0.032 * cvUpper2@[-1, 0] )
				Var tmp272 : Real = ( ( ( ( 0.016 * 1.4142135623731 ) * cuTildeLower0@[0, 0] ) - ( 0.016 * cuTildeLower1@[0, 0] ) ) + ( ( 0.016 * 1.73205080756888 ) * cuTildeLower2@[0, 0] ) )
				Var tmp273 : Real = ( ( ( -0.016 * 1.73205080756888 ) * cuTildeLower1@[0, 0] ) - ( 0.016 * cuTildeLower2@[0, 0] ) )
				Var tmp274 : Real = ( ( ( 0.016 * 1.4142135623731 ) * cuTildeUpper0@[-1, 0] ) + ( 0.032 * cuTildeUpper1@[-1, 0] ) )
				Var tmp275 : Real = ( -0.032 * cuTildeUpper2@[-1, 0] )
				Var tmp276 : Real = ( ( ( ( 0.016 * 1.4142135623731 ) * cvTildeLower0@[0, 0] ) - ( 0.016 * cvTildeLower1@[0, 0] ) ) + ( ( 0.016 * 1.73205080756888 ) * cvTildeLower2@[0, 0] ) )
				Var tmp277 : Real = ( ( ( -0.016 * 1.73205080756888 ) * cvTildeLower1@[0, 0] ) - ( 0.016 * cvTildeLower2@[0, 0] ) )
				Var tmp278 : Real = ( ( ( 0.016 * 1.4142135623731 ) * cvTildeUpper0@[-1, 0] ) + ( 0.032 * cvTildeUpper1@[-1, 0] ) )
				Var tmp279 : Real = ( -0.032 * cvTildeUpper2@[-1, 0] )
				Var tmp280 : Real = ( ( ( ( 0.016 * 1.4142135623731 ) * cetaLower0@[0, 0] ) - ( 0.016 * cetaLower1@[0, 0] ) ) + ( ( 0.016 * 1.73205080756888 ) * cetaLower2@[0, 0] ) )
				Var tmp281 : Real = ( ( ( -0.016 * 1.73205080756888 ) * cetaLower1@[0, 0] ) - ( 0.016 * cetaLower2@[0, 0] ) )
				Var tmp282 : Real = ( ( ( 0.016 * 1.4142135623731 ) * cetaUpper0@[-1, 0] ) + ( 0.032 * cetaUpper1@[-1, 0] ) )
				Var tmp283 : Real = ( -0.032 * cetaUpper2@[-1, 0] )
				Var tmp284 : Real = ( ( ( ( 0.016 * 1.4142135623731 ) * cuLower0@[0, 0] ) - ( 0.016 * cuLower1@[0, 0] ) ) + ( ( 0.016 * 1.73205080756888 ) * cuLower2@[0, 0] ) )
				Var tmp285 : Real = ( ( ( -0.016 * 1.73205080756888 ) * cuLower1@[0, 0] ) - ( 0.016 * cuLower2@[0, 0] ) )
				Var tmp286 : Real = ( ( ( 0.016 * 1.4142135623731 ) * cuUpper0@[-1, 0] ) + ( 0.032 * cuUpper1@[-1, 0] ) )
				Var tmp287 : Real = ( -0.032 * cuUpper2@[-1, 0] )
				Var tmp288 : Real = ( ( ( ( 0.016 * 1.4142135623731 ) * cvLower0@[0, 0] ) - ( 0.016 * cvLower1@[0, 0] ) ) + ( ( 0.016 * 1.73205080756888 ) * cvLower2@[0, 0] ) )
				Var tmp289 : Real = ( ( ( -0.016 * 1.73205080756888 ) * cvLower1@[0, 0] ) - ( 0.016 * cvLower2@[0, 0] ) )
				Var tmp290 : Real = ( ( ( 0.016 * 1.4142135623731 ) * cvUpper0@[-1, 0] ) + ( 0.032 * cvUpper1@[-1, 0] ) )
				Var tmp291 : Real = ( -0.032 * cvUpper2@[-1, 0] )
				Var tmp292 : Real = ( ( ( ( 0.016 * 1.4142135623731 ) * cuTildeLower0@[0, 0] ) - ( 0.016 * cuTildeLower1@[0, 0] ) ) + ( ( 0.016 * 1.73205080756888 ) * cuTildeLower2@[0, 0] ) )
				Var tmp293 : Real = ( ( ( -0.016 * 1.73205080756888 ) * cuTildeLower1@[0, 0] ) - ( 0.016 * cuTildeLower2@[0, 0] ) )
				Var tmp294 : Real = ( ( ( 0.016 * 1.4142135623731 ) * cuTildeUpper0@[-1, 0] ) + ( 0.032 * cuTildeUpper1@[-1, 0] ) )
				Var tmp295 : Real = ( -0.032 * cuTildeUpper2@[-1, 0] )
				Var tmp296 : Real = ( ( ( ( 0.016 * 1.4142135623731 ) * cvTildeLower0@[0, 0] ) - ( 0.016 * cvTildeLower1@[0, 0] ) ) + ( ( 0.016 * 1.73205080756888 ) * cvTildeLower2@[0, 0] ) )
				Var tmp297 : Real = ( ( ( -0.016 * 1.73205080756888 ) * cvTildeLower1@[0, 0] ) - ( 0.016 * cvTildeLower2@[0, 0] ) )
				Var tmp298 : Real = ( ( ( 0.016 * 1.4142135623731 ) * cvTildeUpper0@[-1, 0] ) + ( 0.032 * cvTildeUpper1@[-1, 0] ) )
				Var tmp299 : Real = ( -0.032 * cvTildeUpper2@[-1, 0] )
				Var lam1 : Real = ( ( sqrt ( g ) * sqrt ( fmax ( 0, fmax ( ( ( ( 0.5 * bath@[0, 0] ) + ( 0.5 * bath@[0, 1] ) ) + tmp280 ), ( ( ( 0.5 * bath@[0, 0] ) + ( 0.5 * bath@[0, 1] ) ) + tmp282 ) ) ) ) ) + fmax ( fabs ( (-tmp292) ), fabs ( (-tmp294) ) ) )
				Var tmp300 : Real = (-tmp264)
				Var tmp301 : Real = (-tmp265)
				Var tmp302 : Real = (-tmp266)
				Var tmp303 : Real = (-tmp267)
				Var tmp304 : Real = ( ( ( ( ( ( ( ( ( ( -0.5 * bath@[0, 0] ) * g ) * tmp260 ) - ( ( ( ( 0.166666666666667 * 1.73205080756888 ) * bath@[0, 0] ) * g ) * tmp261 ) ) - ( ( ( 0.5 * bath@[0, 1] ) * g ) * tmp260 ) ) + ( ( ( ( 0.166666666666667 * 1.73205080756888 ) * bath@[0, 1] ) * g ) * tmp261 ) ) - ( ( 0.5 * g ) * ( tmp260 * tmp260 ) ) ) - ( ( 0.5 * g ) * ( tmp261 * tmp261 ) ) ) - ( tmp264 * tmp272 ) ) - ( tmp265 * tmp273 ) )
				Var tmp305 : Real = ( ( ( ( ( ( ( ( ( ( -0.166666666666667 * 1.73205080756888 ) * bath@[0, 0] ) * g ) * tmp260 ) - ( ( ( 0.5 * bath@[0, 0] ) * g ) * tmp261 ) ) + ( ( ( ( 0.166666666666667 * 1.73205080756888 ) * bath@[0, 1] ) * g ) * tmp260 ) ) - ( ( ( 0.5 * bath@[0, 1] ) * g ) * tmp261 ) ) - ( ( g * tmp260 ) * tmp261 ) ) - ( tmp264 * tmp273 ) ) - ( tmp265 * tmp272 ) )
				Var tmp306 : Real = ( ( ( ( ( ( ( ( ( ( -0.5 * bath@[0, 0] ) * g ) * tmp262 ) - ( ( ( ( 0.166666666666667 * 1.73205080756888 ) * bath@[0, 0] ) * g ) * tmp263 ) ) - ( ( ( 0.5 * bath@[0, 1] ) * g ) * tmp262 ) ) + ( ( ( ( 0.166666666666667 * 1.73205080756888 ) * bath@[0, 1] ) * g ) * tmp263 ) ) - ( ( 0.5 * g ) * ( tmp262 * tmp262 ) ) ) - ( ( 0.5 * g ) * ( tmp263 * tmp263 ) ) ) - ( tmp266 * tmp274 ) ) - ( tmp267 * tmp275 ) )
				Var tmp307 : Real = ( ( ( ( ( ( ( ( ( ( -0.166666666666667 * 1.73205080756888 ) * bath@[0, 0] ) * g ) * tmp262 ) - ( ( ( 0.5 * bath@[0, 0] ) * g ) * tmp263 ) ) + ( ( ( ( 0.166666666666667 * 1.73205080756888 ) * bath@[0, 1] ) * g ) * tmp262 ) ) - ( ( ( 0.5 * bath@[0, 1] ) * g ) * tmp263 ) ) - ( ( g * tmp262 ) * tmp263 ) ) - ( tmp266 * tmp275 ) ) - ( tmp267 * tmp274 ) )
				Var tmp308 : Real = ( ( (-tmp268) * tmp272 ) - ( tmp269 * tmp273 ) )
				Var tmp309 : Real = ( ( (-tmp268) * tmp273 ) - ( tmp269 * tmp272 ) )
				Var tmp310 : Real = ( ( (-tmp270) * tmp274 ) - ( tmp271 * tmp275 ) )
				Var tmp311 : Real = ( ( (-tmp270) * tmp275 ) - ( tmp271 * tmp274 ) )
				cetaEdgeVUpper0 = ( ( ( ( ( ( -31.25 * 1.4142135623731 ) * lam1 ) * tmp260 ) + ( ( ( 31.25 * 1.4142135623731 ) * lam1 ) * tmp262 ) ) - ( ( 31.25 * 1.4142135623731 ) * tmp300 ) ) - ( ( 31.25 * 1.4142135623731 ) * tmp302 ) )
				cetaEdgeVUpper1 = ( ( ( ( ( -62.5 * lam1 ) * tmp260 ) + ( ( 62.5 * lam1 ) * tmp262 ) ) - ( 62.5 * tmp300 ) ) - ( 62.5 * tmp302 ) )
				cetaEdgeVUpper2 = ( ( ( ( ( 62.5 * lam1 ) * tmp261 ) - ( ( 62.5 * lam1 ) * tmp263 ) ) + ( 62.5 * tmp301 ) ) + ( 62.5 * tmp303 ) )
				cuEdgeVUpper0 = ( ( ( ( ( ( -31.25 * 1.4142135623731 ) * lam1 ) * tmp264 ) + ( ( ( 31.25 * 1.4142135623731 ) * lam1 ) * tmp266 ) ) - ( ( 31.25 * 1.4142135623731 ) * tmp304 ) ) - ( ( 31.25 * 1.4142135623731 ) * tmp306 ) )
				cuEdgeVUpper1 = ( ( ( ( ( -62.5 * lam1 ) * tmp264 ) + ( ( 62.5 * lam1 ) * tmp266 ) ) - ( 62.5 * tmp304 ) ) - ( 62.5 * tmp306 ) )
				cuEdgeVUpper2 = ( ( ( ( ( 62.5 * lam1 ) * tmp265 ) - ( ( 62.5 * lam1 ) * tmp267 ) ) + ( 62.5 * tmp305 ) ) + ( 62.5 * tmp307 ) )
				cvEdgeVUpper0 = ( ( ( ( ( ( -31.25 * 1.4142135623731 ) * lam1 ) * tmp268 ) + ( ( ( 31.25 * 1.4142135623731 ) * lam1 ) * tmp270 ) ) - ( ( 31.25 * 1.4142135623731 ) * tmp308 ) ) - ( ( 31.25 * 1.4142135623731 ) * tmp310 ) )
				cvEdgeVUpper1 = ( ( ( ( ( -62.5 * lam1 ) * tmp268 ) + ( ( 62.5 * lam1 ) * tmp270 ) ) - ( 62.5 * tmp308 ) ) - ( 62.5 * tmp310 ) )
				cvEdgeVUpper2 = ( ( ( ( ( 62.5 * lam1 ) * tmp269 ) - ( ( 62.5 * lam1 ) * tmp271 ) ) + ( 62.5 * tmp309 ) ) + ( 62.5 * tmp311 ) )
			}
		}
		loop over cetaEdgeHLower0 only inner [0, 0] {
			Var tmp312 : Real = ( ( ( ( 0.016 * 1.4142135623731 ) * cetaLower0@[0, 0] ) - ( 0.016 * cetaLower1@[0, 0] ) ) + ( ( 0.016 * 1.73205080756888 ) * cetaLower2@[0, 0] ) )
			Var tmp313 : Real = ( ( ( -0.016 * 1.73205080756888 ) * cetaLower1@[0, 0] ) - ( 0.016 * cetaLower2@[0, 0] ) )
			Var tmp314 : Real = ( ( ( ( 0.016 * 1.4142135623731 ) * cetaUpper0@[0, -1] ) - ( 0.016 * cetaUpper1@[0, -1] ) ) + ( ( 0.016 * 1.73205080756888 ) * cetaUpper2@[0, -1] ) )
			Var tmp315 : Real = ( ( ( 0.016 * 1.73205080756888 ) * cetaUpper1@[0, -1] ) + ( 0.016 * cetaUpper2@[0, -1] ) )
			Var tmp316 : Real = ( ( ( ( 0.016 * 1.4142135623731 ) * cuLower0@[0, 0] ) - ( 0.016 * cuLower1@[0, 0] ) ) + ( ( 0.016 * 1.73205080756888 ) * cuLower2@[0, 0] ) )
			Var tmp317 : Real = ( ( ( -0.016 * 1.73205080756888 ) * cuLower1@[0, 0] ) - ( 0.016 * cuLower2@[0, 0] ) )
			Var tmp318 : Real = ( ( ( ( 0.016 * 1.4142135623731 ) * cuUpper0@[0, -1] ) - ( 0.016 * cuUpper1@[0, -1] ) ) + ( ( 0.016 * 1.73205080756888 ) * cuUpper2@[0, -1] ) )
			Var tmp319 : Real = ( ( ( 0.016 * 1.73205080756888 ) * cuUpper1@[0, -1] ) + ( 0.016 * cuUpper2@[0, -1] ) )
			Var tmp320 : Real = ( ( ( ( 0.016 * 1.4142135623731 ) * cvLower0@[0, 0] ) - ( 0.016 * cvLower1@[0, 0] ) ) + ( ( 0.016 * 1.73205080756888 ) * cvLower2@[0, 0] ) )
			Var tmp321 : Real = ( ( ( -0.016 * 1.73205080756888 ) * cvLower1@[0, 0] ) - ( 0.016 * cvLower2@[0, 0] ) )
			Var tmp322 : Real = ( ( ( ( 0.016 * 1.4142135623731 ) * cvUpper0@[0, -1] ) - ( 0.016 * cvUpper1@[0, -1] ) ) + ( ( 0.016 * 1.73205080756888 ) * cvUpper2@[0, -1] ) )
			Var tmp323 : Real = ( ( ( 0.016 * 1.73205080756888 ) * cvUpper1@[0, -1] ) + ( 0.016 * cvUpper2@[0, -1] ) )
			Var tmp324 : Real = ( ( ( ( 0.016 * 1.4142135623731 ) * cuTildeLower0@[0, 0] ) - ( 0.016 * cuTildeLower1@[0, 0] ) ) + ( ( 0.016 * 1.73205080756888 ) * cuTildeLower2@[0, 0] ) )
			Var tmp325 : Real = ( ( ( -0.016 * 1.73205080756888 ) * cuTildeLower1@[0, 0] ) - ( 0.016 * cuTildeLower2@[0, 0] ) )
			Var tmp326 : Real = ( ( ( ( 0.016 * 1.4142135623731 ) * cuTildeUpper0@[0, -1] ) - ( 0.016 * cuTildeUpper1@[0, -1] ) ) + ( ( 0.016 * 1.73205080756888 ) * cuTildeUpper2@[0, -1] ) )
			Var tmp327 : Real = ( ( ( 0.016 * 1.73205080756888 ) * cuTildeUpper1@[0, -1] ) + ( 0.016 * cuTildeUpper2@[0, -1] ) )
			Var tmp328 : Real = ( ( ( ( 0.016 * 1.4142135623731 ) * cvTildeLower0@[0, 0] ) - ( 0.016 * cvTildeLower1@[0, 0] ) ) + ( ( 0.016 * 1.73205080756888 ) * cvTildeLower2@[0, 0] ) )
			Var tmp329 : Real = ( ( ( -0.016 * 1.73205080756888 ) * cvTildeLower1@[0, 0] ) - ( 0.016 * cvTildeLower2@[0, 0] ) )
			Var tmp330 : Real = ( ( ( ( 0.016 * 1.4142135623731 ) * cvTildeUpper0@[0, -1] ) - ( 0.016 * cvTildeUpper1@[0, -1] ) ) + ( ( 0.016 * 1.73205080756888 ) * cvTildeUpper2@[0, -1] ) )
			Var tmp331 : Real = ( ( ( 0.016 * 1.73205080756888 ) * cvTildeUpper1@[0, -1] ) + ( 0.016 * cvTildeUpper2@[0, -1] ) )
			Var tmp332 : Real = ( ( ( ( 0.016 * 1.4142135623731 ) * cetaLower0@[0, 0] ) - ( 0.016 * cetaLower1@[0, 0] ) ) + ( ( 0.016 * 1.73205080756888 ) * cetaLower2@[0, 0] ) )
			Var tmp333 : Real = ( ( ( -0.016 * 1.73205080756888 ) * cetaLower1@[0, 0] ) - ( 0.016 * cetaLower2@[0, 0] ) )
			Var tmp334 : Real = ( ( ( ( 0.016 * 1.4142135623731 ) * cetaUpper0@[0, -1] ) - ( 0.016 * cetaUpper1@[0, -1] ) ) + ( ( 0.016 * 1.73205080756888 ) * cetaUpper2@[0, -1] ) )
			Var tmp335 : Real = ( ( ( 0.016 * 1.73205080756888 ) * cetaUpper1@[0, -1] ) + ( 0.016 * cetaUpper2@[0, -1] ) )
			Var tmp336 : Real = ( ( ( ( 0.016 * 1.4142135623731 ) * cuLower0@[0, 0] ) - ( 0.016 * cuLower1@[0, 0] ) ) + ( ( 0.016 * 1.73205080756888 ) * cuLower2@[0, 0] ) )
			Var tmp337 : Real = ( ( ( -0.016 * 1.73205080756888 ) * cuLower1@[0, 0] ) - ( 0.016 * cuLower2@[0, 0] ) )
			Var tmp338 : Real = ( ( ( ( 0.016 * 1.4142135623731 ) * cuUpper0@[0, -1] ) - ( 0.016 * cuUpper1@[0, -1] ) ) + ( ( 0.016 * 1.73205080756888 ) * cuUpper2@[0, -1] ) )
			Var tmp339 : Real = ( ( ( 0.016 * 1.73205080756888 ) * cuUpper1@[0, -1] ) + ( 0.016 * cuUpper2@[0, -1] ) )
			Var tmp340 : Real = ( ( ( ( 0.016 * 1.4142135623731 ) * cvLower0@[0, 0] ) - ( 0.016 * cvLower1@[0, 0] ) ) + ( ( 0.016 * 1.73205080756888 ) * cvLower2@[0, 0] ) )
			Var tmp341 : Real = ( ( ( -0.016 * 1.73205080756888 ) * cvLower1@[0, 0] ) - ( 0.016 * cvLower2@[0, 0] ) )
			Var tmp342 : Real = ( ( ( ( 0.016 * 1.4142135623731 ) * cvUpper0@[0, -1] ) - ( 0.016 * cvUpper1@[0, -1] ) ) + ( ( 0.016 * 1.73205080756888 ) * cvUpper2@[0, -1] ) )
			Var tmp343 : Real = ( ( ( 0.016 * 1.73205080756888 ) * cvUpper1@[0, -1] ) + ( 0.016 * cvUpper2@[0, -1] ) )
			Var tmp344 : Real = ( ( ( ( 0.016 * 1.4142135623731 ) * cuTildeLower0@[0, 0] ) - ( 0.016 * cuTildeLower1@[0, 0] ) ) + ( ( 0.016 * 1.73205080756888 ) * cuTildeLower2@[0, 0] ) )
			Var tmp345 : Real = ( ( ( -0.016 * 1.73205080756888 ) * cuTildeLower1@[0, 0] ) - ( 0.016 * cuTildeLower2@[0, 0] ) )
			Var tmp346 : Real = ( ( ( ( 0.016 * 1.4142135623731 ) * cuTildeUpper0@[0, -1] ) - ( 0.016 * cuTildeUpper1@[0, -1] ) ) + ( ( 0.016 * 1.73205080756888 ) * cuTildeUpper2@[0, -1] ) )
			Var tmp347 : Real = ( ( ( 0.016 * 1.73205080756888 ) * cuTildeUpper1@[0, -1] ) + ( 0.016 * cuTildeUpper2@[0, -1] ) )
			Var tmp348 : Real = ( ( ( ( 0.016 * 1.4142135623731 ) * cvTildeLower0@[0, 0] ) - ( 0.016 * cvTildeLower1@[0, 0] ) ) + ( ( 0.016 * 1.73205080756888 ) * cvTildeLower2@[0, 0] ) )
			Var tmp349 : Real = ( ( ( -0.016 * 1.73205080756888 ) * cvTildeLower1@[0, 0] ) - ( 0.016 * cvTildeLower2@[0, 0] ) )
			Var tmp350 : Real = ( ( ( ( 0.016 * 1.4142135623731 ) * cvTildeUpper0@[0, -1] ) - ( 0.016 * cvTildeUpper1@[0, -1] ) ) + ( ( 0.016 * 1.73205080756888 ) * cvTildeUpper2@[0, -1] ) )
			Var tmp351 : Real = ( ( ( 0.016 * 1.73205080756888 ) * cvTildeUpper1@[0, -1] ) + ( 0.016 * cvTildeUpper2@[0, -1] ) )
			Var lam2 : Real = ( ( sqrt ( g ) * sqrt ( fmax ( 0, fmax ( ( ( ( 0.5 * bath@[0, 0] ) + ( 0.5 * bath@[1, 0] ) ) + tmp332 ), ( ( ( 0.5 * bath@[0, 0] ) + ( 0.5 * bath@[1, 0] ) ) + tmp334 ) ) ) ) ) + fmax ( fabs ( (-tmp348) ), fabs ( (-tmp350) ) ) )
			Var tmp352 : Real = (-tmp320)
			Var tmp353 : Real = (-tmp321)
			Var tmp354 : Real = (-tmp322)
			Var tmp355 : Real = (-tmp323)
			Var tmp356 : Real = ( ( (-tmp316) * tmp328 ) - ( tmp317 * tmp329 ) )
			Var tmp357 : Real = ( ( (-tmp316) * tmp329 ) - ( tmp317 * tmp328 ) )
			Var tmp358 : Real = ( ( (-tmp318) * tmp330 ) - ( tmp319 * tmp331 ) )
			Var tmp359 : Real = ( ( (-tmp318) * tmp331 ) - ( tmp319 * tmp330 ) )
			Var tmp360 : Real = ( ( ( ( ( ( ( ( ( ( -0.5 * bath@[0, 0] ) * g ) * tmp312 ) + ( ( ( ( 0.166666666666667 * 1.73205080756888 ) * bath@[0, 0] ) * g ) * tmp313 ) ) - ( ( ( 0.5 * bath@[1, 0] ) * g ) * tmp312 ) ) - ( ( ( ( 0.166666666666667 * 1.73205080756888 ) * bath@[1, 0] ) * g ) * tmp313 ) ) - ( ( 0.5 * g ) * ( tmp312 * tmp312 ) ) ) - ( ( 0.5 * g ) * ( tmp313 * tmp313 ) ) ) - ( tmp320 * tmp328 ) ) - ( tmp321 * tmp329 ) )
			Var tmp361 : Real = ( ( ( ( ( ( ( ( ( ( 0.166666666666667 * 1.73205080756888 ) * bath@[0, 0] ) * g ) * tmp312 ) - ( ( ( 0.5 * bath@[0, 0] ) * g ) * tmp313 ) ) - ( ( ( ( 0.166666666666667 * 1.73205080756888 ) * bath@[1, 0] ) * g ) * tmp312 ) ) - ( ( ( 0.5 * bath@[1, 0] ) * g ) * tmp313 ) ) - ( ( g * tmp312 ) * tmp313 ) ) - ( tmp320 * tmp329 ) ) - ( tmp321 * tmp328 ) )
			Var tmp362 : Real = ( ( ( ( ( ( ( ( ( ( -0.5 * bath@[0, 0] ) * g ) * tmp314 ) + ( ( ( ( 0.166666666666667 * 1.73205080756888 ) * bath@[0, 0] ) * g ) * tmp315 ) ) - ( ( ( 0.5 * bath@[1, 0] ) * g ) * tmp314 ) ) - ( ( ( ( 0.166666666666667 * 1.73205080756888 ) * bath@[1, 0] ) * g ) * tmp315 ) ) - ( ( 0.5 * g ) * ( tmp314 * tmp314 ) ) ) - ( ( 0.5 * g ) * ( tmp315 * tmp315 ) ) ) - ( tmp322 * tmp330 ) ) - ( tmp323 * tmp331 ) )
			Var tmp363 : Real = ( ( ( ( ( ( ( ( ( ( 0.166666666666667 * 1.73205080756888 ) * bath@[0, 0] ) * g ) * tmp314 ) - ( ( ( 0.5 * bath@[0, 0] ) * g ) * tmp315 ) ) - ( ( ( ( 0.166666666666667 * 1.73205080756888 ) * bath@[1, 0] ) * g ) * tmp314 ) ) - ( ( ( 0.5 * bath@[1, 0] ) * g ) * tmp315 ) ) - ( ( g * tmp314 ) * tmp315 ) ) - ( tmp322 * tmp331 ) ) - ( tmp323 * tmp330 ) )
			cetaEdgeHLower0 = ( ( ( ( ( ( 31.25 * 1.4142135623731 ) * lam2 ) * tmp312 ) - ( ( ( 31.25 * 1.4142135623731 ) * lam2 ) * tmp314 ) ) + ( ( 31.25 * 1.4142135623731 ) * tmp352 ) ) + ( ( 31.25 * 1.4142135623731 ) * tmp354 ) )
			cetaEdgeHLower1 = ( ( ( ( ( ( ( ( ( -31.25 * lam2 ) * tmp312 ) - ( ( ( 31.25 * 1.73205080756888 ) * lam2 ) * tmp313 ) ) + ( ( 31.25 * lam2 ) * tmp314 ) ) + ( ( ( 31.25 * 1.73205080756888 ) * lam2 ) * tmp315 ) ) - ( 31.25 * tmp352 ) ) - ( ( 31.25 * 1.73205080756888 ) * tmp353 ) ) - ( 31.25 * tmp354 ) ) - ( ( 31.25 * 1.73205080756888 ) * tmp355 ) )
			cetaEdgeHLower2 = ( ( ( ( ( ( ( ( ( ( 31.25 * 1.73205080756888 ) * lam2 ) * tmp312 ) - ( ( 31.25 * lam2 ) * tmp313 ) ) - ( ( ( 31.25 * 1.73205080756888 ) * lam2 ) * tmp314 ) ) + ( ( 31.25 * lam2 ) * tmp315 ) ) + ( ( 31.25 * 1.73205080756888 ) * tmp352 ) ) - ( 31.25 * tmp353 ) ) + ( ( 31.25 * 1.73205080756888 ) * tmp354 ) ) - ( 31.25 * tmp355 ) )
			cuEdgeHLower0 = ( ( ( ( ( ( 31.25 * 1.4142135623731 ) * lam2 ) * tmp316 ) - ( ( ( 31.25 * 1.4142135623731 ) * lam2 ) * tmp318 ) ) + ( ( 31.25 * 1.4142135623731 ) * tmp356 ) ) + ( ( 31.25 * 1.4142135623731 ) * tmp358 ) )
			cuEdgeHLower1 = ( ( ( ( ( ( ( ( ( -31.25 * lam2 ) * tmp316 ) - ( ( ( 31.25 * 1.73205080756888 ) * lam2 ) * tmp317 ) ) + ( ( 31.25 * lam2 ) * tmp318 ) ) + ( ( ( 31.25 * 1.73205080756888 ) * lam2 ) * tmp319 ) ) - ( 31.25 * tmp356 ) ) - ( ( 31.25 * 1.73205080756888 ) * tmp357 ) ) - ( 31.25 * tmp358 ) ) - ( ( 31.25 * 1.73205080756888 ) * tmp359 ) )
			cuEdgeHLower2 = ( ( ( ( ( ( ( ( ( ( 31.25 * 1.73205080756888 ) * lam2 ) * tmp316 ) - ( ( 31.25 * lam2 ) * tmp317 ) ) - ( ( ( 31.25 * 1.73205080756888 ) * lam2 ) * tmp318 ) ) + ( ( 31.25 * lam2 ) * tmp319 ) ) + ( ( 31.25 * 1.73205080756888 ) * tmp356 ) ) - ( 31.25 * tmp357 ) ) + ( ( 31.25 * 1.73205080756888 ) * tmp358 ) ) - ( 31.25 * tmp359 ) )
			cvEdgeHLower0 = ( ( ( ( ( ( 31.25 * 1.4142135623731 ) * lam2 ) * tmp320 ) - ( ( ( 31.25 * 1.4142135623731 ) * lam2 ) * tmp322 ) ) + ( ( 31.25 * 1.4142135623731 ) * tmp360 ) ) + ( ( 31.25 * 1.4142135623731 ) * tmp362 ) )
			cvEdgeHLower1 = ( ( ( ( ( ( ( ( ( -31.25 * lam2 ) * tmp320 ) - ( ( ( 31.25 * 1.73205080756888 ) * lam2 ) * tmp321 ) ) + ( ( 31.25 * lam2 ) * tmp322 ) ) + ( ( ( 31.25 * 1.73205080756888 ) * lam2 ) * tmp323 ) ) - ( 31.25 * tmp360 ) ) - ( ( 31.25 * 1.73205080756888 ) * tmp361 ) ) - ( 31.25 * tmp362 ) ) - ( ( 31.25 * 1.73205080756888 ) * tmp363 ) )
			cvEdgeHLower2 = ( ( ( ( ( ( ( ( ( ( 31.25 * 1.73205080756888 ) * lam2 ) * tmp320 ) - ( ( 31.25 * lam2 ) * tmp321 ) ) - ( ( ( 31.25 * 1.73205080756888 ) * lam2 ) * tmp322 ) ) + ( ( 31.25 * lam2 ) * tmp323 ) ) + ( ( 31.25 * 1.73205080756888 ) * tmp360 ) ) - ( 31.25 * tmp361 ) ) + ( ( 31.25 * 1.73205080756888 ) * tmp362 ) ) - ( 31.25 * tmp363 ) )
			cetaEdgeHUpper0 = ( ( ( ( ( ( -31.25 * 1.4142135623731 ) * lam2 ) * tmp312 ) + ( ( ( 31.25 * 1.4142135623731 ) * lam2 ) * tmp314 ) ) - ( ( 31.25 * 1.4142135623731 ) * tmp352 ) ) - ( ( 31.25 * 1.4142135623731 ) * tmp354 ) )
			cetaEdgeHUpper1 = ( ( ( ( ( ( ( ( ( 31.25 * lam2 ) * tmp312 ) - ( ( ( 31.25 * 1.73205080756888 ) * lam2 ) * tmp313 ) ) - ( ( 31.25 * lam2 ) * tmp314 ) ) + ( ( ( 31.25 * 1.73205080756888 ) * lam2 ) * tmp315 ) ) + ( 31.25 * tmp352 ) ) - ( ( 31.25 * 1.73205080756888 ) * tmp353 ) ) + ( 31.25 * tmp354 ) ) - ( ( 31.25 * 1.73205080756888 ) * tmp355 ) )
			cetaEdgeHUpper2 = ( ( ( ( ( ( ( ( ( ( -31.25 * 1.73205080756888 ) * lam2 ) * tmp312 ) - ( ( 31.25 * lam2 ) * tmp313 ) ) + ( ( ( 31.25 * 1.73205080756888 ) * lam2 ) * tmp314 ) ) + ( ( 31.25 * lam2 ) * tmp315 ) ) - ( ( 31.25 * 1.73205080756888 ) * tmp352 ) ) - ( 31.25 * tmp353 ) ) - ( ( 31.25 * 1.73205080756888 ) * tmp354 ) ) - ( 31.25 * tmp355 ) )
			cuEdgeHUpper0 = ( ( ( ( ( ( -31.25 * 1.4142135623731 ) * lam2 ) * tmp316 ) + ( ( ( 31.25 * 1.4142135623731 ) * lam2 ) * tmp318 ) ) - ( ( 31.25 * 1.4142135623731 ) * tmp356 ) ) - ( ( 31.25 * 1.4142135623731 ) * tmp358 ) )
			cuEdgeHUpper1 = ( ( ( ( ( ( ( ( ( 31.25 * lam2 ) * tmp316 ) - ( ( ( 31.25 * 1.73205080756888 ) * lam2 ) * tmp317 ) ) - ( ( 31.25 * lam2 ) * tmp318 ) ) + ( ( ( 31.25 * 1.73205080756888 ) * lam2 ) * tmp319 ) ) + ( 31.25 * tmp356 ) ) - ( ( 31.25 * 1.73205080756888 ) * tmp357 ) ) + ( 31.25 * tmp358 ) ) - ( ( 31.25 * 1.73205080756888 ) * tmp359 ) )
			cuEdgeHUpper2 = ( ( ( ( ( ( ( ( ( ( -31.25 * 1.73205080756888 ) * lam2 ) * tmp316 ) - ( ( 31.25 * lam2 ) * tmp317 ) ) + ( ( ( 31.25 * 1.73205080756888 ) * lam2 ) * tmp318 ) ) + ( ( 31.25 * lam2 ) * tmp319 ) ) - ( ( 31.25 * 1.73205080756888 ) * tmp356 ) ) - ( 31.25 * tmp357 ) ) - ( ( 31.25 * 1.73205080756888 ) * tmp358 ) ) - ( 31.25 * tmp359 ) )
			cvEdgeHUpper0 = ( ( ( ( ( ( -31.25 * 1.4142135623731 ) * lam2 ) * tmp320 ) + ( ( ( 31.25 * 1.4142135623731 ) * lam2 ) * tmp322 ) ) - ( ( 31.25 * 1.4142135623731 ) * tmp360 ) ) - ( ( 31.25 * 1.4142135623731 ) * tmp362 ) )
			cvEdgeHUpper1 = ( ( ( ( ( ( ( ( ( 31.25 * lam2 ) * tmp320 ) - ( ( ( 31.25 * 1.73205080756888 ) * lam2 ) * tmp321 ) ) - ( ( 31.25 * lam2 ) * tmp322 ) ) + ( ( ( 31.25 * 1.73205080756888 ) * lam2 ) * tmp323 ) ) + ( 31.25 * tmp360 ) ) - ( ( 31.25 * 1.73205080756888 ) * tmp361 ) ) + ( 31.25 * tmp362 ) ) - ( ( 31.25 * 1.73205080756888 ) * tmp363 ) )
			cvEdgeHUpper2 = ( ( ( ( ( ( ( ( ( ( -31.25 * 1.73205080756888 ) * lam2 ) * tmp320 ) - ( ( 31.25 * lam2 ) * tmp321 ) ) + ( ( ( 31.25 * 1.73205080756888 ) * lam2 ) * tmp322 ) ) + ( ( 31.25 * lam2 ) * tmp323 ) ) - ( ( 31.25 * 1.73205080756888 ) * tmp360 ) ) - ( 31.25 * tmp361 ) ) - ( ( 31.25 * 1.73205080756888 ) * tmp362 ) ) - ( 31.25 * tmp363 ) )
		}
		if ( ( ( ( getNeighFragEdge ( fragmentIdx, 2 ) < 0 ) || ( getNeighFragEdge ( fragmentIdx, 2 ) == 2 ) ) || ( getNeighFragEdge ( fragmentIdx, 2 ) == 3 ) ) ) {
			loop over cetaEdgeHLower0 only dup [0, -1] {
				Var tmp364 : Real = ( ( ( ( 0.016 * 1.4142135623731 ) * cetaLower0@[0, 0] ) - ( 0.016 * cetaLower1@[0, 0] ) ) + ( ( 0.016 * 1.73205080756888 ) * cetaLower2@[0, 0] ) )
				Var tmp365 : Real = ( ( ( -0.016 * 1.73205080756888 ) * cetaLower1@[0, 0] ) - ( 0.016 * cetaLower2@[0, 0] ) )
				Var tmp366 : Real = ( ( ( ( 0.016 * 1.4142135623731 ) * cetaUpper0@[0, -1] ) - ( 0.016 * cetaUpper1@[0, -1] ) ) + ( ( 0.016 * 1.73205080756888 ) * cetaUpper2@[0, -1] ) )
				Var tmp367 : Real = ( ( ( 0.016 * 1.73205080756888 ) * cetaUpper1@[0, -1] ) + ( 0.016 * cetaUpper2@[0, -1] ) )
				Var tmp368 : Real = ( ( ( ( 0.016 * 1.4142135623731 ) * cuLower0@[0, 0] ) - ( 0.016 * cuLower1@[0, 0] ) ) + ( ( 0.016 * 1.73205080756888 ) * cuLower2@[0, 0] ) )
				Var tmp369 : Real = ( ( ( -0.016 * 1.73205080756888 ) * cuLower1@[0, 0] ) - ( 0.016 * cuLower2@[0, 0] ) )
				Var tmp370 : Real = ( ( ( ( 0.016 * 1.4142135623731 ) * cuUpper0@[0, -1] ) - ( 0.016 * cuUpper1@[0, -1] ) ) + ( ( 0.016 * 1.73205080756888 ) * cuUpper2@[0, -1] ) )
				Var tmp371 : Real = ( ( ( 0.016 * 1.73205080756888 ) * cuUpper1@[0, -1] ) + ( 0.016 * cuUpper2@[0, -1] ) )
				Var tmp372 : Real = ( ( ( ( 0.016 * 1.4142135623731 ) * cvLower0@[0, 0] ) - ( 0.016 * cvLower1@[0, 0] ) ) + ( ( 0.016 * 1.73205080756888 ) * cvLower2@[0, 0] ) )
				Var tmp373 : Real = ( ( ( -0.016 * 1.73205080756888 ) * cvLower1@[0, 0] ) - ( 0.016 * cvLower2@[0, 0] ) )
				Var tmp374 : Real = ( ( ( ( 0.016 * 1.4142135623731 ) * cvUpper0@[0, -1] ) - ( 0.016 * cvUpper1@[0, -1] ) ) + ( ( 0.016 * 1.73205080756888 ) * cvUpper2@[0, -1] ) )
				Var tmp375 : Real = ( ( ( 0.016 * 1.73205080756888 ) * cvUpper1@[0, -1] ) + ( 0.016 * cvUpper2@[0, -1] ) )
				Var tmp376 : Real = ( ( ( ( 0.016 * 1.4142135623731 ) * cuTildeLower0@[0, 0] ) - ( 0.016 * cuTildeLower1@[0, 0] ) ) + ( ( 0.016 * 1.73205080756888 ) * cuTildeLower2@[0, 0] ) )
				Var tmp377 : Real = ( ( ( -0.016 * 1.73205080756888 ) * cuTildeLower1@[0, 0] ) - ( 0.016 * cuTildeLower2@[0, 0] ) )
				Var tmp378 : Real = ( ( ( ( 0.016 * 1.4142135623731 ) * cuTildeUpper0@[0, -1] ) - ( 0.016 * cuTildeUpper1@[0, -1] ) ) + ( ( 0.016 * 1.73205080756888 ) * cuTildeUpper2@[0, -1] ) )
				Var tmp379 : Real = ( ( ( 0.016 * 1.73205080756888 ) * cuTildeUpper1@[0, -1] ) + ( 0.016 * cuTildeUpper2@[0, -1] ) )
				Var tmp380 : Real = ( ( ( ( 0.016 * 1.4142135623731 ) * cvTildeLower0@[0, 0] ) - ( 0.016 * cvTildeLower1@[0, 0] ) ) + ( ( 0.016 * 1.73205080756888 ) * cvTildeLower2@[0, 0] ) )
				Var tmp381 : Real = ( ( ( -0.016 * 1.73205080756888 ) * cvTildeLower1@[0, 0] ) - ( 0.016 * cvTildeLower2@[0, 0] ) )
				Var tmp382 : Real = ( ( ( ( 0.016 * 1.4142135623731 ) * cvTildeUpper0@[0, -1] ) - ( 0.016 * cvTildeUpper1@[0, -1] ) ) + ( ( 0.016 * 1.73205080756888 ) * cvTildeUpper2@[0, -1] ) )
				Var tmp383 : Real = ( ( ( 0.016 * 1.73205080756888 ) * cvTildeUpper1@[0, -1] ) + ( 0.016 * cvTildeUpper2@[0, -1] ) )
				Var tmp384 : Real = ( ( ( ( 0.016 * 1.4142135623731 ) * cetaLower0@[0, 0] ) - ( 0.016 * cetaLower1@[0, 0] ) ) + ( ( 0.016 * 1.73205080756888 ) * cetaLower2@[0, 0] ) )
				Var tmp385 : Real = ( ( ( -0.016 * 1.73205080756888 ) * cetaLower1@[0, 0] ) - ( 0.016 * cetaLower2@[0, 0] ) )
				Var tmp386 : Real = ( ( ( ( 0.016 * 1.4142135623731 ) * cetaUpper0@[0, -1] ) - ( 0.016 * cetaUpper1@[0, -1] ) ) + ( ( 0.016 * 1.73205080756888 ) * cetaUpper2@[0, -1] ) )
				Var tmp387 : Real = ( ( ( 0.016 * 1.73205080756888 ) * cetaUpper1@[0, -1] ) + ( 0.016 * cetaUpper2@[0, -1] ) )
				Var tmp388 : Real = ( ( ( ( 0.016 * 1.4142135623731 ) * cuLower0@[0, 0] ) - ( 0.016 * cuLower1@[0, 0] ) ) + ( ( 0.016 * 1.73205080756888 ) * cuLower2@[0, 0] ) )
				Var tmp389 : Real = ( ( ( -0.016 * 1.73205080756888 ) * cuLower1@[0, 0] ) - ( 0.016 * cuLower2@[0, 0] ) )
				Var tmp390 : Real = ( ( ( ( 0.016 * 1.4142135623731 ) * cuUpper0@[0, -1] ) - ( 0.016 * cuUpper1@[0, -1] ) ) + ( ( 0.016 * 1.73205080756888 ) * cuUpper2@[0, -1] ) )
				Var tmp391 : Real = ( ( ( 0.016 * 1.73205080756888 ) * cuUpper1@[0, -1] ) + ( 0.016 * cuUpper2@[0, -1] ) )
				Var tmp392 : Real = ( ( ( ( 0.016 * 1.4142135623731 ) * cvLower0@[0, 0] ) - ( 0.016 * cvLower1@[0, 0] ) ) + ( ( 0.016 * 1.73205080756888 ) * cvLower2@[0, 0] ) )
				Var tmp393 : Real = ( ( ( -0.016 * 1.73205080756888 ) * cvLower1@[0, 0] ) - ( 0.016 * cvLower2@[0, 0] ) )
				Var tmp394 : Real = ( ( ( ( 0.016 * 1.4142135623731 ) * cvUpper0@[0, -1] ) - ( 0.016 * cvUpper1@[0, -1] ) ) + ( ( 0.016 * 1.73205080756888 ) * cvUpper2@[0, -1] ) )
				Var tmp395 : Real = ( ( ( 0.016 * 1.73205080756888 ) * cvUpper1@[0, -1] ) + ( 0.016 * cvUpper2@[0, -1] ) )
				Var tmp396 : Real = ( ( ( ( 0.016 * 1.4142135623731 ) * cuTildeLower0@[0, 0] ) - ( 0.016 * cuTildeLower1@[0, 0] ) ) + ( ( 0.016 * 1.73205080756888 ) * cuTildeLower2@[0, 0] ) )
				Var tmp397 : Real = ( ( ( -0.016 * 1.73205080756888 ) * cuTildeLower1@[0, 0] ) - ( 0.016 * cuTildeLower2@[0, 0] ) )
				Var tmp398 : Real = ( ( ( ( 0.016 * 1.4142135623731 ) * cuTildeUpper0@[0, -1] ) - ( 0.016 * cuTildeUpper1@[0, -1] ) ) + ( ( 0.016 * 1.73205080756888 ) * cuTildeUpper2@[0, -1] ) )
				Var tmp399 : Real = ( ( ( 0.016 * 1.73205080756888 ) * cuTildeUpper1@[0, -1] ) + ( 0.016 * cuTildeUpper2@[0, -1] ) )
				Var tmp400 : Real = ( ( ( ( 0.016 * 1.4142135623731 ) * cvTildeLower0@[0, 0] ) - ( 0.016 * cvTildeLower1@[0, 0] ) ) + ( ( 0.016 * 1.73205080756888 ) * cvTildeLower2@[0, 0] ) )
				Var tmp401 : Real = ( ( ( -0.016 * 1.73205080756888 ) * cvTildeLower1@[0, 0] ) - ( 0.016 * cvTildeLower2@[0, 0] ) )
				Var tmp402 : Real = ( ( ( ( 0.016 * 1.4142135623731 ) * cvTildeUpper0@[0, -1] ) - ( 0.016 * cvTildeUpper1@[0, -1] ) ) + ( ( 0.016 * 1.73205080756888 ) * cvTildeUpper2@[0, -1] ) )
				Var tmp403 : Real = ( ( ( 0.016 * 1.73205080756888 ) * cvTildeUpper1@[0, -1] ) + ( 0.016 * cvTildeUpper2@[0, -1] ) )
				Var lam2 : Real = ( ( sqrt ( g ) * sqrt ( fmax ( 0, fmax ( ( ( ( 0.5 * bath@[0, 0] ) + ( 0.5 * bath@[1, 0] ) ) + tmp384 ), ( ( ( 0.5 * bath@[0, 0] ) + ( 0.5 * bath@[1, 0] ) ) + tmp386 ) ) ) ) ) + fmax ( fabs ( (-tmp400) ), fabs ( (-tmp402) ) ) )
				Var tmp404 : Real = (-tmp372)
				Var tmp405 : Real = (-tmp373)
				Var tmp406 : Real = (-tmp374)
				Var tmp407 : Real = (-tmp375)
				Var tmp408 : Real = ( ( (-tmp368) * tmp380 ) - ( tmp369 * tmp381 ) )
				Var tmp409 : Real = ( ( (-tmp368) * tmp381 ) - ( tmp369 * tmp380 ) )
				Var tmp410 : Real = ( ( (-tmp370) * tmp382 ) - ( tmp371 * tmp383 ) )
				Var tmp411 : Real = ( ( (-tmp370) * tmp383 ) - ( tmp371 * tmp382 ) )
				Var tmp412 : Real = ( ( ( ( ( ( ( ( ( ( -0.5 * bath@[0, 0] ) * g ) * tmp364 ) + ( ( ( ( 0.166666666666667 * 1.73205080756888 ) * bath@[0, 0] ) * g ) * tmp365 ) ) - ( ( ( 0.5 * bath@[1, 0] ) * g ) * tmp364 ) ) - ( ( ( ( 0.166666666666667 * 1.73205080756888 ) * bath@[1, 0] ) * g ) * tmp365 ) ) - ( ( 0.5 * g ) * ( tmp364 * tmp364 ) ) ) - ( ( 0.5 * g ) * ( tmp365 * tmp365 ) ) ) - ( tmp372 * tmp380 ) ) - ( tmp373 * tmp381 ) )
				Var tmp413 : Real = ( ( ( ( ( ( ( ( ( ( 0.166666666666667 * 1.73205080756888 ) * bath@[0, 0] ) * g ) * tmp364 ) - ( ( ( 0.5 * bath@[0, 0] ) * g ) * tmp365 ) ) - ( ( ( ( 0.166666666666667 * 1.73205080756888 ) * bath@[1, 0] ) * g ) * tmp364 ) ) - ( ( ( 0.5 * bath@[1, 0] ) * g ) * tmp365 ) ) - ( ( g * tmp364 ) * tmp365 ) ) - ( tmp372 * tmp381 ) ) - ( tmp373 * tmp380 ) )
				Var tmp414 : Real = ( ( ( ( ( ( ( ( ( ( -0.5 * bath@[0, 0] ) * g ) * tmp366 ) + ( ( ( ( 0.166666666666667 * 1.73205080756888 ) * bath@[0, 0] ) * g ) * tmp367 ) ) - ( ( ( 0.5 * bath@[1, 0] ) * g ) * tmp366 ) ) - ( ( ( ( 0.166666666666667 * 1.73205080756888 ) * bath@[1, 0] ) * g ) * tmp367 ) ) - ( ( 0.5 * g ) * ( tmp366 * tmp366 ) ) ) - ( ( 0.5 * g ) * ( tmp367 * tmp367 ) ) ) - ( tmp374 * tmp382 ) ) - ( tmp375 * tmp383 ) )
				Var tmp415 : Real = ( ( ( ( ( ( ( ( ( ( 0.166666666666667 * 1.73205080756888 ) * bath@[0, 0] ) * g ) * tmp366 ) - ( ( ( 0.5 * bath@[0, 0] ) * g ) * tmp367 ) ) - ( ( ( ( 0.166666666666667 * 1.73205080756888 ) * bath@[1, 0] ) * g ) * tmp366 ) ) - ( ( ( 0.5 * bath@[1, 0] ) * g ) * tmp367 ) ) - ( ( g * tmp366 ) * tmp367 ) ) - ( tmp374 * tmp383 ) ) - ( tmp375 * tmp382 ) )
				cetaEdgeHLower0 = ( ( ( ( ( ( 31.25 * 1.4142135623731 ) * lam2 ) * tmp364 ) - ( ( ( 31.25 * 1.4142135623731 ) * lam2 ) * tmp366 ) ) + ( ( 31.25 * 1.4142135623731 ) * tmp404 ) ) + ( ( 31.25 * 1.4142135623731 ) * tmp406 ) )
				cetaEdgeHLower1 = ( ( ( ( ( ( ( ( ( -31.25 * lam2 ) * tmp364 ) - ( ( ( 31.25 * 1.73205080756888 ) * lam2 ) * tmp365 ) ) + ( ( 31.25 * lam2 ) * tmp366 ) ) + ( ( ( 31.25 * 1.73205080756888 ) * lam2 ) * tmp367 ) ) - ( 31.25 * tmp404 ) ) - ( ( 31.25 * 1.73205080756888 ) * tmp405 ) ) - ( 31.25 * tmp406 ) ) - ( ( 31.25 * 1.73205080756888 ) * tmp407 ) )
				cetaEdgeHLower2 = ( ( ( ( ( ( ( ( ( ( 31.25 * 1.73205080756888 ) * lam2 ) * tmp364 ) - ( ( 31.25 * lam2 ) * tmp365 ) ) - ( ( ( 31.25 * 1.73205080756888 ) * lam2 ) * tmp366 ) ) + ( ( 31.25 * lam2 ) * tmp367 ) ) + ( ( 31.25 * 1.73205080756888 ) * tmp404 ) ) - ( 31.25 * tmp405 ) ) + ( ( 31.25 * 1.73205080756888 ) * tmp406 ) ) - ( 31.25 * tmp407 ) )
				cuEdgeHLower0 = ( ( ( ( ( ( 31.25 * 1.4142135623731 ) * lam2 ) * tmp368 ) - ( ( ( 31.25 * 1.4142135623731 ) * lam2 ) * tmp370 ) ) + ( ( 31.25 * 1.4142135623731 ) * tmp408 ) ) + ( ( 31.25 * 1.4142135623731 ) * tmp410 ) )
				cuEdgeHLower1 = ( ( ( ( ( ( ( ( ( -31.25 * lam2 ) * tmp368 ) - ( ( ( 31.25 * 1.73205080756888 ) * lam2 ) * tmp369 ) ) + ( ( 31.25 * lam2 ) * tmp370 ) ) + ( ( ( 31.25 * 1.73205080756888 ) * lam2 ) * tmp371 ) ) - ( 31.25 * tmp408 ) ) - ( ( 31.25 * 1.73205080756888 ) * tmp409 ) ) - ( 31.25 * tmp410 ) ) - ( ( 31.25 * 1.73205080756888 ) * tmp411 ) )
				cuEdgeHLower2 = ( ( ( ( ( ( ( ( ( ( 31.25 * 1.73205080756888 ) * lam2 ) * tmp368 ) - ( ( 31.25 * lam2 ) * tmp369 ) ) - ( ( ( 31.25 * 1.73205080756888 ) * lam2 ) * tmp370 ) ) + ( ( 31.25 * lam2 ) * tmp371 ) ) + ( ( 31.25 * 1.73205080756888 ) * tmp408 ) ) - ( 31.25 * tmp409 ) ) + ( ( 31.25 * 1.73205080756888 ) * tmp410 ) ) - ( 31.25 * tmp411 ) )
				cvEdgeHLower0 = ( ( ( ( ( ( 31.25 * 1.4142135623731 ) * lam2 ) * tmp372 ) - ( ( ( 31.25 * 1.4142135623731 ) * lam2 ) * tmp374 ) ) + ( ( 31.25 * 1.4142135623731 ) * tmp412 ) ) + ( ( 31.25 * 1.4142135623731 ) * tmp414 ) )
				cvEdgeHLower1 = ( ( ( ( ( ( ( ( ( -31.25 * lam2 ) * tmp372 ) - ( ( ( 31.25 * 1.73205080756888 ) * lam2 ) * tmp373 ) ) + ( ( 31.25 * lam2 ) * tmp374 ) ) + ( ( ( 31.25 * 1.73205080756888 ) * lam2 ) * tmp375 ) ) - ( 31.25 * tmp412 ) ) - ( ( 31.25 * 1.73205080756888 ) * tmp413 ) ) - ( 31.25 * tmp414 ) ) - ( ( 31.25 * 1.73205080756888 ) * tmp415 ) )
				cvEdgeHLower2 = ( ( ( ( ( ( ( ( ( ( 31.25 * 1.73205080756888 ) * lam2 ) * tmp372 ) - ( ( 31.25 * lam2 ) * tmp373 ) ) - ( ( ( 31.25 * 1.73205080756888 ) * lam2 ) * tmp374 ) ) + ( ( 31.25 * lam2 ) * tmp375 ) ) + ( ( 31.25 * 1.73205080756888 ) * tmp412 ) ) - ( 31.25 * tmp413 ) ) + ( ( 31.25 * 1.73205080756888 ) * tmp414 ) ) - ( 31.25 * tmp415 ) )
			}
		} else {
			loop over cetaEdgeHLower0 only dup [0, -1] {
				Var tmp416 : Real = ( ( ( ( 0.016 * 1.4142135623731 ) * cetaLower0@[0, 0] ) - ( 0.016 * cetaLower1@[0, 0] ) ) + ( ( 0.016 * 1.73205080756888 ) * cetaLower2@[0, 0] ) )
				Var tmp417 : Real = ( ( ( -0.016 * 1.73205080756888 ) * cetaLower1@[0, 0] ) - ( 0.016 * cetaLower2@[0, 0] ) )
				Var tmp418 : Real = ( ( ( 0.016 * 1.4142135623731 ) * cetaUpper0@[0, -1] ) + ( 0.032 * cetaUpper1@[0, -1] ) )
				Var tmp419 : Real = ( -0.032 * cetaUpper2@[0, -1] )
				Var tmp420 : Real = ( ( ( ( 0.016 * 1.4142135623731 ) * cuLower0@[0, 0] ) - ( 0.016 * cuLower1@[0, 0] ) ) + ( ( 0.016 * 1.73205080756888 ) * cuLower2@[0, 0] ) )
				Var tmp421 : Real = ( ( ( -0.016 * 1.73205080756888 ) * cuLower1@[0, 0] ) - ( 0.016 * cuLower2@[0, 0] ) )
				Var tmp422 : Real = ( ( ( 0.016 * 1.4142135623731 ) * cuUpper0@[0, -1] ) + ( 0.032 * cuUpper1@[0, -1] ) )
				Var tmp423 : Real = ( -0.032 * cuUpper2@[0, -1] )
				Var tmp424 : Real = ( ( ( ( 0.016 * 1.4142135623731 ) * cvLower0@[0, 0] ) - ( 0.016 * cvLower1@[0, 0] ) ) + ( ( 0.016 * 1.73205080756888 ) * cvLower2@[0, 0] ) )
				Var tmp425 : Real = ( ( ( -0.016 * 1.73205080756888 ) * cvLower1@[0, 0] ) - ( 0.016 * cvLower2@[0, 0] ) )
				Var tmp426 : Real = ( ( ( 0.016 * 1.4142135623731 ) * cvUpper0@[0, -1] ) + ( 0.032 * cvUpper1@[0, -1] ) )
				Var tmp427 : Real = ( -0.032 * cvUpper2@[0, -1] )
				Var tmp428 : Real = ( ( ( ( 0.016 * 1.4142135623731 ) * cuTildeLower0@[0, 0] ) - ( 0.016 * cuTildeLower1@[0, 0] ) ) + ( ( 0.016 * 1.73205080756888 ) * cuTildeLower2@[0, 0] ) )
				Var tmp429 : Real = ( ( ( -0.016 * 1.73205080756888 ) * cuTildeLower1@[0, 0] ) - ( 0.016 * cuTildeLower2@[0, 0] ) )
				Var tmp430 : Real = ( ( ( 0.016 * 1.4142135623731 ) * cuTildeUpper0@[0, -1] ) + ( 0.032 * cuTildeUpper1@[0, -1] ) )
				Var tmp431 : Real = ( -0.032 * cuTildeUpper2@[0, -1] )
				Var tmp432 : Real = ( ( ( ( 0.016 * 1.4142135623731 ) * cvTildeLower0@[0, 0] ) - ( 0.016 * cvTildeLower1@[0, 0] ) ) + ( ( 0.016 * 1.73205080756888 ) * cvTildeLower2@[0, 0] ) )
				Var tmp433 : Real = ( ( ( -0.016 * 1.73205080756888 ) * cvTildeLower1@[0, 0] ) - ( 0.016 * cvTildeLower2@[0, 0] ) )
				Var tmp434 : Real = ( ( ( 0.016 * 1.4142135623731 ) * cvTildeUpper0@[0, -1] ) + ( 0.032 * cvTildeUpper1@[0, -1] ) )
				Var tmp435 : Real = ( -0.032 * cvTildeUpper2@[0, -1] )
				Var tmp436 : Real = ( ( ( ( 0.016 * 1.4142135623731 ) * cetaLower0@[0, 0] ) - ( 0.016 * cetaLower1@[0, 0] ) ) + ( ( 0.016 * 1.73205080756888 ) * cetaLower2@[0, 0] ) )
				Var tmp437 : Real = ( ( ( -0.016 * 1.73205080756888 ) * cetaLower1@[0, 0] ) - ( 0.016 * cetaLower2@[0, 0] ) )
				Var tmp438 : Real = ( ( ( 0.016 * 1.4142135623731 ) * cetaUpper0@[0, -1] ) + ( 0.032 * cetaUpper1@[0, -1] ) )
				Var tmp439 : Real = ( -0.032 * cetaUpper2@[0, -1] )
				Var tmp440 : Real = ( ( ( ( 0.016 * 1.4142135623731 ) * cuLower0@[0, 0] ) - ( 0.016 * cuLower1@[0, 0] ) ) + ( ( 0.016 * 1.73205080756888 ) * cuLower2@[0, 0] ) )
				Var tmp441 : Real = ( ( ( -0.016 * 1.73205080756888 ) * cuLower1@[0, 0] ) - ( 0.016 * cuLower2@[0, 0] ) )
				Var tmp442 : Real = ( ( ( 0.016 * 1.4142135623731 ) * cuUpper0@[0, -1] ) + ( 0.032 * cuUpper1@[0, -1] ) )
				Var tmp443 : Real = ( -0.032 * cuUpper2@[0, -1] )
				Var tmp444 : Real = ( ( ( ( 0.016 * 1.4142135623731 ) * cvLower0@[0, 0] ) - ( 0.016 * cvLower1@[0, 0] ) ) + ( ( 0.016 * 1.73205080756888 ) * cvLower2@[0, 0] ) )
				Var tmp445 : Real = ( ( ( -0.016 * 1.73205080756888 ) * cvLower1@[0, 0] ) - ( 0.016 * cvLower2@[0, 0] ) )
				Var tmp446 : Real = ( ( ( 0.016 * 1.4142135623731 ) * cvUpper0@[0, -1] ) + ( 0.032 * cvUpper1@[0, -1] ) )
				Var tmp447 : Real = ( -0.032 * cvUpper2@[0, -1] )
				Var tmp448 : Real = ( ( ( ( 0.016 * 1.4142135623731 ) * cuTildeLower0@[0, 0] ) - ( 0.016 * cuTildeLower1@[0, 0] ) ) + ( ( 0.016 * 1.73205080756888 ) * cuTildeLower2@[0, 0] ) )
				Var tmp449 : Real = ( ( ( -0.016 * 1.73205080756888 ) * cuTildeLower1@[0, 0] ) - ( 0.016 * cuTildeLower2@[0, 0] ) )
				Var tmp450 : Real = ( ( ( 0.016 * 1.4142135623731 ) * cuTildeUpper0@[0, -1] ) + ( 0.032 * cuTildeUpper1@[0, -1] ) )
				Var tmp451 : Real = ( -0.032 * cuTildeUpper2@[0, -1] )
				Var tmp452 : Real = ( ( ( ( 0.016 * 1.4142135623731 ) * cvTildeLower0@[0, 0] ) - ( 0.016 * cvTildeLower1@[0, 0] ) ) + ( ( 0.016 * 1.73205080756888 ) * cvTildeLower2@[0, 0] ) )
				Var tmp453 : Real = ( ( ( -0.016 * 1.73205080756888 ) * cvTildeLower1@[0, 0] ) - ( 0.016 * cvTildeLower2@[0, 0] ) )
				Var tmp454 : Real = ( ( ( 0.016 * 1.4142135623731 ) * cvTildeUpper0@[0, -1] ) + ( 0.032 * cvTildeUpper1@[0, -1] ) )
				Var tmp455 : Real = ( -0.032 * cvTildeUpper2@[0, -1] )
				Var lam2 : Real = ( ( sqrt ( g ) * sqrt ( fmax ( 0, fmax ( ( ( ( 0.5 * bath@[0, 0] ) + ( 0.5 * bath@[1, 0] ) ) + tmp436 ), ( ( ( 0.5 * bath@[0, 0] ) + ( 0.5 * bath@[1, 0] ) ) + tmp438 ) ) ) ) ) + fmax ( fabs ( (-tmp452) ), fabs ( (-tmp454) ) ) )
				Var tmp456 : Real = (-tmp424)
				Var tmp457 : Real = (-tmp425)
				Var tmp458 : Real = (-tmp426)
				Var tmp459 : Real = (-tmp427)
				Var tmp460 : Real = ( ( (-tmp420) * tmp432 ) - ( tmp421 * tmp433 ) )
				Var tmp461 : Real = ( ( (-tmp420) * tmp433 ) - ( tmp421 * tmp432 ) )
				Var tmp462 : Real = ( ( (-tmp422) * tmp434 ) - ( tmp423 * tmp435 ) )
				Var tmp463 : Real = ( ( (-tmp422) * tmp435 ) - ( tmp423 * tmp434 ) )
				Var tmp464 : Real = ( ( ( ( ( ( ( ( ( ( -0.5 * bath@[0, 0] ) * g ) * tmp416 ) + ( ( ( ( 0.166666666666667 * 1.73205080756888 ) * bath@[0, 0] ) * g ) * tmp417 ) ) - ( ( ( 0.5 * bath@[1, 0] ) * g ) * tmp416 ) ) - ( ( ( ( 0.166666666666667 * 1.73205080756888 ) * bath@[1, 0] ) * g ) * tmp417 ) ) - ( ( 0.5 * g ) * ( tmp416 * tmp416 ) ) ) - ( ( 0.5 * g ) * ( tmp417 * tmp417 ) ) ) - ( tmp424 * tmp432 ) ) - ( tmp425 * tmp433 ) )
				Var tmp465 : Real = ( ( ( ( ( ( ( ( ( ( 0.166666666666667 * 1.73205080756888 ) * bath@[0, 0] ) * g ) * tmp416 ) - ( ( ( 0.5 * bath@[0, 0] ) * g ) * tmp417 ) ) - ( ( ( ( 0.166666666666667 * 1.73205080756888 ) * bath@[1, 0] ) * g ) * tmp416 ) ) - ( ( ( 0.5 * bath@[1, 0] ) * g ) * tmp417 ) ) - ( ( g * tmp416 ) * tmp417 ) ) - ( tmp424 * tmp433 ) ) - ( tmp425 * tmp432 ) )
				Var tmp466 : Real = ( ( ( ( ( ( ( ( ( ( -0.5 * bath@[0, 0] ) * g ) * tmp418 ) + ( ( ( ( 0.166666666666667 * 1.73205080756888 ) * bath@[0, 0] ) * g ) * tmp419 ) ) - ( ( ( 0.5 * bath@[1, 0] ) * g ) * tmp418 ) ) - ( ( ( ( 0.166666666666667 * 1.73205080756888 ) * bath@[1, 0] ) * g ) * tmp419 ) ) - ( ( 0.5 * g ) * ( tmp418 * tmp418 ) ) ) - ( ( 0.5 * g ) * ( tmp419 * tmp419 ) ) ) - ( tmp426 * tmp434 ) ) - ( tmp427 * tmp435 ) )
				Var tmp467 : Real = ( ( ( ( ( ( ( ( ( ( 0.166666666666667 * 1.73205080756888 ) * bath@[0, 0] ) * g ) * tmp418 ) - ( ( ( 0.5 * bath@[0, 0] ) * g ) * tmp419 ) ) - ( ( ( ( 0.166666666666667 * 1.73205080756888 ) * bath@[1, 0] ) * g ) * tmp418 ) ) - ( ( ( 0.5 * bath@[1, 0] ) * g ) * tmp419 ) ) - ( ( g * tmp418 ) * tmp419 ) ) - ( tmp426 * tmp435 ) ) - ( tmp427 * tmp434 ) )
				cetaEdgeHLower0 = ( ( ( ( ( ( 31.25 * 1.4142135623731 ) * lam2 ) * tmp416 ) - ( ( ( 31.25 * 1.4142135623731 ) * lam2 ) * tmp418 ) ) + ( ( 31.25 * 1.4142135623731 ) * tmp456 ) ) + ( ( 31.25 * 1.4142135623731 ) * tmp458 ) )
				cetaEdgeHLower1 = ( ( ( ( ( ( ( ( ( -31.25 * lam2 ) * tmp416 ) - ( ( ( 31.25 * 1.73205080756888 ) * lam2 ) * tmp417 ) ) + ( ( 31.25 * lam2 ) * tmp418 ) ) + ( ( ( 31.25 * 1.73205080756888 ) * lam2 ) * tmp419 ) ) - ( 31.25 * tmp456 ) ) - ( ( 31.25 * 1.73205080756888 ) * tmp457 ) ) - ( 31.25 * tmp458 ) ) - ( ( 31.25 * 1.73205080756888 ) * tmp459 ) )
				cetaEdgeHLower2 = ( ( ( ( ( ( ( ( ( ( 31.25 * 1.73205080756888 ) * lam2 ) * tmp416 ) - ( ( 31.25 * lam2 ) * tmp417 ) ) - ( ( ( 31.25 * 1.73205080756888 ) * lam2 ) * tmp418 ) ) + ( ( 31.25 * lam2 ) * tmp419 ) ) + ( ( 31.25 * 1.73205080756888 ) * tmp456 ) ) - ( 31.25 * tmp457 ) ) + ( ( 31.25 * 1.73205080756888 ) * tmp458 ) ) - ( 31.25 * tmp459 ) )
				cuEdgeHLower0 = ( ( ( ( ( ( 31.25 * 1.4142135623731 ) * lam2 ) * tmp420 ) - ( ( ( 31.25 * 1.4142135623731 ) * lam2 ) * tmp422 ) ) + ( ( 31.25 * 1.4142135623731 ) * tmp460 ) ) + ( ( 31.25 * 1.4142135623731 ) * tmp462 ) )
				cuEdgeHLower1 = ( ( ( ( ( ( ( ( ( -31.25 * lam2 ) * tmp420 ) - ( ( ( 31.25 * 1.73205080756888 ) * lam2 ) * tmp421 ) ) + ( ( 31.25 * lam2 ) * tmp422 ) ) + ( ( ( 31.25 * 1.73205080756888 ) * lam2 ) * tmp423 ) ) - ( 31.25 * tmp460 ) ) - ( ( 31.25 * 1.73205080756888 ) * tmp461 ) ) - ( 31.25 * tmp462 ) ) - ( ( 31.25 * 1.73205080756888 ) * tmp463 ) )
				cuEdgeHLower2 = ( ( ( ( ( ( ( ( ( ( 31.25 * 1.73205080756888 ) * lam2 ) * tmp420 ) - ( ( 31.25 * lam2 ) * tmp421 ) ) - ( ( ( 31.25 * 1.73205080756888 ) * lam2 ) * tmp422 ) ) + ( ( 31.25 * lam2 ) * tmp423 ) ) + ( ( 31.25 * 1.73205080756888 ) * tmp460 ) ) - ( 31.25 * tmp461 ) ) + ( ( 31.25 * 1.73205080756888 ) * tmp462 ) ) - ( 31.25 * tmp463 ) )
				cvEdgeHLower0 = ( ( ( ( ( ( 31.25 * 1.4142135623731 ) * lam2 ) * tmp424 ) - ( ( ( 31.25 * 1.4142135623731 ) * lam2 ) * tmp426 ) ) + ( ( 31.25 * 1.4142135623731 ) * tmp464 ) ) + ( ( 31.25 * 1.4142135623731 ) * tmp466 ) )
				cvEdgeHLower1 = ( ( ( ( ( ( ( ( ( -31.25 * lam2 ) * tmp424 ) - ( ( ( 31.25 * 1.73205080756888 ) * lam2 ) * tmp425 ) ) + ( ( 31.25 * lam2 ) * tmp426 ) ) + ( ( ( 31.25 * 1.73205080756888 ) * lam2 ) * tmp427 ) ) - ( 31.25 * tmp464 ) ) - ( ( 31.25 * 1.73205080756888 ) * tmp465 ) ) - ( 31.25 * tmp466 ) ) - ( ( 31.25 * 1.73205080756888 ) * tmp467 ) )
				cvEdgeHLower2 = ( ( ( ( ( ( ( ( ( ( 31.25 * 1.73205080756888 ) * lam2 ) * tmp424 ) - ( ( 31.25 * lam2 ) * tmp425 ) ) - ( ( ( 31.25 * 1.73205080756888 ) * lam2 ) * tmp426 ) ) + ( ( 31.25 * lam2 ) * tmp427 ) ) + ( ( 31.25 * 1.73205080756888 ) * tmp464 ) ) - ( 31.25 * tmp465 ) ) + ( ( 31.25 * 1.73205080756888 ) * tmp466 ) ) - ( 31.25 * tmp467 ) )
			}
		}
		if ( ( ( ( getNeighFragEdge ( fragmentIdx, 3 ) < 0 ) || ( getNeighFragEdge ( fragmentIdx, 3 ) == 2 ) ) || ( getNeighFragEdge ( fragmentIdx, 3 ) == 3 ) ) ) {
			loop over cetaEdgeHLower0 only dup [0, 1] {
				Var tmp468 : Real = ( ( ( ( 0.016 * 1.4142135623731 ) * cetaLower0@[0, 0] ) - ( 0.016 * cetaLower1@[0, 0] ) ) + ( ( 0.016 * 1.73205080756888 ) * cetaLower2@[0, 0] ) )
				Var tmp469 : Real = ( ( ( -0.016 * 1.73205080756888 ) * cetaLower1@[0, 0] ) - ( 0.016 * cetaLower2@[0, 0] ) )
				Var tmp470 : Real = ( ( ( ( 0.016 * 1.4142135623731 ) * cetaUpper0@[0, -1] ) - ( 0.016 * cetaUpper1@[0, -1] ) ) + ( ( 0.016 * 1.73205080756888 ) * cetaUpper2@[0, -1] ) )
				Var tmp471 : Real = ( ( ( 0.016 * 1.73205080756888 ) * cetaUpper1@[0, -1] ) + ( 0.016 * cetaUpper2@[0, -1] ) )
				Var tmp472 : Real = ( ( ( ( 0.016 * 1.4142135623731 ) * cuLower0@[0, 0] ) - ( 0.016 * cuLower1@[0, 0] ) ) + ( ( 0.016 * 1.73205080756888 ) * cuLower2@[0, 0] ) )
				Var tmp473 : Real = ( ( ( -0.016 * 1.73205080756888 ) * cuLower1@[0, 0] ) - ( 0.016 * cuLower2@[0, 0] ) )
				Var tmp474 : Real = ( ( ( ( 0.016 * 1.4142135623731 ) * cuUpper0@[0, -1] ) - ( 0.016 * cuUpper1@[0, -1] ) ) + ( ( 0.016 * 1.73205080756888 ) * cuUpper2@[0, -1] ) )
				Var tmp475 : Real = ( ( ( 0.016 * 1.73205080756888 ) * cuUpper1@[0, -1] ) + ( 0.016 * cuUpper2@[0, -1] ) )
				Var tmp476 : Real = ( ( ( ( 0.016 * 1.4142135623731 ) * cvLower0@[0, 0] ) - ( 0.016 * cvLower1@[0, 0] ) ) + ( ( 0.016 * 1.73205080756888 ) * cvLower2@[0, 0] ) )
				Var tmp477 : Real = ( ( ( -0.016 * 1.73205080756888 ) * cvLower1@[0, 0] ) - ( 0.016 * cvLower2@[0, 0] ) )
				Var tmp478 : Real = ( ( ( ( 0.016 * 1.4142135623731 ) * cvUpper0@[0, -1] ) - ( 0.016 * cvUpper1@[0, -1] ) ) + ( ( 0.016 * 1.73205080756888 ) * cvUpper2@[0, -1] ) )
				Var tmp479 : Real = ( ( ( 0.016 * 1.73205080756888 ) * cvUpper1@[0, -1] ) + ( 0.016 * cvUpper2@[0, -1] ) )
				Var tmp480 : Real = ( ( ( ( 0.016 * 1.4142135623731 ) * cuTildeLower0@[0, 0] ) - ( 0.016 * cuTildeLower1@[0, 0] ) ) + ( ( 0.016 * 1.73205080756888 ) * cuTildeLower2@[0, 0] ) )
				Var tmp481 : Real = ( ( ( -0.016 * 1.73205080756888 ) * cuTildeLower1@[0, 0] ) - ( 0.016 * cuTildeLower2@[0, 0] ) )
				Var tmp482 : Real = ( ( ( ( 0.016 * 1.4142135623731 ) * cuTildeUpper0@[0, -1] ) - ( 0.016 * cuTildeUpper1@[0, -1] ) ) + ( ( 0.016 * 1.73205080756888 ) * cuTildeUpper2@[0, -1] ) )
				Var tmp483 : Real = ( ( ( 0.016 * 1.73205080756888 ) * cuTildeUpper1@[0, -1] ) + ( 0.016 * cuTildeUpper2@[0, -1] ) )
				Var tmp484 : Real = ( ( ( ( 0.016 * 1.4142135623731 ) * cvTildeLower0@[0, 0] ) - ( 0.016 * cvTildeLower1@[0, 0] ) ) + ( ( 0.016 * 1.73205080756888 ) * cvTildeLower2@[0, 0] ) )
				Var tmp485 : Real = ( ( ( -0.016 * 1.73205080756888 ) * cvTildeLower1@[0, 0] ) - ( 0.016 * cvTildeLower2@[0, 0] ) )
				Var tmp486 : Real = ( ( ( ( 0.016 * 1.4142135623731 ) * cvTildeUpper0@[0, -1] ) - ( 0.016 * cvTildeUpper1@[0, -1] ) ) + ( ( 0.016 * 1.73205080756888 ) * cvTildeUpper2@[0, -1] ) )
				Var tmp487 : Real = ( ( ( 0.016 * 1.73205080756888 ) * cvTildeUpper1@[0, -1] ) + ( 0.016 * cvTildeUpper2@[0, -1] ) )
				Var tmp488 : Real = ( ( ( ( 0.016 * 1.4142135623731 ) * cetaLower0@[0, 0] ) - ( 0.016 * cetaLower1@[0, 0] ) ) + ( ( 0.016 * 1.73205080756888 ) * cetaLower2@[0, 0] ) )
				Var tmp489 : Real = ( ( ( -0.016 * 1.73205080756888 ) * cetaLower1@[0, 0] ) - ( 0.016 * cetaLower2@[0, 0] ) )
				Var tmp490 : Real = ( ( ( ( 0.016 * 1.4142135623731 ) * cetaUpper0@[0, -1] ) - ( 0.016 * cetaUpper1@[0, -1] ) ) + ( ( 0.016 * 1.73205080756888 ) * cetaUpper2@[0, -1] ) )
				Var tmp491 : Real = ( ( ( 0.016 * 1.73205080756888 ) * cetaUpper1@[0, -1] ) + ( 0.016 * cetaUpper2@[0, -1] ) )
				Var tmp492 : Real = ( ( ( ( 0.016 * 1.4142135623731 ) * cuLower0@[0, 0] ) - ( 0.016 * cuLower1@[0, 0] ) ) + ( ( 0.016 * 1.73205080756888 ) * cuLower2@[0, 0] ) )
				Var tmp493 : Real = ( ( ( -0.016 * 1.73205080756888 ) * cuLower1@[0, 0] ) - ( 0.016 * cuLower2@[0, 0] ) )
				Var tmp494 : Real = ( ( ( ( 0.016 * 1.4142135623731 ) * cuUpper0@[0, -1] ) - ( 0.016 * cuUpper1@[0, -1] ) ) + ( ( 0.016 * 1.73205080756888 ) * cuUpper2@[0, -1] ) )
				Var tmp495 : Real = ( ( ( 0.016 * 1.73205080756888 ) * cuUpper1@[0, -1] ) + ( 0.016 * cuUpper2@[0, -1] ) )
				Var tmp496 : Real = ( ( ( ( 0.016 * 1.4142135623731 ) * cvLower0@[0, 0] ) - ( 0.016 * cvLower1@[0, 0] ) ) + ( ( 0.016 * 1.73205080756888 ) * cvLower2@[0, 0] ) )
				Var tmp497 : Real = ( ( ( -0.016 * 1.73205080756888 ) * cvLower1@[0, 0] ) - ( 0.016 * cvLower2@[0, 0] ) )
				Var tmp498 : Real = ( ( ( ( 0.016 * 1.4142135623731 ) * cvUpper0@[0, -1] ) - ( 0.016 * cvUpper1@[0, -1] ) ) + ( ( 0.016 * 1.73205080756888 ) * cvUpper2@[0, -1] ) )
				Var tmp499 : Real = ( ( ( 0.016 * 1.73205080756888 ) * cvUpper1@[0, -1] ) + ( 0.016 * cvUpper2@[0, -1] ) )
				Var tmp500 : Real = ( ( ( ( 0.016 * 1.4142135623731 ) * cuTildeLower0@[0, 0] ) - ( 0.016 * cuTildeLower1@[0, 0] ) ) + ( ( 0.016 * 1.73205080756888 ) * cuTildeLower2@[0, 0] ) )
				Var tmp501 : Real = ( ( ( -0.016 * 1.73205080756888 ) * cuTildeLower1@[0, 0] ) - ( 0.016 * cuTildeLower2@[0, 0] ) )
				Var tmp502 : Real = ( ( ( ( 0.016 * 1.4142135623731 ) * cuTildeUpper0@[0, -1] ) - ( 0.016 * cuTildeUpper1@[0, -1] ) ) + ( ( 0.016 * 1.73205080756888 ) * cuTildeUpper2@[0, -1] ) )
				Var tmp503 : Real = ( ( ( 0.016 * 1.73205080756888 ) * cuTildeUpper1@[0, -1] ) + ( 0.016 * cuTildeUpper2@[0, -1] ) )
				Var tmp504 : Real = ( ( ( ( 0.016 * 1.4142135623731 ) * cvTildeLower0@[0, 0] ) - ( 0.016 * cvTildeLower1@[0, 0] ) ) + ( ( 0.016 * 1.73205080756888 ) * cvTildeLower2@[0, 0] ) )
				Var tmp505 : Real = ( ( ( -0.016 * 1.73205080756888 ) * cvTildeLower1@[0, 0] ) - ( 0.016 * cvTildeLower2@[0, 0] ) )
				Var tmp506 : Real = ( ( ( ( 0.016 * 1.4142135623731 ) * cvTildeUpper0@[0, -1] ) - ( 0.016 * cvTildeUpper1@[0, -1] ) ) + ( ( 0.016 * 1.73205080756888 ) * cvTildeUpper2@[0, -1] ) )
				Var tmp507 : Real = ( ( ( 0.016 * 1.73205080756888 ) * cvTildeUpper1@[0, -1] ) + ( 0.016 * cvTildeUpper2@[0, -1] ) )
				Var lam2 : Real = ( ( sqrt ( g ) * sqrt ( fmax ( 0, fmax ( ( ( ( 0.5 * bath@[0, 0] ) + ( 0.5 * bath@[1, 0] ) ) + tmp488 ), ( ( ( 0.5 * bath@[0, 0] ) + ( 0.5 * bath@[1, 0] ) ) + tmp490 ) ) ) ) ) + fmax ( fabs ( (-tmp504) ), fabs ( (-tmp506) ) ) )
				Var tmp508 : Real = (-tmp476)
				Var tmp509 : Real = (-tmp477)
				Var tmp510 : Real = (-tmp478)
				Var tmp511 : Real = (-tmp479)
				Var tmp512 : Real = ( ( (-tmp472) * tmp484 ) - ( tmp473 * tmp485 ) )
				Var tmp513 : Real = ( ( (-tmp472) * tmp485 ) - ( tmp473 * tmp484 ) )
				Var tmp514 : Real = ( ( (-tmp474) * tmp486 ) - ( tmp475 * tmp487 ) )
				Var tmp515 : Real = ( ( (-tmp474) * tmp487 ) - ( tmp475 * tmp486 ) )
				Var tmp516 : Real = ( ( ( ( ( ( ( ( ( ( -0.5 * bath@[0, 0] ) * g ) * tmp468 ) + ( ( ( ( 0.166666666666667 * 1.73205080756888 ) * bath@[0, 0] ) * g ) * tmp469 ) ) - ( ( ( 0.5 * bath@[1, 0] ) * g ) * tmp468 ) ) - ( ( ( ( 0.166666666666667 * 1.73205080756888 ) * bath@[1, 0] ) * g ) * tmp469 ) ) - ( ( 0.5 * g ) * ( tmp468 * tmp468 ) ) ) - ( ( 0.5 * g ) * ( tmp469 * tmp469 ) ) ) - ( tmp476 * tmp484 ) ) - ( tmp477 * tmp485 ) )
				Var tmp517 : Real = ( ( ( ( ( ( ( ( ( ( 0.166666666666667 * 1.73205080756888 ) * bath@[0, 0] ) * g ) * tmp468 ) - ( ( ( 0.5 * bath@[0, 0] ) * g ) * tmp469 ) ) - ( ( ( ( 0.166666666666667 * 1.73205080756888 ) * bath@[1, 0] ) * g ) * tmp468 ) ) - ( ( ( 0.5 * bath@[1, 0] ) * g ) * tmp469 ) ) - ( ( g * tmp468 ) * tmp469 ) ) - ( tmp476 * tmp485 ) ) - ( tmp477 * tmp484 ) )
				Var tmp518 : Real = ( ( ( ( ( ( ( ( ( ( -0.5 * bath@[0, 0] ) * g ) * tmp470 ) + ( ( ( ( 0.166666666666667 * 1.73205080756888 ) * bath@[0, 0] ) * g ) * tmp471 ) ) - ( ( ( 0.5 * bath@[1, 0] ) * g ) * tmp470 ) ) - ( ( ( ( 0.166666666666667 * 1.73205080756888 ) * bath@[1, 0] ) * g ) * tmp471 ) ) - ( ( 0.5 * g ) * ( tmp470 * tmp470 ) ) ) - ( ( 0.5 * g ) * ( tmp471 * tmp471 ) ) ) - ( tmp478 * tmp486 ) ) - ( tmp479 * tmp487 ) )
				Var tmp519 : Real = ( ( ( ( ( ( ( ( ( ( 0.166666666666667 * 1.73205080756888 ) * bath@[0, 0] ) * g ) * tmp470 ) - ( ( ( 0.5 * bath@[0, 0] ) * g ) * tmp471 ) ) - ( ( ( ( 0.166666666666667 * 1.73205080756888 ) * bath@[1, 0] ) * g ) * tmp470 ) ) - ( ( ( 0.5 * bath@[1, 0] ) * g ) * tmp471 ) ) - ( ( g * tmp470 ) * tmp471 ) ) - ( tmp478 * tmp487 ) ) - ( tmp479 * tmp486 ) )
				cetaEdgeHUpper0 = ( ( ( ( ( ( -31.25 * 1.4142135623731 ) * lam2 ) * tmp468 ) + ( ( ( 31.25 * 1.4142135623731 ) * lam2 ) * tmp470 ) ) - ( ( 31.25 * 1.4142135623731 ) * tmp508 ) ) - ( ( 31.25 * 1.4142135623731 ) * tmp510 ) )
				cetaEdgeHUpper1 = ( ( ( ( ( ( ( ( ( 31.25 * lam2 ) * tmp468 ) - ( ( ( 31.25 * 1.73205080756888 ) * lam2 ) * tmp469 ) ) - ( ( 31.25 * lam2 ) * tmp470 ) ) + ( ( ( 31.25 * 1.73205080756888 ) * lam2 ) * tmp471 ) ) + ( 31.25 * tmp508 ) ) - ( ( 31.25 * 1.73205080756888 ) * tmp509 ) ) + ( 31.25 * tmp510 ) ) - ( ( 31.25 * 1.73205080756888 ) * tmp511 ) )
				cetaEdgeHUpper2 = ( ( ( ( ( ( ( ( ( ( -31.25 * 1.73205080756888 ) * lam2 ) * tmp468 ) - ( ( 31.25 * lam2 ) * tmp469 ) ) + ( ( ( 31.25 * 1.73205080756888 ) * lam2 ) * tmp470 ) ) + ( ( 31.25 * lam2 ) * tmp471 ) ) - ( ( 31.25 * 1.73205080756888 ) * tmp508 ) ) - ( 31.25 * tmp509 ) ) - ( ( 31.25 * 1.73205080756888 ) * tmp510 ) ) - ( 31.25 * tmp511 ) )
				cuEdgeHUpper0 = ( ( ( ( ( ( -31.25 * 1.4142135623731 ) * lam2 ) * tmp472 ) + ( ( ( 31.25 * 1.4142135623731 ) * lam2 ) * tmp474 ) ) - ( ( 31.25 * 1.4142135623731 ) * tmp512 ) ) - ( ( 31.25 * 1.4142135623731 ) * tmp514 ) )
				cuEdgeHUpper1 = ( ( ( ( ( ( ( ( ( 31.25 * lam2 ) * tmp472 ) - ( ( ( 31.25 * 1.73205080756888 ) * lam2 ) * tmp473 ) ) - ( ( 31.25 * lam2 ) * tmp474 ) ) + ( ( ( 31.25 * 1.73205080756888 ) * lam2 ) * tmp475 ) ) + ( 31.25 * tmp512 ) ) - ( ( 31.25 * 1.73205080756888 ) * tmp513 ) ) + ( 31.25 * tmp514 ) ) - ( ( 31.25 * 1.73205080756888 ) * tmp515 ) )
				cuEdgeHUpper2 = ( ( ( ( ( ( ( ( ( ( -31.25 * 1.73205080756888 ) * lam2 ) * tmp472 ) - ( ( 31.25 * lam2 ) * tmp473 ) ) + ( ( ( 31.25 * 1.73205080756888 ) * lam2 ) * tmp474 ) ) + ( ( 31.25 * lam2 ) * tmp475 ) ) - ( ( 31.25 * 1.73205080756888 ) * tmp512 ) ) - ( 31.25 * tmp513 ) ) - ( ( 31.25 * 1.73205080756888 ) * tmp514 ) ) - ( 31.25 * tmp515 ) )
				cvEdgeHUpper0 = ( ( ( ( ( ( -31.25 * 1.4142135623731 ) * lam2 ) * tmp476 ) + ( ( ( 31.25 * 1.4142135623731 ) * lam2 ) * tmp478 ) ) - ( ( 31.25 * 1.4142135623731 ) * tmp516 ) ) - ( ( 31.25 * 1.4142135623731 ) * tmp518 ) )
				cvEdgeHUpper1 = ( ( ( ( ( ( ( ( ( 31.25 * lam2 ) * tmp476 ) - ( ( ( 31.25 * 1.73205080756888 ) * lam2 ) * tmp477 ) ) - ( ( 31.25 * lam2 ) * tmp478 ) ) + ( ( ( 31.25 * 1.73205080756888 ) * lam2 ) * tmp479 ) ) + ( 31.25 * tmp516 ) ) - ( ( 31.25 * 1.73205080756888 ) * tmp517 ) ) + ( 31.25 * tmp518 ) ) - ( ( 31.25 * 1.73205080756888 ) * tmp519 ) )
				cvEdgeHUpper2 = ( ( ( ( ( ( ( ( ( ( -31.25 * 1.73205080756888 ) * lam2 ) * tmp476 ) - ( ( 31.25 * lam2 ) * tmp477 ) ) + ( ( ( 31.25 * 1.73205080756888 ) * lam2 ) * tmp478 ) ) + ( ( 31.25 * lam2 ) * tmp479 ) ) - ( ( 31.25 * 1.73205080756888 ) * tmp516 ) ) - ( 31.25 * tmp517 ) ) - ( ( 31.25 * 1.73205080756888 ) * tmp518 ) ) - ( 31.25 * tmp519 ) )
			}
		} else {
			loop over cetaEdgeHLower0 only dup [0, 1] {
				Var tmp520 : Real = ( ( ( 0.016 * 1.4142135623731 ) * cetaLower0@[0, 0] ) + ( 0.032 * cetaLower1@[0, 0] ) )
				Var tmp521 : Real = ( 0.032 * cetaLower2@[0, 0] )
				Var tmp522 : Real = ( ( ( ( 0.016 * 1.4142135623731 ) * cetaUpper0@[0, -1] ) - ( 0.016 * cetaUpper1@[0, -1] ) ) + ( ( 0.016 * 1.73205080756888 ) * cetaUpper2@[0, -1] ) )
				Var tmp523 : Real = ( ( ( 0.016 * 1.73205080756888 ) * cetaUpper1@[0, -1] ) + ( 0.016 * cetaUpper2@[0, -1] ) )
				Var tmp524 : Real = ( ( ( 0.016 * 1.4142135623731 ) * cuLower0@[0, 0] ) + ( 0.032 * cuLower1@[0, 0] ) )
				Var tmp525 : Real = ( 0.032 * cuLower2@[0, 0] )
				Var tmp526 : Real = ( ( ( ( 0.016 * 1.4142135623731 ) * cuUpper0@[0, -1] ) - ( 0.016 * cuUpper1@[0, -1] ) ) + ( ( 0.016 * 1.73205080756888 ) * cuUpper2@[0, -1] ) )
				Var tmp527 : Real = ( ( ( 0.016 * 1.73205080756888 ) * cuUpper1@[0, -1] ) + ( 0.016 * cuUpper2@[0, -1] ) )
				Var tmp528 : Real = ( ( ( 0.016 * 1.4142135623731 ) * cvLower0@[0, 0] ) + ( 0.032 * cvLower1@[0, 0] ) )
				Var tmp529 : Real = ( 0.032 * cvLower2@[0, 0] )
				Var tmp530 : Real = ( ( ( ( 0.016 * 1.4142135623731 ) * cvUpper0@[0, -1] ) - ( 0.016 * cvUpper1@[0, -1] ) ) + ( ( 0.016 * 1.73205080756888 ) * cvUpper2@[0, -1] ) )
				Var tmp531 : Real = ( ( ( 0.016 * 1.73205080756888 ) * cvUpper1@[0, -1] ) + ( 0.016 * cvUpper2@[0, -1] ) )
				Var tmp532 : Real = ( ( ( 0.016 * 1.4142135623731 ) * cuTildeLower0@[0, 0] ) + ( 0.032 * cuTildeLower1@[0, 0] ) )
				Var tmp533 : Real = ( 0.032 * cuTildeLower2@[0, 0] )
				Var tmp534 : Real = ( ( ( ( 0.016 * 1.4142135623731 ) * cuTildeUpper0@[0, -1] ) - ( 0.016 * cuTildeUpper1@[0, -1] ) ) + ( ( 0.016 * 1.73205080756888 ) * cuTildeUpper2@[0, -1] ) )
				Var tmp535 : Real = ( ( ( 0.016 * 1.73205080756888 ) * cuTildeUpper1@[0, -1] ) + ( 0.016 * cuTildeUpper2@[0, -1] ) )
				Var tmp536 : Real = ( ( ( 0.016 * 1.4142135623731 ) * cvTildeLower0@[0, 0] ) + ( 0.032 * cvTildeLower1@[0, 0] ) )
				Var tmp537 : Real = ( 0.032 * cvTildeLower2@[0, 0] )
				Var tmp538 : Real = ( ( ( ( 0.016 * 1.4142135623731 ) * cvTildeUpper0@[0, -1] ) - ( 0.016 * cvTildeUpper1@[0, -1] ) ) + ( ( 0.016 * 1.73205080756888 ) * cvTildeUpper2@[0, -1] ) )
				Var tmp539 : Real = ( ( ( 0.016 * 1.73205080756888 ) * cvTildeUpper1@[0, -1] ) + ( 0.016 * cvTildeUpper2@[0, -1] ) )
				Var tmp540 : Real = ( ( ( 0.016 * 1.4142135623731 ) * cetaLower0@[0, 0] ) + ( 0.032 * cetaLower1@[0, 0] ) )
				Var tmp541 : Real = ( 0.032 * cetaLower2@[0, 0] )
				Var tmp542 : Real = ( ( ( ( 0.016 * 1.4142135623731 ) * cetaUpper0@[0, -1] ) - ( 0.016 * cetaUpper1@[0, -1] ) ) + ( ( 0.016 * 1.73205080756888 ) * cetaUpper2@[0, -1] ) )
				Var tmp543 : Real = ( ( ( 0.016 * 1.73205080756888 ) * cetaUpper1@[0, -1] ) + ( 0.016 * cetaUpper2@[0, -1] ) )
				Var tmp544 : Real = ( ( ( 0.016 * 1.4142135623731 ) * cuLower0@[0, 0] ) + ( 0.032 * cuLower1@[0, 0] ) )
				Var tmp545 : Real = ( 0.032 * cuLower2@[0, 0] )
				Var tmp546 : Real = ( ( ( ( 0.016 * 1.4142135623731 ) * cuUpper0@[0, -1] ) - ( 0.016 * cuUpper1@[0, -1] ) ) + ( ( 0.016 * 1.73205080756888 ) * cuUpper2@[0, -1] ) )
				Var tmp547 : Real = ( ( ( 0.016 * 1.73205080756888 ) * cuUpper1@[0, -1] ) + ( 0.016 * cuUpper2@[0, -1] ) )
				Var tmp548 : Real = ( ( ( 0.016 * 1.4142135623731 ) * cvLower0@[0, 0] ) + ( 0.032 * cvLower1@[0, 0] ) )
				Var tmp549 : Real = ( 0.032 * cvLower2@[0, 0] )
				Var tmp550 : Real = ( ( ( ( 0.016 * 1.4142135623731 ) * cvUpper0@[0, -1] ) - ( 0.016 * cvUpper1@[0, -1] ) ) + ( ( 0.016 * 1.73205080756888 ) * cvUpper2@[0, -1] ) )
				Var tmp551 : Real = ( ( ( 0.016 * 1.73205080756888 ) * cvUpper1@[0, -1] ) + ( 0.016 * cvUpper2@[0, -1] ) )
				Var tmp552 : Real = ( ( ( 0.016 * 1.4142135623731 ) * cuTildeLower0@[0, 0] ) + ( 0.032 * cuTildeLower1@[0, 0] ) )
				Var tmp553 : Real = ( 0.032 * cuTildeLower2@[0, 0] )
				Var tmp554 : Real = ( ( ( ( 0.016 * 1.4142135623731 ) * cuTildeUpper0@[0, -1] ) - ( 0.016 * cuTildeUpper1@[0, -1] ) ) + ( ( 0.016 * 1.73205080756888 ) * cuTildeUpper2@[0, -1] ) )
				Var tmp555 : Real = ( ( ( 0.016 * 1.73205080756888 ) * cuTildeUpper1@[0, -1] ) + ( 0.016 * cuTildeUpper2@[0, -1] ) )
				Var tmp556 : Real = ( ( ( 0.016 * 1.4142135623731 ) * cvTildeLower0@[0, 0] ) + ( 0.032 * cvTildeLower1@[0, 0] ) )
				Var tmp557 : Real = ( 0.032 * cvTildeLower2@[0, 0] )
				Var tmp558 : Real = ( ( ( ( 0.016 * 1.4142135623731 ) * cvTildeUpper0@[0, -1] ) - ( 0.016 * cvTildeUpper1@[0, -1] ) ) + ( ( 0.016 * 1.73205080756888 ) * cvTildeUpper2@[0, -1] ) )
				Var tmp559 : Real = ( ( ( 0.016 * 1.73205080756888 ) * cvTildeUpper1@[0, -1] ) + ( 0.016 * cvTildeUpper2@[0, -1] ) )
				Var lam2 : Real = ( ( sqrt ( g ) * sqrt ( fmax ( 0, fmax ( ( ( ( 0.5 * bath@[0, 0] ) + ( 0.5 * bath@[1, 0] ) ) + tmp540 ), ( ( ( 0.5 * bath@[0, 0] ) + ( 0.5 * bath@[1, 0] ) ) + tmp542 ) ) ) ) ) + fmax ( fabs ( (-tmp556) ), fabs ( (-tmp558) ) ) )
				Var tmp560 : Real = (-tmp528)
				Var tmp561 : Real = (-tmp529)
				Var tmp562 : Real = (-tmp530)
				Var tmp563 : Real = (-tmp531)
				Var tmp564 : Real = ( ( (-tmp524) * tmp536 ) - ( tmp525 * tmp537 ) )
				Var tmp565 : Real = ( ( (-tmp524) * tmp537 ) - ( tmp525 * tmp536 ) )
				Var tmp566 : Real = ( ( (-tmp526) * tmp538 ) - ( tmp527 * tmp539 ) )
				Var tmp567 : Real = ( ( (-tmp526) * tmp539 ) - ( tmp527 * tmp538 ) )
				Var tmp568 : Real = ( ( ( ( ( ( ( ( ( ( -0.5 * bath@[0, 0] ) * g ) * tmp520 ) + ( ( ( ( 0.166666666666667 * 1.73205080756888 ) * bath@[0, 0] ) * g ) * tmp521 ) ) - ( ( ( 0.5 * bath@[1, 0] ) * g ) * tmp520 ) ) - ( ( ( ( 0.166666666666667 * 1.73205080756888 ) * bath@[1, 0] ) * g ) * tmp521 ) ) - ( ( 0.5 * g ) * ( tmp520 * tmp520 ) ) ) - ( ( 0.5 * g ) * ( tmp521 * tmp521 ) ) ) - ( tmp528 * tmp536 ) ) - ( tmp529 * tmp537 ) )
				Var tmp569 : Real = ( ( ( ( ( ( ( ( ( ( 0.166666666666667 * 1.73205080756888 ) * bath@[0, 0] ) * g ) * tmp520 ) - ( ( ( 0.5 * bath@[0, 0] ) * g ) * tmp521 ) ) - ( ( ( ( 0.166666666666667 * 1.73205080756888 ) * bath@[1, 0] ) * g ) * tmp520 ) ) - ( ( ( 0.5 * bath@[1, 0] ) * g ) * tmp521 ) ) - ( ( g * tmp520 ) * tmp521 ) ) - ( tmp528 * tmp537 ) ) - ( tmp529 * tmp536 ) )
				Var tmp570 : Real = ( ( ( ( ( ( ( ( ( ( -0.5 * bath@[0, 0] ) * g ) * tmp522 ) + ( ( ( ( 0.166666666666667 * 1.73205080756888 ) * bath@[0, 0] ) * g ) * tmp523 ) ) - ( ( ( 0.5 * bath@[1, 0] ) * g ) * tmp522 ) ) - ( ( ( ( 0.166666666666667 * 1.73205080756888 ) * bath@[1, 0] ) * g ) * tmp523 ) ) - ( ( 0.5 * g ) * ( tmp522 * tmp522 ) ) ) - ( ( 0.5 * g ) * ( tmp523 * tmp523 ) ) ) - ( tmp530 * tmp538 ) ) - ( tmp531 * tmp539 ) )
				Var tmp571 : Real = ( ( ( ( ( ( ( ( ( ( 0.166666666666667 * 1.73205080756888 ) * bath@[0, 0] ) * g ) * tmp522 ) - ( ( ( 0.5 * bath@[0, 0] ) * g ) * tmp523 ) ) - ( ( ( ( 0.166666666666667 * 1.73205080756888 ) * bath@[1, 0] ) * g ) * tmp522 ) ) - ( ( ( 0.5 * bath@[1, 0] ) * g ) * tmp523 ) ) - ( ( g * tmp522 ) * tmp523 ) ) - ( tmp530 * tmp539 ) ) - ( tmp531 * tmp538 ) )
				cetaEdgeHUpper0 = ( ( ( ( ( ( -31.25 * 1.4142135623731 ) * lam2 ) * tmp520 ) + ( ( ( 31.25 * 1.4142135623731 ) * lam2 ) * tmp522 ) ) - ( ( 31.25 * 1.4142135623731 ) * tmp560 ) ) - ( ( 31.25 * 1.4142135623731 ) * tmp562 ) )
				cetaEdgeHUpper1 = ( ( ( ( ( ( ( ( ( 31.25 * lam2 ) * tmp520 ) - ( ( ( 31.25 * 1.73205080756888 ) * lam2 ) * tmp521 ) ) - ( ( 31.25 * lam2 ) * tmp522 ) ) + ( ( ( 31.25 * 1.73205080756888 ) * lam2 ) * tmp523 ) ) + ( 31.25 * tmp560 ) ) - ( ( 31.25 * 1.73205080756888 ) * tmp561 ) ) + ( 31.25 * tmp562 ) ) - ( ( 31.25 * 1.73205080756888 ) * tmp563 ) )
				cetaEdgeHUpper2 = ( ( ( ( ( ( ( ( ( ( -31.25 * 1.73205080756888 ) * lam2 ) * tmp520 ) - ( ( 31.25 * lam2 ) * tmp521 ) ) + ( ( ( 31.25 * 1.73205080756888 ) * lam2 ) * tmp522 ) ) + ( ( 31.25 * lam2 ) * tmp523 ) ) - ( ( 31.25 * 1.73205080756888 ) * tmp560 ) ) - ( 31.25 * tmp561 ) ) - ( ( 31.25 * 1.73205080756888 ) * tmp562 ) ) - ( 31.25 * tmp563 ) )
				cuEdgeHUpper0 = ( ( ( ( ( ( -31.25 * 1.4142135623731 ) * lam2 ) * tmp524 ) + ( ( ( 31.25 * 1.4142135623731 ) * lam2 ) * tmp526 ) ) - ( ( 31.25 * 1.4142135623731 ) * tmp564 ) ) - ( ( 31.25 * 1.4142135623731 ) * tmp566 ) )
				cuEdgeHUpper1 = ( ( ( ( ( ( ( ( ( 31.25 * lam2 ) * tmp524 ) - ( ( ( 31.25 * 1.73205080756888 ) * lam2 ) * tmp525 ) ) - ( ( 31.25 * lam2 ) * tmp526 ) ) + ( ( ( 31.25 * 1.73205080756888 ) * lam2 ) * tmp527 ) ) + ( 31.25 * tmp564 ) ) - ( ( 31.25 * 1.73205080756888 ) * tmp565 ) ) + ( 31.25 * tmp566 ) ) - ( ( 31.25 * 1.73205080756888 ) * tmp567 ) )
				cuEdgeHUpper2 = ( ( ( ( ( ( ( ( ( ( -31.25 * 1.73205080756888 ) * lam2 ) * tmp524 ) - ( ( 31.25 * lam2 ) * tmp525 ) ) + ( ( ( 31.25 * 1.73205080756888 ) * lam2 ) * tmp526 ) ) + ( ( 31.25 * lam2 ) * tmp527 ) ) - ( ( 31.25 * 1.73205080756888 ) * tmp564 ) ) - ( 31.25 * tmp565 ) ) - ( ( 31.25 * 1.73205080756888 ) * tmp566 ) ) - ( 31.25 * tmp567 ) )
				cvEdgeHUpper0 = ( ( ( ( ( ( -31.25 * 1.4142135623731 ) * lam2 ) * tmp528 ) + ( ( ( 31.25 * 1.4142135623731 ) * lam2 ) * tmp530 ) ) - ( ( 31.25 * 1.4142135623731 ) * tmp568 ) ) - ( ( 31.25 * 1.4142135623731 ) * tmp570 ) )
				cvEdgeHUpper1 = ( ( ( ( ( ( ( ( ( 31.25 * lam2 ) * tmp528 ) - ( ( ( 31.25 * 1.73205080756888 ) * lam2 ) * tmp529 ) ) - ( ( 31.25 * lam2 ) * tmp530 ) ) + ( ( ( 31.25 * 1.73205080756888 ) * lam2 ) * tmp531 ) ) + ( 31.25 * tmp568 ) ) - ( ( 31.25 * 1.73205080756888 ) * tmp569 ) ) + ( 31.25 * tmp570 ) ) - ( ( 31.25 * 1.73205080756888 ) * tmp571 ) )
				cvEdgeHUpper2 = ( ( ( ( ( ( ( ( ( ( -31.25 * 1.73205080756888 ) * lam2 ) * tmp528 ) - ( ( 31.25 * lam2 ) * tmp529 ) ) + ( ( ( 31.25 * 1.73205080756888 ) * lam2 ) * tmp530 ) ) + ( ( 31.25 * lam2 ) * tmp531 ) ) - ( ( 31.25 * 1.73205080756888 ) * tmp568 ) ) - ( 31.25 * tmp569 ) ) - ( ( 31.25 * 1.73205080756888 ) * tmp570 ) ) - ( 31.25 * tmp571 ) )
			}
		}
		loop over cetaNewLower0 {
			cetaNewLower0 = ( ( ( -0.016 * cetaEdgeDLower0@[0, 0] ) - ( 0.016 * cetaEdgeHLower0@[0, 0] ) ) - ( 0.016 * cetaEdgeVLower0@[0, 0] ) )
			cuNewLower0 = ( ( ( ( ( ( -0.016 * cuEdgeDLower0@[0, 0] ) - ( 0.016 * cuEdgeHLower0@[0, 0] ) ) - ( 0.016 * cuEdgeVLower0@[0, 0] ) ) + ( ( 10.4166666666667 * 1.4142135623731 ) * ( ( ( ( ( 0.001 * g ) * ( ( ( 0.016 * 1.4142135623731 ) * cetaLower0@[0, 0] ) - ( 0.064 * cetaLower1@[0, 0] ) ) ) - ( ( ( ( 6.66666666666667E-4 * M_PI ) * g ) * ( ( ( ( 0.001 * vf_nodePosition_0@[1, 0] ) + ( 0.002 * vf_nodePosition_1@[1, 0] ) ) - ( 0.4 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 0] ) ) ) ) ) ) + 17.3 ) ) * cos ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 0] ) ) ) ) ) ) + ( ( 1.33333333333333E-5 * M_PI ) * cos ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 0] ) ) ) ) ) ) + ( ( ( ( ( (-( ( ( -6.66666666666667E-4 * M_PI ) * cos ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 0] ) ) ) ) ) + 0.001 )) * ( ( ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 0] ) ) ) ) ) + 0.6 ) * ( ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 0] ) ) ) ) ) + 0.6 ) ) ) - ( ( ( ( ( -6.66666666666667E-4 * M_PI ) * cos ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 0] ) ) ) ) ) + 0.002 ) * ( ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 0] ) ) ) ) ) + 0.3 ) ) * ( ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 0] ) ) ) ) ) + 0.6 ) ) ) + ( ( ( ( ( 6.66666666666667E-5 * M_PI ) * ( ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 0] ) ) ) ) ) + 0.3 ) ) * cos ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 0] ) ) ) ) ) + ( ( ( 6.66666666666667E-5 * M_PI ) * ( ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 0] ) ) ) ) ) + 0.6 ) ) * cos ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 0] ) ) ) ) ) ) * ( ( ( ( 0.001 * vf_nodePosition_0@[1, 0] ) + ( 0.002 * vf_nodePosition_1@[1, 0] ) ) - ( 0.4 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 0] ) ) ) ) ) ) + 17.3 ) ) ) + ( ( ( ( 6.66666666666667E-5 * M_PI ) * ( ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 0] ) ) ) ) ) + 0.6 ) ) * ( ( ( ( 0.002 * vf_nodePosition_0@[1, 0] ) + ( 0.004 * vf_nodePosition_1@[1, 0] ) ) - ( 0.8 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 0] ) ) ) ) ) ) + 34.6 ) ) * cos ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 0] ) ) ) ) ) ) / ( ( ( ( ( 0.001 * vf_nodePosition_0@[1, 0] ) + ( 0.002 * vf_nodePosition_1@[1, 0] ) ) - ( 0.4 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 0] ) ) ) ) ) ) + 17.3 ) * ( ( ( ( 0.001 * vf_nodePosition_0@[1, 0] ) + ( 0.002 * vf_nodePosition_1@[1, 0] ) ) - ( 0.4 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 0] ) ) ) ) ) ) + 17.3 ) ) ) ) ) ) + ( ( 10.4166666666667 * 1.4142135623731 ) * ( ( ( ( ( 0.001 * g ) * ( ( ( ( 0.016 * 1.4142135623731 ) * cetaLower0@[0, 0] ) + ( 0.032 * cetaLower1@[0, 0] ) ) - ( ( 0.032 * 1.73205080756888 ) * cetaLower2@[0, 0] ) ) ) - ( ( ( ( 6.66666666666667E-4 * M_PI ) * g ) * ( ( ( ( 0.001 * vf_nodePosition_0@[0, 1] ) + ( 0.002 * vf_nodePosition_1@[0, 1] ) ) - ( 0.4 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 1] ) ) ) ) ) ) + 17.3 ) ) * cos ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 1] ) ) ) ) ) ) + ( ( 1.33333333333333E-5 * M_PI ) * cos ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 1] ) ) ) ) ) ) + ( ( ( ( ( (-( ( ( -6.66666666666667E-4 * M_PI ) * cos ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 1] ) ) ) ) ) + 0.001 )) * ( ( ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 1] ) ) ) ) ) + 0.6 ) * ( ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 1] ) ) ) ) ) + 0.6 ) ) ) - ( ( ( ( ( -6.66666666666667E-4 * M_PI ) * cos ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 1] ) ) ) ) ) + 0.002 ) * ( ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 1] ) ) ) ) ) + 0.3 ) ) * ( ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 1] ) ) ) ) ) + 0.6 ) ) ) + ( ( ( ( ( 6.66666666666667E-5 * M_PI ) * ( ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 1] ) ) ) ) ) + 0.3 ) ) * cos ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 1] ) ) ) ) ) + ( ( ( 6.66666666666667E-5 * M_PI ) * ( ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 1] ) ) ) ) ) + 0.6 ) ) * cos ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 1] ) ) ) ) ) ) * ( ( ( ( 0.001 * vf_nodePosition_0@[0, 1] ) + ( 0.002 * vf_nodePosition_1@[0, 1] ) ) - ( 0.4 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 1] ) ) ) ) ) ) + 17.3 ) ) ) + ( ( ( ( 6.66666666666667E-5 * M_PI ) * ( ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 1] ) ) ) ) ) + 0.6 ) ) * ( ( ( ( 0.002 * vf_nodePosition_0@[0, 1] ) + ( 0.004 * vf_nodePosition_1@[0, 1] ) ) - ( 0.8 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 1] ) ) ) ) ) ) + 34.6 ) ) * cos ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 1] ) ) ) ) ) ) / ( ( ( ( ( 0.001 * vf_nodePosition_0@[0, 1] ) + ( 0.002 * vf_nodePosition_1@[0, 1] ) ) - ( 0.4 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 1] ) ) ) ) ) ) + 17.3 ) * ( ( ( ( 0.001 * vf_nodePosition_0@[0, 1] ) + ( 0.002 * vf_nodePosition_1@[0, 1] ) ) - ( 0.4 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 1] ) ) ) ) ) ) + 17.3 ) ) ) ) ) ) + ( ( 10.4166666666667 * 1.4142135623731 ) * ( ( ( ( ( 0.001 * g ) * ( ( ( ( 0.016 * 1.4142135623731 ) * cetaLower0@[0, 0] ) + ( 0.032 * cetaLower1@[0, 0] ) ) + ( ( 0.032 * 1.73205080756888 ) * cetaLower2@[0, 0] ) ) ) - ( ( ( ( 6.66666666666667E-4 * M_PI ) * g ) * ( ( ( ( 0.001 * vf_nodePosition_0@[0, 0] ) + ( 0.002 * vf_nodePosition_1@[0, 0] ) ) - ( 0.4 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 0] ) ) ) ) ) ) + 17.3 ) ) * cos ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 0] ) ) ) ) ) ) + ( ( 1.33333333333333E-5 * M_PI ) * cos ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 0] ) ) ) ) ) ) + ( ( ( ( ( (-( ( ( -6.66666666666667E-4 * M_PI ) * cos ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 0] ) ) ) ) ) + 0.001 )) * ( ( ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 0] ) ) ) ) ) + 0.6 ) * ( ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 0] ) ) ) ) ) + 0.6 ) ) ) - ( ( ( ( ( -6.66666666666667E-4 * M_PI ) * cos ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 0] ) ) ) ) ) + 0.002 ) * ( ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 0] ) ) ) ) ) + 0.3 ) ) * ( ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 0] ) ) ) ) ) + 0.6 ) ) ) + ( ( ( ( ( 6.66666666666667E-5 * M_PI ) * ( ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 0] ) ) ) ) ) + 0.3 ) ) * cos ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 0] ) ) ) ) ) + ( ( ( 6.66666666666667E-5 * M_PI ) * ( ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 0] ) ) ) ) ) + 0.6 ) ) * cos ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 0] ) ) ) ) ) ) * ( ( ( ( 0.001 * vf_nodePosition_0@[0, 0] ) + ( 0.002 * vf_nodePosition_1@[0, 0] ) ) - ( 0.4 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 0] ) ) ) ) ) ) + 17.3 ) ) ) + ( ( ( ( 6.66666666666667E-5 * M_PI ) * ( ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 0] ) ) ) ) ) + 0.6 ) ) * ( ( ( ( 0.002 * vf_nodePosition_0@[0, 0] ) + ( 0.004 * vf_nodePosition_1@[0, 0] ) ) - ( 0.8 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 0] ) ) ) ) ) ) + 34.6 ) ) * cos ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 0] ) ) ) ) ) ) / ( ( ( ( ( 0.001 * vf_nodePosition_0@[0, 0] ) + ( 0.002 * vf_nodePosition_1@[0, 0] ) ) - ( 0.4 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 0] ) ) ) ) ) ) + 17.3 ) * ( ( ( ( 0.001 * vf_nodePosition_0@[0, 0] ) + ( 0.002 * vf_nodePosition_1@[0, 0] ) ) - ( 0.4 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 0] ) ) ) ) ) ) + 17.3 ) ) ) ) ) )
			cvNewLower0 = ( ( ( ( ( ( -0.016 * cvEdgeDLower0@[0, 0] ) - ( 0.016 * cvEdgeHLower0@[0, 0] ) ) - ( 0.016 * cvEdgeVLower0@[0, 0] ) ) + ( ( 10.4166666666667 * 1.4142135623731 ) * ( ( ( ( ( 0.002 * g ) * ( ( ( 0.016 * 1.4142135623731 ) * cetaLower0@[0, 0] ) - ( 0.064 * cetaLower1@[0, 0] ) ) ) - ( ( ( ( 6.66666666666667E-4 * M_PI ) * g ) * ( ( ( ( 0.001 * vf_nodePosition_0@[1, 0] ) + ( 0.002 * vf_nodePosition_1@[1, 0] ) ) - ( 0.4 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 0] ) ) ) ) ) ) + 17.3 ) ) * cos ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 0] ) ) ) ) ) ) + ( ( 1.33333333333333E-5 * M_PI ) * cos ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 0] ) ) ) ) ) ) + ( ( ( ( ( ( (-( ( ( -6.66666666666667E-4 * M_PI ) * cos ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 0] ) ) ) ) ) + 0.001 )) * ( ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 0] ) ) ) ) ) + 0.3 ) ) * ( ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 0] ) ) ) ) ) + 0.6 ) ) - ( ( ( ( -6.66666666666667E-4 * M_PI ) * cos ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 0] ) ) ) ) ) + 0.002 ) * ( ( ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 0] ) ) ) ) ) + 0.3 ) * ( ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 0] ) ) ) ) ) + 0.3 ) ) ) ) + ( ( ( ( ( 6.66666666666667E-5 * M_PI ) * ( ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 0] ) ) ) ) ) + 0.3 ) ) * cos ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 0] ) ) ) ) ) + ( ( ( 6.66666666666667E-5 * M_PI ) * ( ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 0] ) ) ) ) ) + 0.6 ) ) * cos ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 0] ) ) ) ) ) ) * ( ( ( ( 0.001 * vf_nodePosition_0@[1, 0] ) + ( 0.002 * vf_nodePosition_1@[1, 0] ) ) - ( 0.4 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 0] ) ) ) ) ) ) + 17.3 ) ) ) + ( ( ( ( 6.66666666666667E-5 * M_PI ) * ( ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 0] ) ) ) ) ) + 0.3 ) ) * ( ( ( ( 0.002 * vf_nodePosition_0@[1, 0] ) + ( 0.004 * vf_nodePosition_1@[1, 0] ) ) - ( 0.8 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 0] ) ) ) ) ) ) + 34.6 ) ) * cos ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 0] ) ) ) ) ) ) / ( ( ( ( ( 0.001 * vf_nodePosition_0@[1, 0] ) + ( 0.002 * vf_nodePosition_1@[1, 0] ) ) - ( 0.4 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 0] ) ) ) ) ) ) + 17.3 ) * ( ( ( ( 0.001 * vf_nodePosition_0@[1, 0] ) + ( 0.002 * vf_nodePosition_1@[1, 0] ) ) - ( 0.4 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 0] ) ) ) ) ) ) + 17.3 ) ) ) ) ) ) + ( ( 10.4166666666667 * 1.4142135623731 ) * ( ( ( ( ( 0.002 * g ) * ( ( ( ( 0.016 * 1.4142135623731 ) * cetaLower0@[0, 0] ) + ( 0.032 * cetaLower1@[0, 0] ) ) - ( ( 0.032 * 1.73205080756888 ) * cetaLower2@[0, 0] ) ) ) - ( ( ( ( 6.66666666666667E-4 * M_PI ) * g ) * ( ( ( ( 0.001 * vf_nodePosition_0@[0, 1] ) + ( 0.002 * vf_nodePosition_1@[0, 1] ) ) - ( 0.4 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 1] ) ) ) ) ) ) + 17.3 ) ) * cos ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 1] ) ) ) ) ) ) + ( ( 1.33333333333333E-5 * M_PI ) * cos ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 1] ) ) ) ) ) ) + ( ( ( ( ( ( (-( ( ( -6.66666666666667E-4 * M_PI ) * cos ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 1] ) ) ) ) ) + 0.001 )) * ( ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 1] ) ) ) ) ) + 0.3 ) ) * ( ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 1] ) ) ) ) ) + 0.6 ) ) - ( ( ( ( -6.66666666666667E-4 * M_PI ) * cos ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 1] ) ) ) ) ) + 0.002 ) * ( ( ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 1] ) ) ) ) ) + 0.3 ) * ( ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 1] ) ) ) ) ) + 0.3 ) ) ) ) + ( ( ( ( ( 6.66666666666667E-5 * M_PI ) * ( ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 1] ) ) ) ) ) + 0.3 ) ) * cos ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 1] ) ) ) ) ) + ( ( ( 6.66666666666667E-5 * M_PI ) * ( ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 1] ) ) ) ) ) + 0.6 ) ) * cos ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 1] ) ) ) ) ) ) * ( ( ( ( 0.001 * vf_nodePosition_0@[0, 1] ) + ( 0.002 * vf_nodePosition_1@[0, 1] ) ) - ( 0.4 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 1] ) ) ) ) ) ) + 17.3 ) ) ) + ( ( ( ( 6.66666666666667E-5 * M_PI ) * ( ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 1] ) ) ) ) ) + 0.3 ) ) * ( ( ( ( 0.002 * vf_nodePosition_0@[0, 1] ) + ( 0.004 * vf_nodePosition_1@[0, 1] ) ) - ( 0.8 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 1] ) ) ) ) ) ) + 34.6 ) ) * cos ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 1] ) ) ) ) ) ) / ( ( ( ( ( 0.001 * vf_nodePosition_0@[0, 1] ) + ( 0.002 * vf_nodePosition_1@[0, 1] ) ) - ( 0.4 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 1] ) ) ) ) ) ) + 17.3 ) * ( ( ( ( 0.001 * vf_nodePosition_0@[0, 1] ) + ( 0.002 * vf_nodePosition_1@[0, 1] ) ) - ( 0.4 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 1] ) ) ) ) ) ) + 17.3 ) ) ) ) ) ) + ( ( 10.4166666666667 * 1.4142135623731 ) * ( ( ( ( ( 0.002 * g ) * ( ( ( ( 0.016 * 1.4142135623731 ) * cetaLower0@[0, 0] ) + ( 0.032 * cetaLower1@[0, 0] ) ) + ( ( 0.032 * 1.73205080756888 ) * cetaLower2@[0, 0] ) ) ) - ( ( ( ( 6.66666666666667E-4 * M_PI ) * g ) * ( ( ( ( 0.001 * vf_nodePosition_0@[0, 0] ) + ( 0.002 * vf_nodePosition_1@[0, 0] ) ) - ( 0.4 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 0] ) ) ) ) ) ) + 17.3 ) ) * cos ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 0] ) ) ) ) ) ) + ( ( 1.33333333333333E-5 * M_PI ) * cos ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 0] ) ) ) ) ) ) + ( ( ( ( ( ( (-( ( ( -6.66666666666667E-4 * M_PI ) * cos ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 0] ) ) ) ) ) + 0.001 )) * ( ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 0] ) ) ) ) ) + 0.3 ) ) * ( ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 0] ) ) ) ) ) + 0.6 ) ) - ( ( ( ( -6.66666666666667E-4 * M_PI ) * cos ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 0] ) ) ) ) ) + 0.002 ) * ( ( ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 0] ) ) ) ) ) + 0.3 ) * ( ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 0] ) ) ) ) ) + 0.3 ) ) ) ) + ( ( ( ( ( 6.66666666666667E-5 * M_PI ) * ( ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 0] ) ) ) ) ) + 0.3 ) ) * cos ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 0] ) ) ) ) ) + ( ( ( 6.66666666666667E-5 * M_PI ) * ( ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 0] ) ) ) ) ) + 0.6 ) ) * cos ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 0] ) ) ) ) ) ) * ( ( ( ( 0.001 * vf_nodePosition_0@[0, 0] ) + ( 0.002 * vf_nodePosition_1@[0, 0] ) ) - ( 0.4 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 0] ) ) ) ) ) ) + 17.3 ) ) ) + ( ( ( ( 6.66666666666667E-5 * M_PI ) * ( ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 0] ) ) ) ) ) + 0.3 ) ) * ( ( ( ( 0.002 * vf_nodePosition_0@[0, 0] ) + ( 0.004 * vf_nodePosition_1@[0, 0] ) ) - ( 0.8 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 0] ) ) ) ) ) ) + 34.6 ) ) * cos ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 0] ) ) ) ) ) ) / ( ( ( ( ( 0.001 * vf_nodePosition_0@[0, 0] ) + ( 0.002 * vf_nodePosition_1@[0, 0] ) ) - ( 0.4 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 0] ) ) ) ) ) ) + 17.3 ) * ( ( ( ( 0.001 * vf_nodePosition_0@[0, 0] ) + ( 0.002 * vf_nodePosition_1@[0, 0] ) ) - ( 0.4 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 0] ) ) ) ) ) ) + 17.3 ) ) ) ) ) )
			cetaNewLower1 = ( ( ( ( -0.016 * cetaEdgeDLower1@[0, 0] ) - ( 0.016 * cetaEdgeHLower1@[0, 0] ) ) - ( 0.016 * cetaEdgeVLower1@[0, 0] ) ) - ( ( 0.048 * 1.4142135623731 ) * cuLower0@[0, 0] ) )
			cuNewLower1 = ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( -0.016 * 1.4142135623731 ) * bath@[0, 0] ) * cetaLower0@[0, 0] ) * g ) - ( ( ( 0.008 * bath@[0, 0] ) * cetaLower1@[0, 0] ) * g ) ) - ( ( ( ( 0.008 * 1.73205080756888 ) * bath@[0, 0] ) * cetaLower2@[0, 0] ) * g ) ) - ( ( ( ( 0.016 * 1.4142135623731 ) * bath@[0, 1] ) * cetaLower0@[0, 0] ) * g ) ) - ( ( ( 0.008 * bath@[0, 1] ) * cetaLower1@[0, 0] ) * g ) ) + ( ( ( ( 0.008 * 1.73205080756888 ) * bath@[0, 1] ) * cetaLower2@[0, 0] ) * g ) ) - ( ( ( ( 0.016 * 1.4142135623731 ) * bath@[1, 0] ) * cetaLower0@[0, 0] ) * g ) ) + ( ( ( 0.016 * bath@[1, 0] ) * cetaLower1@[0, 0] ) * g ) ) - ( ( 7.68E-4 * ( cetaLower0@[0, 0] * cetaLower0@[0, 0] ) ) * g ) ) - ( ( 7.68E-4 * ( cetaLower1@[0, 0] * cetaLower1@[0, 0] ) ) * g ) ) - ( ( 7.68E-4 * ( cetaLower2@[0, 0] * cetaLower2@[0, 0] ) ) * g ) ) - ( 0.016 * cuEdgeDLower1@[0, 0] ) ) - ( 0.016 * cuEdgeHLower1@[0, 0] ) ) - ( 0.016 * cuEdgeVLower1@[0, 0] ) ) - ( ( 0.001536 * cuLower0@[0, 0] ) * cuTildeLower0@[0, 0] ) ) - ( ( 0.001536 * cuLower1@[0, 0] ) * cuTildeLower1@[0, 0] ) ) - ( ( 0.001536 * cuLower2@[0, 0] ) * cuTildeLower2@[0, 0] ) ) - ( ( 0.0104166666666667 * g ) * ( ( ( 0.016 * 1.4142135623731 ) * cetaLower0@[0, 0] ) - ( 0.064 * cetaLower1@[0, 0] ) ) ) ) + ( ( 0.00520833333333333 * g ) * ( ( ( ( 0.016 * 1.4142135623731 ) * cetaLower0@[0, 0] ) + ( 0.032 * cetaLower1@[0, 0] ) ) - ( ( 0.032 * 1.73205080756888 ) * cetaLower2@[0, 0] ) ) ) ) + ( ( 0.00520833333333333 * g ) * ( ( ( ( 0.016 * 1.4142135623731 ) * cetaLower0@[0, 0] ) + ( 0.032 * cetaLower1@[0, 0] ) ) + ( ( 0.032 * 1.73205080756888 ) * cetaLower2@[0, 0] ) ) ) ) - ( ( ( ( 0.00347222222222222 * M_PI ) * g ) * ( ( ( ( 0.001 * vf_nodePosition_0@[0, 0] ) + ( 0.002 * vf_nodePosition_1@[0, 0] ) ) - ( 0.4 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 0] ) ) ) ) ) ) + 17.3 ) ) * cos ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 0] ) ) ) ) ) ) - ( ( ( ( 0.00347222222222222 * M_PI ) * g ) * ( ( ( ( 0.001 * vf_nodePosition_0@[0, 1] ) + ( 0.002 * vf_nodePosition_1@[0, 1] ) ) - ( 0.4 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 1] ) ) ) ) ) ) + 17.3 ) ) * cos ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 1] ) ) ) ) ) ) + ( ( ( ( 0.00694444444444444 * M_PI ) * g ) * ( ( ( ( 0.001 * vf_nodePosition_0@[1, 0] ) + ( 0.002 * vf_nodePosition_1@[1, 0] ) ) - ( 0.4 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 0] ) ) ) ) ) ) + 17.3 ) ) * cos ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 0] ) ) ) ) ) ) + ( ( 6.94444444444445E-5 * M_PI ) * cos ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 0] ) ) ) ) ) ) + ( ( 6.94444444444445E-5 * M_PI ) * cos ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 1] ) ) ) ) ) ) - ( ( 1.38888888888889E-4 * M_PI ) * cos ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 0] ) ) ) ) ) ) - ( ( 10.4166666666667 * ( ( ( ( (-( ( ( -6.66666666666667E-4 * M_PI ) * cos ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 0] ) ) ) ) ) + 0.001 )) * ( ( ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 0] ) ) ) ) ) + 0.6 ) * ( ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 0] ) ) ) ) ) + 0.6 ) ) ) - ( ( ( ( ( -6.66666666666667E-4 * M_PI ) * cos ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 0] ) ) ) ) ) + 0.002 ) * ( ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 0] ) ) ) ) ) + 0.3 ) ) * ( ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 0] ) ) ) ) ) + 0.6 ) ) ) + ( ( ( ( ( 6.66666666666667E-5 * M_PI ) * ( ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 0] ) ) ) ) ) + 0.3 ) ) * cos ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 0] ) ) ) ) ) + ( ( ( 6.66666666666667E-5 * M_PI ) * ( ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 0] ) ) ) ) ) + 0.6 ) ) * cos ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 0] ) ) ) ) ) ) * ( ( ( ( 0.001 * vf_nodePosition_0@[1, 0] ) + ( 0.002 * vf_nodePosition_1@[1, 0] ) ) - ( 0.4 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 0] ) ) ) ) ) ) + 17.3 ) ) ) + ( ( ( ( 6.66666666666667E-5 * M_PI ) * ( ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 0] ) ) ) ) ) + 0.6 ) ) * ( ( ( ( 0.002 * vf_nodePosition_0@[1, 0] ) + ( 0.004 * vf_nodePosition_1@[1, 0] ) ) - ( 0.8 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 0] ) ) ) ) ) ) + 34.6 ) ) * cos ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 0] ) ) ) ) ) ) ) / ( ( ( ( ( 0.001 * vf_nodePosition_0@[1, 0] ) + ( 0.002 * vf_nodePosition_1@[1, 0] ) ) - ( 0.4 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 0] ) ) ) ) ) ) + 17.3 ) * ( ( ( ( 0.001 * vf_nodePosition_0@[1, 0] ) + ( 0.002 * vf_nodePosition_1@[1, 0] ) ) - ( 0.4 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 0] ) ) ) ) ) ) + 17.3 ) ) ) ) + ( ( 5.20833333333333 * ( ( ( ( (-( ( ( -6.66666666666667E-4 * M_PI ) * cos ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 1] ) ) ) ) ) + 0.001 )) * ( ( ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 1] ) ) ) ) ) + 0.6 ) * ( ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 1] ) ) ) ) ) + 0.6 ) ) ) - ( ( ( ( ( -6.66666666666667E-4 * M_PI ) * cos ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 1] ) ) ) ) ) + 0.002 ) * ( ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 1] ) ) ) ) ) + 0.3 ) ) * ( ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 1] ) ) ) ) ) + 0.6 ) ) ) + ( ( ( ( ( 6.66666666666667E-5 * M_PI ) * ( ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 1] ) ) ) ) ) + 0.3 ) ) * cos ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 1] ) ) ) ) ) + ( ( ( 6.66666666666667E-5 * M_PI ) * ( ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 1] ) ) ) ) ) + 0.6 ) ) * cos ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 1] ) ) ) ) ) ) * ( ( ( ( 0.001 * vf_nodePosition_0@[0, 1] ) + ( 0.002 * vf_nodePosition_1@[0, 1] ) ) - ( 0.4 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 1] ) ) ) ) ) ) + 17.3 ) ) ) + ( ( ( ( 6.66666666666667E-5 * M_PI ) * ( ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 1] ) ) ) ) ) + 0.6 ) ) * ( ( ( ( 0.002 * vf_nodePosition_0@[0, 1] ) + ( 0.004 * vf_nodePosition_1@[0, 1] ) ) - ( 0.8 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 1] ) ) ) ) ) ) + 34.6 ) ) * cos ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 1] ) ) ) ) ) ) ) / ( ( ( ( ( 0.001 * vf_nodePosition_0@[0, 1] ) + ( 0.002 * vf_nodePosition_1@[0, 1] ) ) - ( 0.4 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 1] ) ) ) ) ) ) + 17.3 ) * ( ( ( ( 0.001 * vf_nodePosition_0@[0, 1] ) + ( 0.002 * vf_nodePosition_1@[0, 1] ) ) - ( 0.4 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 1] ) ) ) ) ) ) + 17.3 ) ) ) ) + ( ( 5.20833333333333 * ( ( ( ( (-( ( ( -6.66666666666667E-4 * M_PI ) * cos ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 0] ) ) ) ) ) + 0.001 )) * ( ( ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 0] ) ) ) ) ) + 0.6 ) * ( ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 0] ) ) ) ) ) + 0.6 ) ) ) - ( ( ( ( ( -6.66666666666667E-4 * M_PI ) * cos ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 0] ) ) ) ) ) + 0.002 ) * ( ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 0] ) ) ) ) ) + 0.3 ) ) * ( ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 0] ) ) ) ) ) + 0.6 ) ) ) + ( ( ( ( ( 6.66666666666667E-5 * M_PI ) * ( ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 0] ) ) ) ) ) + 0.3 ) ) * cos ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 0] ) ) ) ) ) + ( ( ( 6.66666666666667E-5 * M_PI ) * ( ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 0] ) ) ) ) ) + 0.6 ) ) * cos ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 0] ) ) ) ) ) ) * ( ( ( ( 0.001 * vf_nodePosition_0@[0, 0] ) + ( 0.002 * vf_nodePosition_1@[0, 0] ) ) - ( 0.4 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 0] ) ) ) ) ) ) + 17.3 ) ) ) + ( ( ( ( 6.66666666666667E-5 * M_PI ) * ( ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 0] ) ) ) ) ) + 0.6 ) ) * ( ( ( ( 0.002 * vf_nodePosition_0@[0, 0] ) + ( 0.004 * vf_nodePosition_1@[0, 0] ) ) - ( 0.8 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 0] ) ) ) ) ) ) + 34.6 ) ) * cos ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 0] ) ) ) ) ) ) ) / ( ( ( ( ( 0.001 * vf_nodePosition_0@[0, 0] ) + ( 0.002 * vf_nodePosition_1@[0, 0] ) ) - ( 0.4 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 0] ) ) ) ) ) ) + 17.3 ) * ( ( ( ( 0.001 * vf_nodePosition_0@[0, 0] ) + ( 0.002 * vf_nodePosition_1@[0, 0] ) ) - ( 0.4 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 0] ) ) ) ) ) ) + 17.3 ) ) ) )
			cvNewLower1 = ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( -0.001536 * cuTildeLower0@[0, 0] ) * cvLower0@[0, 0] ) - ( ( 0.001536 * cuTildeLower1@[0, 0] ) * cvLower1@[0, 0] ) ) - ( ( 0.001536 * cuTildeLower2@[0, 0] ) * cvLower2@[0, 0] ) ) - ( 0.016 * cvEdgeDLower1@[0, 0] ) ) - ( 0.016 * cvEdgeHLower1@[0, 0] ) ) - ( 0.016 * cvEdgeVLower1@[0, 0] ) ) - ( ( 0.0208333333333333 * g ) * ( ( ( 0.016 * 1.4142135623731 ) * cetaLower0@[0, 0] ) - ( 0.064 * cetaLower1@[0, 0] ) ) ) ) + ( ( 0.0104166666666667 * g ) * ( ( ( ( 0.016 * 1.4142135623731 ) * cetaLower0@[0, 0] ) + ( 0.032 * cetaLower1@[0, 0] ) ) - ( ( 0.032 * 1.73205080756888 ) * cetaLower2@[0, 0] ) ) ) ) + ( ( 0.0104166666666667 * g ) * ( ( ( ( 0.016 * 1.4142135623731 ) * cetaLower0@[0, 0] ) + ( 0.032 * cetaLower1@[0, 0] ) ) + ( ( 0.032 * 1.73205080756888 ) * cetaLower2@[0, 0] ) ) ) ) - ( ( ( ( 0.00347222222222222 * M_PI ) * g ) * ( ( ( ( 0.001 * vf_nodePosition_0@[0, 0] ) + ( 0.002 * vf_nodePosition_1@[0, 0] ) ) - ( 0.4 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 0] ) ) ) ) ) ) + 17.3 ) ) * cos ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 0] ) ) ) ) ) ) - ( ( ( ( 0.00347222222222222 * M_PI ) * g ) * ( ( ( ( 0.001 * vf_nodePosition_0@[0, 1] ) + ( 0.002 * vf_nodePosition_1@[0, 1] ) ) - ( 0.4 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 1] ) ) ) ) ) ) + 17.3 ) ) * cos ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 1] ) ) ) ) ) ) + ( ( ( ( 0.00694444444444444 * M_PI ) * g ) * ( ( ( ( 0.001 * vf_nodePosition_0@[1, 0] ) + ( 0.002 * vf_nodePosition_1@[1, 0] ) ) - ( 0.4 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 0] ) ) ) ) ) ) + 17.3 ) ) * cos ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 0] ) ) ) ) ) ) + ( ( 6.94444444444445E-5 * M_PI ) * cos ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 0] ) ) ) ) ) ) + ( ( 6.94444444444445E-5 * M_PI ) * cos ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 1] ) ) ) ) ) ) - ( ( 1.38888888888889E-4 * M_PI ) * cos ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 0] ) ) ) ) ) ) - ( ( 10.4166666666667 * ( ( ( ( ( (-( ( ( -6.66666666666667E-4 * M_PI ) * cos ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 0] ) ) ) ) ) + 0.001 )) * ( ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 0] ) ) ) ) ) + 0.3 ) ) * ( ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 0] ) ) ) ) ) + 0.6 ) ) - ( ( ( ( -6.66666666666667E-4 * M_PI ) * cos ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 0] ) ) ) ) ) + 0.002 ) * ( ( ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 0] ) ) ) ) ) + 0.3 ) * ( ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 0] ) ) ) ) ) + 0.3 ) ) ) ) + ( ( ( ( ( 6.66666666666667E-5 * M_PI ) * ( ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 0] ) ) ) ) ) + 0.3 ) ) * cos ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 0] ) ) ) ) ) + ( ( ( 6.66666666666667E-5 * M_PI ) * ( ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 0] ) ) ) ) ) + 0.6 ) ) * cos ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 0] ) ) ) ) ) ) * ( ( ( ( 0.001 * vf_nodePosition_0@[1, 0] ) + ( 0.002 * vf_nodePosition_1@[1, 0] ) ) - ( 0.4 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 0] ) ) ) ) ) ) + 17.3 ) ) ) + ( ( ( ( 6.66666666666667E-5 * M_PI ) * ( ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 0] ) ) ) ) ) + 0.3 ) ) * ( ( ( ( 0.002 * vf_nodePosition_0@[1, 0] ) + ( 0.004 * vf_nodePosition_1@[1, 0] ) ) - ( 0.8 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 0] ) ) ) ) ) ) + 34.6 ) ) * cos ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 0] ) ) ) ) ) ) ) / ( ( ( ( ( 0.001 * vf_nodePosition_0@[1, 0] ) + ( 0.002 * vf_nodePosition_1@[1, 0] ) ) - ( 0.4 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 0] ) ) ) ) ) ) + 17.3 ) * ( ( ( ( 0.001 * vf_nodePosition_0@[1, 0] ) + ( 0.002 * vf_nodePosition_1@[1, 0] ) ) - ( 0.4 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 0] ) ) ) ) ) ) + 17.3 ) ) ) ) + ( ( 5.20833333333333 * ( ( ( ( ( (-( ( ( -6.66666666666667E-4 * M_PI ) * cos ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 1] ) ) ) ) ) + 0.001 )) * ( ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 1] ) ) ) ) ) + 0.3 ) ) * ( ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 1] ) ) ) ) ) + 0.6 ) ) - ( ( ( ( -6.66666666666667E-4 * M_PI ) * cos ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 1] ) ) ) ) ) + 0.002 ) * ( ( ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 1] ) ) ) ) ) + 0.3 ) * ( ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 1] ) ) ) ) ) + 0.3 ) ) ) ) + ( ( ( ( ( 6.66666666666667E-5 * M_PI ) * ( ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 1] ) ) ) ) ) + 0.3 ) ) * cos ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 1] ) ) ) ) ) + ( ( ( 6.66666666666667E-5 * M_PI ) * ( ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 1] ) ) ) ) ) + 0.6 ) ) * cos ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 1] ) ) ) ) ) ) * ( ( ( ( 0.001 * vf_nodePosition_0@[0, 1] ) + ( 0.002 * vf_nodePosition_1@[0, 1] ) ) - ( 0.4 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 1] ) ) ) ) ) ) + 17.3 ) ) ) + ( ( ( ( 6.66666666666667E-5 * M_PI ) * ( ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 1] ) ) ) ) ) + 0.3 ) ) * ( ( ( ( 0.002 * vf_nodePosition_0@[0, 1] ) + ( 0.004 * vf_nodePosition_1@[0, 1] ) ) - ( 0.8 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 1] ) ) ) ) ) ) + 34.6 ) ) * cos ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 1] ) ) ) ) ) ) ) / ( ( ( ( ( 0.001 * vf_nodePosition_0@[0, 1] ) + ( 0.002 * vf_nodePosition_1@[0, 1] ) ) - ( 0.4 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 1] ) ) ) ) ) ) + 17.3 ) * ( ( ( ( 0.001 * vf_nodePosition_0@[0, 1] ) + ( 0.002 * vf_nodePosition_1@[0, 1] ) ) - ( 0.4 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 1] ) ) ) ) ) ) + 17.3 ) ) ) ) + ( ( 5.20833333333333 * ( ( ( ( ( (-( ( ( -6.66666666666667E-4 * M_PI ) * cos ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 0] ) ) ) ) ) + 0.001 )) * ( ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 0] ) ) ) ) ) + 0.3 ) ) * ( ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 0] ) ) ) ) ) + 0.6 ) ) - ( ( ( ( -6.66666666666667E-4 * M_PI ) * cos ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 0] ) ) ) ) ) + 0.002 ) * ( ( ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 0] ) ) ) ) ) + 0.3 ) * ( ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 0] ) ) ) ) ) + 0.3 ) ) ) ) + ( ( ( ( ( 6.66666666666667E-5 * M_PI ) * ( ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 0] ) ) ) ) ) + 0.3 ) ) * cos ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 0] ) ) ) ) ) + ( ( ( 6.66666666666667E-5 * M_PI ) * ( ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 0] ) ) ) ) ) + 0.6 ) ) * cos ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 0] ) ) ) ) ) ) * ( ( ( ( 0.001 * vf_nodePosition_0@[0, 0] ) + ( 0.002 * vf_nodePosition_1@[0, 0] ) ) - ( 0.4 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 0] ) ) ) ) ) ) + 17.3 ) ) ) + ( ( ( ( 6.66666666666667E-5 * M_PI ) * ( ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 0] ) ) ) ) ) + 0.3 ) ) * ( ( ( ( 0.002 * vf_nodePosition_0@[0, 0] ) + ( 0.004 * vf_nodePosition_1@[0, 0] ) ) - ( 0.8 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 0] ) ) ) ) ) ) + 34.6 ) ) * cos ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 0] ) ) ) ) ) ) ) / ( ( ( ( ( 0.001 * vf_nodePosition_0@[0, 0] ) + ( 0.002 * vf_nodePosition_1@[0, 0] ) ) - ( 0.4 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 0] ) ) ) ) ) ) + 17.3 ) * ( ( ( ( 0.001 * vf_nodePosition_0@[0, 0] ) + ( 0.002 * vf_nodePosition_1@[0, 0] ) ) - ( 0.4 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 0] ) ) ) ) ) ) + 17.3 ) ) ) )
			cetaNewLower2 = ( ( ( ( ( -0.016 * cetaEdgeDLower2@[0, 0] ) - ( 0.016 * cetaEdgeHLower2@[0, 0] ) ) - ( 0.016 * cetaEdgeVLower2@[0, 0] ) ) - ( ( 0.016 * 2.44948974278318 ) * cuLower0@[0, 0] ) ) - ( ( 0.032 * 2.44948974278318 ) * cvLower0@[0, 0] ) )
			cuNewLower2 = ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( -0.00533333333333333 * 2.44948974278318 ) * bath@[0, 0] ) * cetaLower0@[0, 0] ) * g ) - ( ( ( ( 0.00266666666666667 * 1.73205080756888 ) * bath@[0, 0] ) * cetaLower1@[0, 0] ) * g ) ) - ( ( ( 0.008 * bath@[0, 0] ) * cetaLower2@[0, 0] ) * g ) ) - ( ( ( ( 0.00533333333333333 * 2.44948974278318 ) * bath@[0, 1] ) * cetaLower0@[0, 0] ) * g ) ) - ( ( ( ( 0.00266666666666667 * 1.73205080756888 ) * bath@[0, 1] ) * cetaLower1@[0, 0] ) * g ) ) + ( ( ( 0.008 * bath@[0, 1] ) * cetaLower2@[0, 0] ) * g ) ) - ( ( ( ( 0.00533333333333333 * 2.44948974278318 ) * bath@[1, 0] ) * cetaLower0@[0, 0] ) * g ) ) + ( ( ( ( 0.00533333333333333 * 1.73205080756888 ) * bath@[1, 0] ) * cetaLower1@[0, 0] ) * g ) ) - ( ( ( 2.56E-4 * 1.73205080756888 ) * ( cetaLower0@[0, 0] * cetaLower0@[0, 0] ) ) * g ) ) - ( ( ( 2.56E-4 * 1.73205080756888 ) * ( cetaLower1@[0, 0] * cetaLower1@[0, 0] ) ) * g ) ) - ( ( ( 2.56E-4 * 1.73205080756888 ) * ( cetaLower2@[0, 0] * cetaLower2@[0, 0] ) ) * g ) ) - ( 0.016 * cuEdgeDLower2@[0, 0] ) ) - ( 0.016 * cuEdgeHLower2@[0, 0] ) ) - ( 0.016 * cuEdgeVLower2@[0, 0] ) ) - ( ( ( 5.12E-4 * 1.73205080756888 ) * cuLower0@[0, 0] ) * cuTildeLower0@[0, 0] ) ) - ( ( ( 0.001024 * 1.73205080756888 ) * cuLower0@[0, 0] ) * cvTildeLower0@[0, 0] ) ) - ( ( ( 5.12E-4 * 1.73205080756888 ) * cuLower1@[0, 0] ) * cuTildeLower1@[0, 0] ) ) - ( ( ( 0.001024 * 1.73205080756888 ) * cuLower1@[0, 0] ) * cvTildeLower1@[0, 0] ) ) - ( ( ( 5.12E-4 * 1.73205080756888 ) * cuLower2@[0, 0] ) * cuTildeLower2@[0, 0] ) ) - ( ( ( 0.001024 * 1.73205080756888 ) * cuLower2@[0, 0] ) * cvTildeLower2@[0, 0] ) ) - ( ( 5.20833333333333 * 1.73205080756888 ) * ( ( ( ( ( 0.001 * g ) * ( ( ( ( 0.016 * 1.4142135623731 ) * cetaLower0@[0, 0] ) + ( 0.032 * cetaLower1@[0, 0] ) ) - ( ( 0.032 * 1.73205080756888 ) * cetaLower2@[0, 0] ) ) ) - ( ( ( ( 6.66666666666667E-4 * M_PI ) * g ) * ( ( ( ( 0.001 * vf_nodePosition_0@[0, 1] ) + ( 0.002 * vf_nodePosition_1@[0, 1] ) ) - ( 0.4 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 1] ) ) ) ) ) ) + 17.3 ) ) * cos ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 1] ) ) ) ) ) ) + ( ( 1.33333333333333E-5 * M_PI ) * cos ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 1] ) ) ) ) ) ) + ( ( ( ( ( (-( ( ( -6.66666666666667E-4 * M_PI ) * cos ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 1] ) ) ) ) ) + 0.001 )) * ( ( ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 1] ) ) ) ) ) + 0.6 ) * ( ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 1] ) ) ) ) ) + 0.6 ) ) ) - ( ( ( ( ( -6.66666666666667E-4 * M_PI ) * cos ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 1] ) ) ) ) ) + 0.002 ) * ( ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 1] ) ) ) ) ) + 0.3 ) ) * ( ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 1] ) ) ) ) ) + 0.6 ) ) ) + ( ( ( ( ( 6.66666666666667E-5 * M_PI ) * ( ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 1] ) ) ) ) ) + 0.3 ) ) * cos ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 1] ) ) ) ) ) + ( ( ( 6.66666666666667E-5 * M_PI ) * ( ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 1] ) ) ) ) ) + 0.6 ) ) * cos ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 1] ) ) ) ) ) ) * ( ( ( ( 0.001 * vf_nodePosition_0@[0, 1] ) + ( 0.002 * vf_nodePosition_1@[0, 1] ) ) - ( 0.4 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 1] ) ) ) ) ) ) + 17.3 ) ) ) + ( ( ( ( 6.66666666666667E-5 * M_PI ) * ( ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 1] ) ) ) ) ) + 0.6 ) ) * ( ( ( ( 0.002 * vf_nodePosition_0@[0, 1] ) + ( 0.004 * vf_nodePosition_1@[0, 1] ) ) - ( 0.8 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 1] ) ) ) ) ) ) + 34.6 ) ) * cos ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 1] ) ) ) ) ) ) / ( ( ( ( ( 0.001 * vf_nodePosition_0@[0, 1] ) + ( 0.002 * vf_nodePosition_1@[0, 1] ) ) - ( 0.4 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 1] ) ) ) ) ) ) + 17.3 ) * ( ( ( ( 0.001 * vf_nodePosition_0@[0, 1] ) + ( 0.002 * vf_nodePosition_1@[0, 1] ) ) - ( 0.4 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 1] ) ) ) ) ) ) + 17.3 ) ) ) ) ) ) + ( ( 5.20833333333333 * 1.73205080756888 ) * ( ( ( ( ( 0.001 * g ) * ( ( ( ( 0.016 * 1.4142135623731 ) * cetaLower0@[0, 0] ) + ( 0.032 * cetaLower1@[0, 0] ) ) + ( ( 0.032 * 1.73205080756888 ) * cetaLower2@[0, 0] ) ) ) - ( ( ( ( 6.66666666666667E-4 * M_PI ) * g ) * ( ( ( ( 0.001 * vf_nodePosition_0@[0, 0] ) + ( 0.002 * vf_nodePosition_1@[0, 0] ) ) - ( 0.4 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 0] ) ) ) ) ) ) + 17.3 ) ) * cos ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 0] ) ) ) ) ) ) + ( ( 1.33333333333333E-5 * M_PI ) * cos ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 0] ) ) ) ) ) ) + ( ( ( ( ( (-( ( ( -6.66666666666667E-4 * M_PI ) * cos ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 0] ) ) ) ) ) + 0.001 )) * ( ( ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 0] ) ) ) ) ) + 0.6 ) * ( ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 0] ) ) ) ) ) + 0.6 ) ) ) - ( ( ( ( ( -6.66666666666667E-4 * M_PI ) * cos ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 0] ) ) ) ) ) + 0.002 ) * ( ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 0] ) ) ) ) ) + 0.3 ) ) * ( ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 0] ) ) ) ) ) + 0.6 ) ) ) + ( ( ( ( ( 6.66666666666667E-5 * M_PI ) * ( ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 0] ) ) ) ) ) + 0.3 ) ) * cos ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 0] ) ) ) ) ) + ( ( ( 6.66666666666667E-5 * M_PI ) * ( ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 0] ) ) ) ) ) + 0.6 ) ) * cos ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 0] ) ) ) ) ) ) * ( ( ( ( 0.001 * vf_nodePosition_0@[0, 0] ) + ( 0.002 * vf_nodePosition_1@[0, 0] ) ) - ( 0.4 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 0] ) ) ) ) ) ) + 17.3 ) ) ) + ( ( ( ( 6.66666666666667E-5 * M_PI ) * ( ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 0] ) ) ) ) ) + 0.6 ) ) * ( ( ( ( 0.002 * vf_nodePosition_0@[0, 0] ) + ( 0.004 * vf_nodePosition_1@[0, 0] ) ) - ( 0.8 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 0] ) ) ) ) ) ) + 34.6 ) ) * cos ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 0] ) ) ) ) ) ) / ( ( ( ( ( 0.001 * vf_nodePosition_0@[0, 0] ) + ( 0.002 * vf_nodePosition_1@[0, 0] ) ) - ( 0.4 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 0] ) ) ) ) ) ) + 17.3 ) * ( ( ( ( 0.001 * vf_nodePosition_0@[0, 0] ) + ( 0.002 * vf_nodePosition_1@[0, 0] ) ) - ( 0.4 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 0] ) ) ) ) ) ) + 17.3 ) ) ) ) ) )
			cvNewLower2 = ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( -0.0106666666666667 * 2.44948974278318 ) * bath@[0, 0] ) * cetaLower0@[0, 0] ) * g ) - ( ( ( ( 0.00533333333333333 * 1.73205080756888 ) * bath@[0, 0] ) * cetaLower1@[0, 0] ) * g ) ) - ( ( ( 0.016 * bath@[0, 0] ) * cetaLower2@[0, 0] ) * g ) ) - ( ( ( ( 0.0106666666666667 * 2.44948974278318 ) * bath@[0, 1] ) * cetaLower0@[0, 0] ) * g ) ) - ( ( ( ( 0.00533333333333333 * 1.73205080756888 ) * bath@[0, 1] ) * cetaLower1@[0, 0] ) * g ) ) + ( ( ( 0.016 * bath@[0, 1] ) * cetaLower2@[0, 0] ) * g ) ) - ( ( ( ( 0.0106666666666667 * 2.44948974278318 ) * bath@[1, 0] ) * cetaLower0@[0, 0] ) * g ) ) + ( ( ( ( 0.0106666666666667 * 1.73205080756888 ) * bath@[1, 0] ) * cetaLower1@[0, 0] ) * g ) ) - ( ( ( 5.12E-4 * 1.73205080756888 ) * ( cetaLower0@[0, 0] * cetaLower0@[0, 0] ) ) * g ) ) - ( ( ( 5.12E-4 * 1.73205080756888 ) * ( cetaLower1@[0, 0] * cetaLower1@[0, 0] ) ) * g ) ) - ( ( ( 5.12E-4 * 1.73205080756888 ) * ( cetaLower2@[0, 0] * cetaLower2@[0, 0] ) ) * g ) ) - ( ( ( 5.12E-4 * 1.73205080756888 ) * cuTildeLower0@[0, 0] ) * cvLower0@[0, 0] ) ) - ( ( ( 5.12E-4 * 1.73205080756888 ) * cuTildeLower1@[0, 0] ) * cvLower1@[0, 0] ) ) - ( ( ( 5.12E-4 * 1.73205080756888 ) * cuTildeLower2@[0, 0] ) * cvLower2@[0, 0] ) ) - ( 0.016 * cvEdgeDLower2@[0, 0] ) ) - ( 0.016 * cvEdgeHLower2@[0, 0] ) ) - ( 0.016 * cvEdgeVLower2@[0, 0] ) ) - ( ( ( 0.001024 * 1.73205080756888 ) * cvLower0@[0, 0] ) * cvTildeLower0@[0, 0] ) ) - ( ( ( 0.001024 * 1.73205080756888 ) * cvLower1@[0, 0] ) * cvTildeLower1@[0, 0] ) ) - ( ( ( 0.001024 * 1.73205080756888 ) * cvLower2@[0, 0] ) * cvTildeLower2@[0, 0] ) ) - ( ( 5.20833333333333 * 1.73205080756888 ) * ( ( ( ( ( 0.002 * g ) * ( ( ( ( 0.016 * 1.4142135623731 ) * cetaLower0@[0, 0] ) + ( 0.032 * cetaLower1@[0, 0] ) ) - ( ( 0.032 * 1.73205080756888 ) * cetaLower2@[0, 0] ) ) ) - ( ( ( ( 6.66666666666667E-4 * M_PI ) * g ) * ( ( ( ( 0.001 * vf_nodePosition_0@[0, 1] ) + ( 0.002 * vf_nodePosition_1@[0, 1] ) ) - ( 0.4 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 1] ) ) ) ) ) ) + 17.3 ) ) * cos ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 1] ) ) ) ) ) ) + ( ( 1.33333333333333E-5 * M_PI ) * cos ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 1] ) ) ) ) ) ) + ( ( ( ( ( ( (-( ( ( -6.66666666666667E-4 * M_PI ) * cos ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 1] ) ) ) ) ) + 0.001 )) * ( ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 1] ) ) ) ) ) + 0.3 ) ) * ( ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 1] ) ) ) ) ) + 0.6 ) ) - ( ( ( ( -6.66666666666667E-4 * M_PI ) * cos ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 1] ) ) ) ) ) + 0.002 ) * ( ( ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 1] ) ) ) ) ) + 0.3 ) * ( ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 1] ) ) ) ) ) + 0.3 ) ) ) ) + ( ( ( ( ( 6.66666666666667E-5 * M_PI ) * ( ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 1] ) ) ) ) ) + 0.3 ) ) * cos ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 1] ) ) ) ) ) + ( ( ( 6.66666666666667E-5 * M_PI ) * ( ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 1] ) ) ) ) ) + 0.6 ) ) * cos ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 1] ) ) ) ) ) ) * ( ( ( ( 0.001 * vf_nodePosition_0@[0, 1] ) + ( 0.002 * vf_nodePosition_1@[0, 1] ) ) - ( 0.4 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 1] ) ) ) ) ) ) + 17.3 ) ) ) + ( ( ( ( 6.66666666666667E-5 * M_PI ) * ( ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 1] ) ) ) ) ) + 0.3 ) ) * ( ( ( ( 0.002 * vf_nodePosition_0@[0, 1] ) + ( 0.004 * vf_nodePosition_1@[0, 1] ) ) - ( 0.8 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 1] ) ) ) ) ) ) + 34.6 ) ) * cos ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 1] ) ) ) ) ) ) / ( ( ( ( ( 0.001 * vf_nodePosition_0@[0, 1] ) + ( 0.002 * vf_nodePosition_1@[0, 1] ) ) - ( 0.4 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 1] ) ) ) ) ) ) + 17.3 ) * ( ( ( ( 0.001 * vf_nodePosition_0@[0, 1] ) + ( 0.002 * vf_nodePosition_1@[0, 1] ) ) - ( 0.4 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 1] ) ) ) ) ) ) + 17.3 ) ) ) ) ) ) + ( ( 5.20833333333333 * 1.73205080756888 ) * ( ( ( ( ( 0.002 * g ) * ( ( ( ( 0.016 * 1.4142135623731 ) * cetaLower0@[0, 0] ) + ( 0.032 * cetaLower1@[0, 0] ) ) + ( ( 0.032 * 1.73205080756888 ) * cetaLower2@[0, 0] ) ) ) - ( ( ( ( 6.66666666666667E-4 * M_PI ) * g ) * ( ( ( ( 0.001 * vf_nodePosition_0@[0, 0] ) + ( 0.002 * vf_nodePosition_1@[0, 0] ) ) - ( 0.4 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 0] ) ) ) ) ) ) + 17.3 ) ) * cos ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 0] ) ) ) ) ) ) + ( ( 1.33333333333333E-5 * M_PI ) * cos ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 0] ) ) ) ) ) ) + ( ( ( ( ( ( (-( ( ( -6.66666666666667E-4 * M_PI ) * cos ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 0] ) ) ) ) ) + 0.001 )) * ( ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 0] ) ) ) ) ) + 0.3 ) ) * ( ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 0] ) ) ) ) ) + 0.6 ) ) - ( ( ( ( -6.66666666666667E-4 * M_PI ) * cos ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 0] ) ) ) ) ) + 0.002 ) * ( ( ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 0] ) ) ) ) ) + 0.3 ) * ( ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 0] ) ) ) ) ) + 0.3 ) ) ) ) + ( ( ( ( ( 6.66666666666667E-5 * M_PI ) * ( ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 0] ) ) ) ) ) + 0.3 ) ) * cos ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 0] ) ) ) ) ) + ( ( ( 6.66666666666667E-5 * M_PI ) * ( ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 0] ) ) ) ) ) + 0.6 ) ) * cos ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 0] ) ) ) ) ) ) * ( ( ( ( 0.001 * vf_nodePosition_0@[0, 0] ) + ( 0.002 * vf_nodePosition_1@[0, 0] ) ) - ( 0.4 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 0] ) ) ) ) ) ) + 17.3 ) ) ) + ( ( ( ( 6.66666666666667E-5 * M_PI ) * ( ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 0] ) ) ) ) ) + 0.3 ) ) * ( ( ( ( 0.002 * vf_nodePosition_0@[0, 0] ) + ( 0.004 * vf_nodePosition_1@[0, 0] ) ) - ( 0.8 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 0] ) ) ) ) ) ) + 34.6 ) ) * cos ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 0] ) ) ) ) ) ) / ( ( ( ( ( 0.001 * vf_nodePosition_0@[0, 0] ) + ( 0.002 * vf_nodePosition_1@[0, 0] ) ) - ( 0.4 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 0] ) ) ) ) ) ) + 17.3 ) * ( ( ( ( 0.001 * vf_nodePosition_0@[0, 0] ) + ( 0.002 * vf_nodePosition_1@[0, 0] ) ) - ( 0.4 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 0] ) ) ) ) ) ) + 17.3 ) ) ) ) ) )
		}
		loop over cetaNewUpper0 {
			cetaNewUpper0 = ( ( ( -0.016 * cetaEdgeDUpper0@[0, 0] ) - ( 0.016 * cetaEdgeHUpper0@[0, 1] ) ) - ( 0.016 * cetaEdgeVUpper0@[1, 0] ) )
			cuNewUpper0 = ( ( ( ( ( ( -0.016 * cuEdgeDUpper0@[0, 0] ) - ( 0.016 * cuEdgeHUpper0@[0, 1] ) ) - ( 0.016 * cuEdgeVUpper0@[1, 0] ) ) + ( ( 10.4166666666667 * 1.4142135623731 ) * ( ( ( ( ( 0.001 * g ) * ( ( ( 0.016 * 1.4142135623731 ) * cetaUpper0@[0, 0] ) - ( 0.064 * cetaUpper1@[0, 0] ) ) ) - ( ( ( ( 6.66666666666667E-4 * M_PI ) * g ) * ( ( ( ( 0.001 * vf_nodePosition_0@[0, 1] ) + ( 0.002 * vf_nodePosition_1@[0, 1] ) ) - ( 0.4 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 1] ) ) ) ) ) ) + 17.3 ) ) * cos ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 1] ) ) ) ) ) ) + ( ( 1.33333333333333E-5 * M_PI ) * cos ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 1] ) ) ) ) ) ) + ( ( ( ( ( (-( ( ( -6.66666666666667E-4 * M_PI ) * cos ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 1] ) ) ) ) ) + 0.001 )) * ( ( ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 1] ) ) ) ) ) + 0.6 ) * ( ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 1] ) ) ) ) ) + 0.6 ) ) ) - ( ( ( ( ( -6.66666666666667E-4 * M_PI ) * cos ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 1] ) ) ) ) ) + 0.002 ) * ( ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 1] ) ) ) ) ) + 0.3 ) ) * ( ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 1] ) ) ) ) ) + 0.6 ) ) ) + ( ( ( ( ( 6.66666666666667E-5 * M_PI ) * ( ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 1] ) ) ) ) ) + 0.3 ) ) * cos ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 1] ) ) ) ) ) + ( ( ( 6.66666666666667E-5 * M_PI ) * ( ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 1] ) ) ) ) ) + 0.6 ) ) * cos ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 1] ) ) ) ) ) ) * ( ( ( ( 0.001 * vf_nodePosition_0@[0, 1] ) + ( 0.002 * vf_nodePosition_1@[0, 1] ) ) - ( 0.4 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 1] ) ) ) ) ) ) + 17.3 ) ) ) + ( ( ( ( 6.66666666666667E-5 * M_PI ) * ( ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 1] ) ) ) ) ) + 0.6 ) ) * ( ( ( ( 0.002 * vf_nodePosition_0@[0, 1] ) + ( 0.004 * vf_nodePosition_1@[0, 1] ) ) - ( 0.8 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 1] ) ) ) ) ) ) + 34.6 ) ) * cos ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 1] ) ) ) ) ) ) / ( ( ( ( ( 0.001 * vf_nodePosition_0@[0, 1] ) + ( 0.002 * vf_nodePosition_1@[0, 1] ) ) - ( 0.4 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 1] ) ) ) ) ) ) + 17.3 ) * ( ( ( ( 0.001 * vf_nodePosition_0@[0, 1] ) + ( 0.002 * vf_nodePosition_1@[0, 1] ) ) - ( 0.4 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 1] ) ) ) ) ) ) + 17.3 ) ) ) ) ) ) + ( ( 10.4166666666667 * 1.4142135623731 ) * ( ( ( ( ( 0.001 * g ) * ( ( ( ( 0.016 * 1.4142135623731 ) * cetaUpper0@[0, 0] ) + ( 0.032 * cetaUpper1@[0, 0] ) ) - ( ( 0.032 * 1.73205080756888 ) * cetaUpper2@[0, 0] ) ) ) - ( ( ( ( 6.66666666666667E-4 * M_PI ) * g ) * ( ( ( ( 0.001 * vf_nodePosition_0@[1, 0] ) + ( 0.002 * vf_nodePosition_1@[1, 0] ) ) - ( 0.4 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 0] ) ) ) ) ) ) + 17.3 ) ) * cos ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 0] ) ) ) ) ) ) + ( ( 1.33333333333333E-5 * M_PI ) * cos ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 0] ) ) ) ) ) ) + ( ( ( ( ( (-( ( ( -6.66666666666667E-4 * M_PI ) * cos ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 0] ) ) ) ) ) + 0.001 )) * ( ( ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 0] ) ) ) ) ) + 0.6 ) * ( ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 0] ) ) ) ) ) + 0.6 ) ) ) - ( ( ( ( ( -6.66666666666667E-4 * M_PI ) * cos ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 0] ) ) ) ) ) + 0.002 ) * ( ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 0] ) ) ) ) ) + 0.3 ) ) * ( ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 0] ) ) ) ) ) + 0.6 ) ) ) + ( ( ( ( ( 6.66666666666667E-5 * M_PI ) * ( ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 0] ) ) ) ) ) + 0.3 ) ) * cos ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 0] ) ) ) ) ) + ( ( ( 6.66666666666667E-5 * M_PI ) * ( ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 0] ) ) ) ) ) + 0.6 ) ) * cos ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 0] ) ) ) ) ) ) * ( ( ( ( 0.001 * vf_nodePosition_0@[1, 0] ) + ( 0.002 * vf_nodePosition_1@[1, 0] ) ) - ( 0.4 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 0] ) ) ) ) ) ) + 17.3 ) ) ) + ( ( ( ( 6.66666666666667E-5 * M_PI ) * ( ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 0] ) ) ) ) ) + 0.6 ) ) * ( ( ( ( 0.002 * vf_nodePosition_0@[1, 0] ) + ( 0.004 * vf_nodePosition_1@[1, 0] ) ) - ( 0.8 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 0] ) ) ) ) ) ) + 34.6 ) ) * cos ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 0] ) ) ) ) ) ) / ( ( ( ( ( 0.001 * vf_nodePosition_0@[1, 0] ) + ( 0.002 * vf_nodePosition_1@[1, 0] ) ) - ( 0.4 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 0] ) ) ) ) ) ) + 17.3 ) * ( ( ( ( 0.001 * vf_nodePosition_0@[1, 0] ) + ( 0.002 * vf_nodePosition_1@[1, 0] ) ) - ( 0.4 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 0] ) ) ) ) ) ) + 17.3 ) ) ) ) ) ) + ( ( 10.4166666666667 * 1.4142135623731 ) * ( ( ( ( ( 0.001 * g ) * ( ( ( ( 0.016 * 1.4142135623731 ) * cetaUpper0@[0, 0] ) + ( 0.032 * cetaUpper1@[0, 0] ) ) + ( ( 0.032 * 1.73205080756888 ) * cetaUpper2@[0, 0] ) ) ) - ( ( ( ( 6.66666666666667E-4 * M_PI ) * g ) * ( ( ( ( 0.001 * vf_nodePosition_0@[1, 1] ) + ( 0.002 * vf_nodePosition_1@[1, 1] ) ) - ( 0.4 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 1] ) ) ) ) ) ) + 17.3 ) ) * cos ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 1] ) ) ) ) ) ) + ( ( 1.33333333333333E-5 * M_PI ) * cos ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 1] ) ) ) ) ) ) + ( ( ( ( ( (-( ( ( -6.66666666666667E-4 * M_PI ) * cos ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 1] ) ) ) ) ) + 0.001 )) * ( ( ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 1] ) ) ) ) ) + 0.6 ) * ( ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 1] ) ) ) ) ) + 0.6 ) ) ) - ( ( ( ( ( -6.66666666666667E-4 * M_PI ) * cos ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 1] ) ) ) ) ) + 0.002 ) * ( ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 1] ) ) ) ) ) + 0.3 ) ) * ( ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 1] ) ) ) ) ) + 0.6 ) ) ) + ( ( ( ( ( 6.66666666666667E-5 * M_PI ) * ( ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 1] ) ) ) ) ) + 0.3 ) ) * cos ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 1] ) ) ) ) ) + ( ( ( 6.66666666666667E-5 * M_PI ) * ( ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 1] ) ) ) ) ) + 0.6 ) ) * cos ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 1] ) ) ) ) ) ) * ( ( ( ( 0.001 * vf_nodePosition_0@[1, 1] ) + ( 0.002 * vf_nodePosition_1@[1, 1] ) ) - ( 0.4 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 1] ) ) ) ) ) ) + 17.3 ) ) ) + ( ( ( ( 6.66666666666667E-5 * M_PI ) * ( ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 1] ) ) ) ) ) + 0.6 ) ) * ( ( ( ( 0.002 * vf_nodePosition_0@[1, 1] ) + ( 0.004 * vf_nodePosition_1@[1, 1] ) ) - ( 0.8 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 1] ) ) ) ) ) ) + 34.6 ) ) * cos ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 1] ) ) ) ) ) ) / ( ( ( ( ( 0.001 * vf_nodePosition_0@[1, 1] ) + ( 0.002 * vf_nodePosition_1@[1, 1] ) ) - ( 0.4 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 1] ) ) ) ) ) ) + 17.3 ) * ( ( ( ( 0.001 * vf_nodePosition_0@[1, 1] ) + ( 0.002 * vf_nodePosition_1@[1, 1] ) ) - ( 0.4 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 1] ) ) ) ) ) ) + 17.3 ) ) ) ) ) )
			cvNewUpper0 = ( ( ( ( ( ( -0.016 * cvEdgeDUpper0@[0, 0] ) - ( 0.016 * cvEdgeHUpper0@[0, 1] ) ) - ( 0.016 * cvEdgeVUpper0@[1, 0] ) ) + ( ( 10.4166666666667 * 1.4142135623731 ) * ( ( ( ( ( 0.002 * g ) * ( ( ( 0.016 * 1.4142135623731 ) * cetaUpper0@[0, 0] ) - ( 0.064 * cetaUpper1@[0, 0] ) ) ) - ( ( ( ( 6.66666666666667E-4 * M_PI ) * g ) * ( ( ( ( 0.001 * vf_nodePosition_0@[0, 1] ) + ( 0.002 * vf_nodePosition_1@[0, 1] ) ) - ( 0.4 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 1] ) ) ) ) ) ) + 17.3 ) ) * cos ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 1] ) ) ) ) ) ) + ( ( 1.33333333333333E-5 * M_PI ) * cos ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 1] ) ) ) ) ) ) + ( ( ( ( ( ( (-( ( ( -6.66666666666667E-4 * M_PI ) * cos ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 1] ) ) ) ) ) + 0.001 )) * ( ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 1] ) ) ) ) ) + 0.3 ) ) * ( ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 1] ) ) ) ) ) + 0.6 ) ) - ( ( ( ( -6.66666666666667E-4 * M_PI ) * cos ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 1] ) ) ) ) ) + 0.002 ) * ( ( ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 1] ) ) ) ) ) + 0.3 ) * ( ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 1] ) ) ) ) ) + 0.3 ) ) ) ) + ( ( ( ( ( 6.66666666666667E-5 * M_PI ) * ( ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 1] ) ) ) ) ) + 0.3 ) ) * cos ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 1] ) ) ) ) ) + ( ( ( 6.66666666666667E-5 * M_PI ) * ( ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 1] ) ) ) ) ) + 0.6 ) ) * cos ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 1] ) ) ) ) ) ) * ( ( ( ( 0.001 * vf_nodePosition_0@[0, 1] ) + ( 0.002 * vf_nodePosition_1@[0, 1] ) ) - ( 0.4 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 1] ) ) ) ) ) ) + 17.3 ) ) ) + ( ( ( ( 6.66666666666667E-5 * M_PI ) * ( ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 1] ) ) ) ) ) + 0.3 ) ) * ( ( ( ( 0.002 * vf_nodePosition_0@[0, 1] ) + ( 0.004 * vf_nodePosition_1@[0, 1] ) ) - ( 0.8 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 1] ) ) ) ) ) ) + 34.6 ) ) * cos ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 1] ) ) ) ) ) ) / ( ( ( ( ( 0.001 * vf_nodePosition_0@[0, 1] ) + ( 0.002 * vf_nodePosition_1@[0, 1] ) ) - ( 0.4 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 1] ) ) ) ) ) ) + 17.3 ) * ( ( ( ( 0.001 * vf_nodePosition_0@[0, 1] ) + ( 0.002 * vf_nodePosition_1@[0, 1] ) ) - ( 0.4 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 1] ) ) ) ) ) ) + 17.3 ) ) ) ) ) ) + ( ( 10.4166666666667 * 1.4142135623731 ) * ( ( ( ( ( 0.002 * g ) * ( ( ( ( 0.016 * 1.4142135623731 ) * cetaUpper0@[0, 0] ) + ( 0.032 * cetaUpper1@[0, 0] ) ) - ( ( 0.032 * 1.73205080756888 ) * cetaUpper2@[0, 0] ) ) ) - ( ( ( ( 6.66666666666667E-4 * M_PI ) * g ) * ( ( ( ( 0.001 * vf_nodePosition_0@[1, 0] ) + ( 0.002 * vf_nodePosition_1@[1, 0] ) ) - ( 0.4 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 0] ) ) ) ) ) ) + 17.3 ) ) * cos ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 0] ) ) ) ) ) ) + ( ( 1.33333333333333E-5 * M_PI ) * cos ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 0] ) ) ) ) ) ) + ( ( ( ( ( ( (-( ( ( -6.66666666666667E-4 * M_PI ) * cos ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 0] ) ) ) ) ) + 0.001 )) * ( ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 0] ) ) ) ) ) + 0.3 ) ) * ( ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 0] ) ) ) ) ) + 0.6 ) ) - ( ( ( ( -6.66666666666667E-4 * M_PI ) * cos ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 0] ) ) ) ) ) + 0.002 ) * ( ( ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 0] ) ) ) ) ) + 0.3 ) * ( ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 0] ) ) ) ) ) + 0.3 ) ) ) ) + ( ( ( ( ( 6.66666666666667E-5 * M_PI ) * ( ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 0] ) ) ) ) ) + 0.3 ) ) * cos ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 0] ) ) ) ) ) + ( ( ( 6.66666666666667E-5 * M_PI ) * ( ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 0] ) ) ) ) ) + 0.6 ) ) * cos ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 0] ) ) ) ) ) ) * ( ( ( ( 0.001 * vf_nodePosition_0@[1, 0] ) + ( 0.002 * vf_nodePosition_1@[1, 0] ) ) - ( 0.4 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 0] ) ) ) ) ) ) + 17.3 ) ) ) + ( ( ( ( 6.66666666666667E-5 * M_PI ) * ( ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 0] ) ) ) ) ) + 0.3 ) ) * ( ( ( ( 0.002 * vf_nodePosition_0@[1, 0] ) + ( 0.004 * vf_nodePosition_1@[1, 0] ) ) - ( 0.8 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 0] ) ) ) ) ) ) + 34.6 ) ) * cos ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 0] ) ) ) ) ) ) / ( ( ( ( ( 0.001 * vf_nodePosition_0@[1, 0] ) + ( 0.002 * vf_nodePosition_1@[1, 0] ) ) - ( 0.4 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 0] ) ) ) ) ) ) + 17.3 ) * ( ( ( ( 0.001 * vf_nodePosition_0@[1, 0] ) + ( 0.002 * vf_nodePosition_1@[1, 0] ) ) - ( 0.4 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 0] ) ) ) ) ) ) + 17.3 ) ) ) ) ) ) + ( ( 10.4166666666667 * 1.4142135623731 ) * ( ( ( ( ( 0.002 * g ) * ( ( ( ( 0.016 * 1.4142135623731 ) * cetaUpper0@[0, 0] ) + ( 0.032 * cetaUpper1@[0, 0] ) ) + ( ( 0.032 * 1.73205080756888 ) * cetaUpper2@[0, 0] ) ) ) - ( ( ( ( 6.66666666666667E-4 * M_PI ) * g ) * ( ( ( ( 0.001 * vf_nodePosition_0@[1, 1] ) + ( 0.002 * vf_nodePosition_1@[1, 1] ) ) - ( 0.4 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 1] ) ) ) ) ) ) + 17.3 ) ) * cos ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 1] ) ) ) ) ) ) + ( ( 1.33333333333333E-5 * M_PI ) * cos ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 1] ) ) ) ) ) ) + ( ( ( ( ( ( (-( ( ( -6.66666666666667E-4 * M_PI ) * cos ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 1] ) ) ) ) ) + 0.001 )) * ( ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 1] ) ) ) ) ) + 0.3 ) ) * ( ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 1] ) ) ) ) ) + 0.6 ) ) - ( ( ( ( -6.66666666666667E-4 * M_PI ) * cos ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 1] ) ) ) ) ) + 0.002 ) * ( ( ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 1] ) ) ) ) ) + 0.3 ) * ( ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 1] ) ) ) ) ) + 0.3 ) ) ) ) + ( ( ( ( ( 6.66666666666667E-5 * M_PI ) * ( ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 1] ) ) ) ) ) + 0.3 ) ) * cos ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 1] ) ) ) ) ) + ( ( ( 6.66666666666667E-5 * M_PI ) * ( ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 1] ) ) ) ) ) + 0.6 ) ) * cos ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 1] ) ) ) ) ) ) * ( ( ( ( 0.001 * vf_nodePosition_0@[1, 1] ) + ( 0.002 * vf_nodePosition_1@[1, 1] ) ) - ( 0.4 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 1] ) ) ) ) ) ) + 17.3 ) ) ) + ( ( ( ( 6.66666666666667E-5 * M_PI ) * ( ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 1] ) ) ) ) ) + 0.3 ) ) * ( ( ( ( 0.002 * vf_nodePosition_0@[1, 1] ) + ( 0.004 * vf_nodePosition_1@[1, 1] ) ) - ( 0.8 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 1] ) ) ) ) ) ) + 34.6 ) ) * cos ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 1] ) ) ) ) ) ) / ( ( ( ( ( 0.001 * vf_nodePosition_0@[1, 1] ) + ( 0.002 * vf_nodePosition_1@[1, 1] ) ) - ( 0.4 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 1] ) ) ) ) ) ) + 17.3 ) * ( ( ( ( 0.001 * vf_nodePosition_0@[1, 1] ) + ( 0.002 * vf_nodePosition_1@[1, 1] ) ) - ( 0.4 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 1] ) ) ) ) ) ) + 17.3 ) ) ) ) ) )
			cetaNewUpper1 = ( ( ( ( -0.016 * cetaEdgeDUpper1@[0, 0] ) - ( 0.016 * cetaEdgeHUpper1@[0, 1] ) ) - ( 0.016 * cetaEdgeVUpper1@[1, 0] ) ) + ( ( 0.048 * 1.4142135623731 ) * cuUpper0@[0, 0] ) )
			cuNewUpper1 = ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( 0.016 * 1.4142135623731 ) * bath@[0, 1] ) * cetaUpper0@[0, 0] ) * g ) - ( ( ( 0.016 * bath@[0, 1] ) * cetaUpper1@[0, 0] ) * g ) ) + ( ( ( ( 0.016 * 1.4142135623731 ) * bath@[1, 0] ) * cetaUpper0@[0, 0] ) * g ) ) + ( ( ( 0.008 * bath@[1, 0] ) * cetaUpper1@[0, 0] ) * g ) ) - ( ( ( ( 0.008 * 1.73205080756888 ) * bath@[1, 0] ) * cetaUpper2@[0, 0] ) * g ) ) + ( ( ( ( 0.016 * 1.4142135623731 ) * bath@[1, 1] ) * cetaUpper0@[0, 0] ) * g ) ) + ( ( ( 0.008 * bath@[1, 1] ) * cetaUpper1@[0, 0] ) * g ) ) + ( ( ( ( 0.008 * 1.73205080756888 ) * bath@[1, 1] ) * cetaUpper2@[0, 0] ) * g ) ) + ( ( 7.68E-4 * ( cetaUpper0@[0, 0] * cetaUpper0@[0, 0] ) ) * g ) ) + ( ( 7.68E-4 * ( cetaUpper1@[0, 0] * cetaUpper1@[0, 0] ) ) * g ) ) + ( ( 7.68E-4 * ( cetaUpper2@[0, 0] * cetaUpper2@[0, 0] ) ) * g ) ) - ( 0.016 * cuEdgeDUpper1@[0, 0] ) ) - ( 0.016 * cuEdgeHUpper1@[0, 1] ) ) - ( 0.016 * cuEdgeVUpper1@[1, 0] ) ) + ( ( 0.001536 * cuTildeUpper0@[0, 0] ) * cuUpper0@[0, 0] ) ) + ( ( 0.001536 * cuTildeUpper1@[0, 0] ) * cuUpper1@[0, 0] ) ) + ( ( 0.001536 * cuTildeUpper2@[0, 0] ) * cuUpper2@[0, 0] ) ) - ( ( 0.0104166666666667 * g ) * ( ( ( 0.016 * 1.4142135623731 ) * cetaUpper0@[0, 0] ) - ( 0.064 * cetaUpper1@[0, 0] ) ) ) ) + ( ( 0.00520833333333333 * g ) * ( ( ( ( 0.016 * 1.4142135623731 ) * cetaUpper0@[0, 0] ) + ( 0.032 * cetaUpper1@[0, 0] ) ) - ( ( 0.032 * 1.73205080756888 ) * cetaUpper2@[0, 0] ) ) ) ) + ( ( 0.00520833333333333 * g ) * ( ( ( ( 0.016 * 1.4142135623731 ) * cetaUpper0@[0, 0] ) + ( 0.032 * cetaUpper1@[0, 0] ) ) + ( ( 0.032 * 1.73205080756888 ) * cetaUpper2@[0, 0] ) ) ) ) + ( ( ( ( 0.00694444444444444 * M_PI ) * g ) * ( ( ( ( 0.001 * vf_nodePosition_0@[0, 1] ) + ( 0.002 * vf_nodePosition_1@[0, 1] ) ) - ( 0.4 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 1] ) ) ) ) ) ) + 17.3 ) ) * cos ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 1] ) ) ) ) ) ) - ( ( ( ( 0.00347222222222222 * M_PI ) * g ) * ( ( ( ( 0.001 * vf_nodePosition_0@[1, 0] ) + ( 0.002 * vf_nodePosition_1@[1, 0] ) ) - ( 0.4 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 0] ) ) ) ) ) ) + 17.3 ) ) * cos ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 0] ) ) ) ) ) ) - ( ( ( ( 0.00347222222222222 * M_PI ) * g ) * ( ( ( ( 0.001 * vf_nodePosition_0@[1, 1] ) + ( 0.002 * vf_nodePosition_1@[1, 1] ) ) - ( 0.4 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 1] ) ) ) ) ) ) + 17.3 ) ) * cos ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 1] ) ) ) ) ) ) - ( ( 1.38888888888889E-4 * M_PI ) * cos ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 1] ) ) ) ) ) ) + ( ( 6.94444444444445E-5 * M_PI ) * cos ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 0] ) ) ) ) ) ) + ( ( 6.94444444444445E-5 * M_PI ) * cos ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 1] ) ) ) ) ) ) + ( ( 5.20833333333333 * ( ( ( ( (-( ( ( -6.66666666666667E-4 * M_PI ) * cos ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 1] ) ) ) ) ) + 0.001 )) * ( ( ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 1] ) ) ) ) ) + 0.6 ) * ( ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 1] ) ) ) ) ) + 0.6 ) ) ) - ( ( ( ( ( -6.66666666666667E-4 * M_PI ) * cos ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 1] ) ) ) ) ) + 0.002 ) * ( ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 1] ) ) ) ) ) + 0.3 ) ) * ( ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 1] ) ) ) ) ) + 0.6 ) ) ) + ( ( ( ( ( 6.66666666666667E-5 * M_PI ) * ( ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 1] ) ) ) ) ) + 0.3 ) ) * cos ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 1] ) ) ) ) ) + ( ( ( 6.66666666666667E-5 * M_PI ) * ( ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 1] ) ) ) ) ) + 0.6 ) ) * cos ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 1] ) ) ) ) ) ) * ( ( ( ( 0.001 * vf_nodePosition_0@[1, 1] ) + ( 0.002 * vf_nodePosition_1@[1, 1] ) ) - ( 0.4 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 1] ) ) ) ) ) ) + 17.3 ) ) ) + ( ( ( ( 6.66666666666667E-5 * M_PI ) * ( ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 1] ) ) ) ) ) + 0.6 ) ) * ( ( ( ( 0.002 * vf_nodePosition_0@[1, 1] ) + ( 0.004 * vf_nodePosition_1@[1, 1] ) ) - ( 0.8 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 1] ) ) ) ) ) ) + 34.6 ) ) * cos ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 1] ) ) ) ) ) ) ) / ( ( ( ( ( 0.001 * vf_nodePosition_0@[1, 1] ) + ( 0.002 * vf_nodePosition_1@[1, 1] ) ) - ( 0.4 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 1] ) ) ) ) ) ) + 17.3 ) * ( ( ( ( 0.001 * vf_nodePosition_0@[1, 1] ) + ( 0.002 * vf_nodePosition_1@[1, 1] ) ) - ( 0.4 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 1] ) ) ) ) ) ) + 17.3 ) ) ) ) + ( ( 5.20833333333333 * ( ( ( ( (-( ( ( -6.66666666666667E-4 * M_PI ) * cos ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 0] ) ) ) ) ) + 0.001 )) * ( ( ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 0] ) ) ) ) ) + 0.6 ) * ( ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 0] ) ) ) ) ) + 0.6 ) ) ) - ( ( ( ( ( -6.66666666666667E-4 * M_PI ) * cos ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 0] ) ) ) ) ) + 0.002 ) * ( ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 0] ) ) ) ) ) + 0.3 ) ) * ( ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 0] ) ) ) ) ) + 0.6 ) ) ) + ( ( ( ( ( 6.66666666666667E-5 * M_PI ) * ( ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 0] ) ) ) ) ) + 0.3 ) ) * cos ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 0] ) ) ) ) ) + ( ( ( 6.66666666666667E-5 * M_PI ) * ( ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 0] ) ) ) ) ) + 0.6 ) ) * cos ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 0] ) ) ) ) ) ) * ( ( ( ( 0.001 * vf_nodePosition_0@[1, 0] ) + ( 0.002 * vf_nodePosition_1@[1, 0] ) ) - ( 0.4 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 0] ) ) ) ) ) ) + 17.3 ) ) ) + ( ( ( ( 6.66666666666667E-5 * M_PI ) * ( ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 0] ) ) ) ) ) + 0.6 ) ) * ( ( ( ( 0.002 * vf_nodePosition_0@[1, 0] ) + ( 0.004 * vf_nodePosition_1@[1, 0] ) ) - ( 0.8 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 0] ) ) ) ) ) ) + 34.6 ) ) * cos ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 0] ) ) ) ) ) ) ) / ( ( ( ( ( 0.001 * vf_nodePosition_0@[1, 0] ) + ( 0.002 * vf_nodePosition_1@[1, 0] ) ) - ( 0.4 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 0] ) ) ) ) ) ) + 17.3 ) * ( ( ( ( 0.001 * vf_nodePosition_0@[1, 0] ) + ( 0.002 * vf_nodePosition_1@[1, 0] ) ) - ( 0.4 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 0] ) ) ) ) ) ) + 17.3 ) ) ) ) - ( ( 10.4166666666667 * ( ( ( ( (-( ( ( -6.66666666666667E-4 * M_PI ) * cos ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 1] ) ) ) ) ) + 0.001 )) * ( ( ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 1] ) ) ) ) ) + 0.6 ) * ( ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 1] ) ) ) ) ) + 0.6 ) ) ) - ( ( ( ( ( -6.66666666666667E-4 * M_PI ) * cos ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 1] ) ) ) ) ) + 0.002 ) * ( ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 1] ) ) ) ) ) + 0.3 ) ) * ( ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 1] ) ) ) ) ) + 0.6 ) ) ) + ( ( ( ( ( 6.66666666666667E-5 * M_PI ) * ( ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 1] ) ) ) ) ) + 0.3 ) ) * cos ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 1] ) ) ) ) ) + ( ( ( 6.66666666666667E-5 * M_PI ) * ( ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 1] ) ) ) ) ) + 0.6 ) ) * cos ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 1] ) ) ) ) ) ) * ( ( ( ( 0.001 * vf_nodePosition_0@[0, 1] ) + ( 0.002 * vf_nodePosition_1@[0, 1] ) ) - ( 0.4 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 1] ) ) ) ) ) ) + 17.3 ) ) ) + ( ( ( ( 6.66666666666667E-5 * M_PI ) * ( ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 1] ) ) ) ) ) + 0.6 ) ) * ( ( ( ( 0.002 * vf_nodePosition_0@[0, 1] ) + ( 0.004 * vf_nodePosition_1@[0, 1] ) ) - ( 0.8 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 1] ) ) ) ) ) ) + 34.6 ) ) * cos ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 1] ) ) ) ) ) ) ) / ( ( ( ( ( 0.001 * vf_nodePosition_0@[0, 1] ) + ( 0.002 * vf_nodePosition_1@[0, 1] ) ) - ( 0.4 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 1] ) ) ) ) ) ) + 17.3 ) * ( ( ( ( 0.001 * vf_nodePosition_0@[0, 1] ) + ( 0.002 * vf_nodePosition_1@[0, 1] ) ) - ( 0.4 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 1] ) ) ) ) ) ) + 17.3 ) ) ) )
			cvNewUpper1 = ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( 0.001536 * cuTildeUpper0@[0, 0] ) * cvUpper0@[0, 0] ) + ( ( 0.001536 * cuTildeUpper1@[0, 0] ) * cvUpper1@[0, 0] ) ) + ( ( 0.001536 * cuTildeUpper2@[0, 0] ) * cvUpper2@[0, 0] ) ) - ( 0.016 * cvEdgeDUpper1@[0, 0] ) ) - ( 0.016 * cvEdgeHUpper1@[0, 1] ) ) - ( 0.016 * cvEdgeVUpper1@[1, 0] ) ) - ( ( 0.0208333333333333 * g ) * ( ( ( 0.016 * 1.4142135623731 ) * cetaUpper0@[0, 0] ) - ( 0.064 * cetaUpper1@[0, 0] ) ) ) ) + ( ( 0.0104166666666667 * g ) * ( ( ( ( 0.016 * 1.4142135623731 ) * cetaUpper0@[0, 0] ) + ( 0.032 * cetaUpper1@[0, 0] ) ) - ( ( 0.032 * 1.73205080756888 ) * cetaUpper2@[0, 0] ) ) ) ) + ( ( 0.0104166666666667 * g ) * ( ( ( ( 0.016 * 1.4142135623731 ) * cetaUpper0@[0, 0] ) + ( 0.032 * cetaUpper1@[0, 0] ) ) + ( ( 0.032 * 1.73205080756888 ) * cetaUpper2@[0, 0] ) ) ) ) + ( ( ( ( 0.00694444444444444 * M_PI ) * g ) * ( ( ( ( 0.001 * vf_nodePosition_0@[0, 1] ) + ( 0.002 * vf_nodePosition_1@[0, 1] ) ) - ( 0.4 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 1] ) ) ) ) ) ) + 17.3 ) ) * cos ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 1] ) ) ) ) ) ) - ( ( ( ( 0.00347222222222222 * M_PI ) * g ) * ( ( ( ( 0.001 * vf_nodePosition_0@[1, 0] ) + ( 0.002 * vf_nodePosition_1@[1, 0] ) ) - ( 0.4 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 0] ) ) ) ) ) ) + 17.3 ) ) * cos ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 0] ) ) ) ) ) ) - ( ( ( ( 0.00347222222222222 * M_PI ) * g ) * ( ( ( ( 0.001 * vf_nodePosition_0@[1, 1] ) + ( 0.002 * vf_nodePosition_1@[1, 1] ) ) - ( 0.4 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 1] ) ) ) ) ) ) + 17.3 ) ) * cos ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 1] ) ) ) ) ) ) - ( ( 1.38888888888889E-4 * M_PI ) * cos ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 1] ) ) ) ) ) ) + ( ( 6.94444444444445E-5 * M_PI ) * cos ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 0] ) ) ) ) ) ) + ( ( 6.94444444444445E-5 * M_PI ) * cos ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 1] ) ) ) ) ) ) + ( ( 5.20833333333333 * ( ( ( ( ( (-( ( ( -6.66666666666667E-4 * M_PI ) * cos ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 1] ) ) ) ) ) + 0.001 )) * ( ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 1] ) ) ) ) ) + 0.3 ) ) * ( ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 1] ) ) ) ) ) + 0.6 ) ) - ( ( ( ( -6.66666666666667E-4 * M_PI ) * cos ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 1] ) ) ) ) ) + 0.002 ) * ( ( ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 1] ) ) ) ) ) + 0.3 ) * ( ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 1] ) ) ) ) ) + 0.3 ) ) ) ) + ( ( ( ( ( 6.66666666666667E-5 * M_PI ) * ( ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 1] ) ) ) ) ) + 0.3 ) ) * cos ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 1] ) ) ) ) ) + ( ( ( 6.66666666666667E-5 * M_PI ) * ( ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 1] ) ) ) ) ) + 0.6 ) ) * cos ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 1] ) ) ) ) ) ) * ( ( ( ( 0.001 * vf_nodePosition_0@[1, 1] ) + ( 0.002 * vf_nodePosition_1@[1, 1] ) ) - ( 0.4 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 1] ) ) ) ) ) ) + 17.3 ) ) ) + ( ( ( ( 6.66666666666667E-5 * M_PI ) * ( ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 1] ) ) ) ) ) + 0.3 ) ) * ( ( ( ( 0.002 * vf_nodePosition_0@[1, 1] ) + ( 0.004 * vf_nodePosition_1@[1, 1] ) ) - ( 0.8 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 1] ) ) ) ) ) ) + 34.6 ) ) * cos ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 1] ) ) ) ) ) ) ) / ( ( ( ( ( 0.001 * vf_nodePosition_0@[1, 1] ) + ( 0.002 * vf_nodePosition_1@[1, 1] ) ) - ( 0.4 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 1] ) ) ) ) ) ) + 17.3 ) * ( ( ( ( 0.001 * vf_nodePosition_0@[1, 1] ) + ( 0.002 * vf_nodePosition_1@[1, 1] ) ) - ( 0.4 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 1] ) ) ) ) ) ) + 17.3 ) ) ) ) + ( ( 5.20833333333333 * ( ( ( ( ( (-( ( ( -6.66666666666667E-4 * M_PI ) * cos ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 0] ) ) ) ) ) + 0.001 )) * ( ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 0] ) ) ) ) ) + 0.3 ) ) * ( ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 0] ) ) ) ) ) + 0.6 ) ) - ( ( ( ( -6.66666666666667E-4 * M_PI ) * cos ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 0] ) ) ) ) ) + 0.002 ) * ( ( ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 0] ) ) ) ) ) + 0.3 ) * ( ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 0] ) ) ) ) ) + 0.3 ) ) ) ) + ( ( ( ( ( 6.66666666666667E-5 * M_PI ) * ( ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 0] ) ) ) ) ) + 0.3 ) ) * cos ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 0] ) ) ) ) ) + ( ( ( 6.66666666666667E-5 * M_PI ) * ( ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 0] ) ) ) ) ) + 0.6 ) ) * cos ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 0] ) ) ) ) ) ) * ( ( ( ( 0.001 * vf_nodePosition_0@[1, 0] ) + ( 0.002 * vf_nodePosition_1@[1, 0] ) ) - ( 0.4 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 0] ) ) ) ) ) ) + 17.3 ) ) ) + ( ( ( ( 6.66666666666667E-5 * M_PI ) * ( ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 0] ) ) ) ) ) + 0.3 ) ) * ( ( ( ( 0.002 * vf_nodePosition_0@[1, 0] ) + ( 0.004 * vf_nodePosition_1@[1, 0] ) ) - ( 0.8 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 0] ) ) ) ) ) ) + 34.6 ) ) * cos ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 0] ) ) ) ) ) ) ) / ( ( ( ( ( 0.001 * vf_nodePosition_0@[1, 0] ) + ( 0.002 * vf_nodePosition_1@[1, 0] ) ) - ( 0.4 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 0] ) ) ) ) ) ) + 17.3 ) * ( ( ( ( 0.001 * vf_nodePosition_0@[1, 0] ) + ( 0.002 * vf_nodePosition_1@[1, 0] ) ) - ( 0.4 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 0] ) ) ) ) ) ) + 17.3 ) ) ) ) - ( ( 10.4166666666667 * ( ( ( ( ( (-( ( ( -6.66666666666667E-4 * M_PI ) * cos ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 1] ) ) ) ) ) + 0.001 )) * ( ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 1] ) ) ) ) ) + 0.3 ) ) * ( ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 1] ) ) ) ) ) + 0.6 ) ) - ( ( ( ( -6.66666666666667E-4 * M_PI ) * cos ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 1] ) ) ) ) ) + 0.002 ) * ( ( ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 1] ) ) ) ) ) + 0.3 ) * ( ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 1] ) ) ) ) ) + 0.3 ) ) ) ) + ( ( ( ( ( 6.66666666666667E-5 * M_PI ) * ( ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 1] ) ) ) ) ) + 0.3 ) ) * cos ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 1] ) ) ) ) ) + ( ( ( 6.66666666666667E-5 * M_PI ) * ( ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 1] ) ) ) ) ) + 0.6 ) ) * cos ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 1] ) ) ) ) ) ) * ( ( ( ( 0.001 * vf_nodePosition_0@[0, 1] ) + ( 0.002 * vf_nodePosition_1@[0, 1] ) ) - ( 0.4 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 1] ) ) ) ) ) ) + 17.3 ) ) ) + ( ( ( ( 6.66666666666667E-5 * M_PI ) * ( ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 1] ) ) ) ) ) + 0.3 ) ) * ( ( ( ( 0.002 * vf_nodePosition_0@[0, 1] ) + ( 0.004 * vf_nodePosition_1@[0, 1] ) ) - ( 0.8 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 1] ) ) ) ) ) ) + 34.6 ) ) * cos ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 1] ) ) ) ) ) ) ) / ( ( ( ( ( 0.001 * vf_nodePosition_0@[0, 1] ) + ( 0.002 * vf_nodePosition_1@[0, 1] ) ) - ( 0.4 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 1] ) ) ) ) ) ) + 17.3 ) * ( ( ( ( 0.001 * vf_nodePosition_0@[0, 1] ) + ( 0.002 * vf_nodePosition_1@[0, 1] ) ) - ( 0.4 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[0, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[0, 1] ) ) ) ) ) ) + 17.3 ) ) ) )
			cetaNewUpper2 = ( ( ( ( ( -0.016 * cetaEdgeDUpper2@[0, 0] ) - ( 0.016 * cetaEdgeHUpper2@[0, 1] ) ) - ( 0.016 * cetaEdgeVUpper2@[1, 0] ) ) + ( ( 0.016 * 2.44948974278318 ) * cuUpper0@[0, 0] ) ) + ( ( 0.032 * 2.44948974278318 ) * cvUpper0@[0, 0] ) )
			cuNewUpper2 = ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( 0.00533333333333333 * 2.44948974278318 ) * bath@[0, 1] ) * cetaUpper0@[0, 0] ) * g ) - ( ( ( ( 0.00533333333333333 * 1.73205080756888 ) * bath@[0, 1] ) * cetaUpper1@[0, 0] ) * g ) ) + ( ( ( ( 0.00533333333333333 * 2.44948974278318 ) * bath@[1, 0] ) * cetaUpper0@[0, 0] ) * g ) ) + ( ( ( ( 0.00266666666666667 * 1.73205080756888 ) * bath@[1, 0] ) * cetaUpper1@[0, 0] ) * g ) ) - ( ( ( 0.008 * bath@[1, 0] ) * cetaUpper2@[0, 0] ) * g ) ) + ( ( ( ( 0.00533333333333333 * 2.44948974278318 ) * bath@[1, 1] ) * cetaUpper0@[0, 0] ) * g ) ) + ( ( ( ( 0.00266666666666667 * 1.73205080756888 ) * bath@[1, 1] ) * cetaUpper1@[0, 0] ) * g ) ) + ( ( ( 0.008 * bath@[1, 1] ) * cetaUpper2@[0, 0] ) * g ) ) + ( ( ( 2.56E-4 * 1.73205080756888 ) * ( cetaUpper0@[0, 0] * cetaUpper0@[0, 0] ) ) * g ) ) + ( ( ( 2.56E-4 * 1.73205080756888 ) * ( cetaUpper1@[0, 0] * cetaUpper1@[0, 0] ) ) * g ) ) + ( ( ( 2.56E-4 * 1.73205080756888 ) * ( cetaUpper2@[0, 0] * cetaUpper2@[0, 0] ) ) * g ) ) - ( 0.016 * cuEdgeDUpper2@[0, 0] ) ) - ( 0.016 * cuEdgeHUpper2@[0, 1] ) ) - ( 0.016 * cuEdgeVUpper2@[1, 0] ) ) + ( ( ( 5.12E-4 * 1.73205080756888 ) * cuTildeUpper0@[0, 0] ) * cuUpper0@[0, 0] ) ) + ( ( ( 5.12E-4 * 1.73205080756888 ) * cuTildeUpper1@[0, 0] ) * cuUpper1@[0, 0] ) ) + ( ( ( 5.12E-4 * 1.73205080756888 ) * cuTildeUpper2@[0, 0] ) * cuUpper2@[0, 0] ) ) + ( ( ( 0.001024 * 1.73205080756888 ) * cuUpper0@[0, 0] ) * cvTildeUpper0@[0, 0] ) ) + ( ( ( 0.001024 * 1.73205080756888 ) * cuUpper1@[0, 0] ) * cvTildeUpper1@[0, 0] ) ) + ( ( ( 0.001024 * 1.73205080756888 ) * cuUpper2@[0, 0] ) * cvTildeUpper2@[0, 0] ) ) - ( ( 5.20833333333333 * 1.73205080756888 ) * ( ( ( ( ( 0.001 * g ) * ( ( ( ( 0.016 * 1.4142135623731 ) * cetaUpper0@[0, 0] ) + ( 0.032 * cetaUpper1@[0, 0] ) ) - ( ( 0.032 * 1.73205080756888 ) * cetaUpper2@[0, 0] ) ) ) - ( ( ( ( 6.66666666666667E-4 * M_PI ) * g ) * ( ( ( ( 0.001 * vf_nodePosition_0@[1, 0] ) + ( 0.002 * vf_nodePosition_1@[1, 0] ) ) - ( 0.4 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 0] ) ) ) ) ) ) + 17.3 ) ) * cos ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 0] ) ) ) ) ) ) + ( ( 1.33333333333333E-5 * M_PI ) * cos ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 0] ) ) ) ) ) ) + ( ( ( ( ( (-( ( ( -6.66666666666667E-4 * M_PI ) * cos ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 0] ) ) ) ) ) + 0.001 )) * ( ( ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 0] ) ) ) ) ) + 0.6 ) * ( ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 0] ) ) ) ) ) + 0.6 ) ) ) - ( ( ( ( ( -6.66666666666667E-4 * M_PI ) * cos ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 0] ) ) ) ) ) + 0.002 ) * ( ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 0] ) ) ) ) ) + 0.3 ) ) * ( ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 0] ) ) ) ) ) + 0.6 ) ) ) + ( ( ( ( ( 6.66666666666667E-5 * M_PI ) * ( ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 0] ) ) ) ) ) + 0.3 ) ) * cos ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 0] ) ) ) ) ) + ( ( ( 6.66666666666667E-5 * M_PI ) * ( ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 0] ) ) ) ) ) + 0.6 ) ) * cos ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 0] ) ) ) ) ) ) * ( ( ( ( 0.001 * vf_nodePosition_0@[1, 0] ) + ( 0.002 * vf_nodePosition_1@[1, 0] ) ) - ( 0.4 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 0] ) ) ) ) ) ) + 17.3 ) ) ) + ( ( ( ( 6.66666666666667E-5 * M_PI ) * ( ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 0] ) ) ) ) ) + 0.6 ) ) * ( ( ( ( 0.002 * vf_nodePosition_0@[1, 0] ) + ( 0.004 * vf_nodePosition_1@[1, 0] ) ) - ( 0.8 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 0] ) ) ) ) ) ) + 34.6 ) ) * cos ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 0] ) ) ) ) ) ) / ( ( ( ( ( 0.001 * vf_nodePosition_0@[1, 0] ) + ( 0.002 * vf_nodePosition_1@[1, 0] ) ) - ( 0.4 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 0] ) ) ) ) ) ) + 17.3 ) * ( ( ( ( 0.001 * vf_nodePosition_0@[1, 0] ) + ( 0.002 * vf_nodePosition_1@[1, 0] ) ) - ( 0.4 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 0] ) ) ) ) ) ) + 17.3 ) ) ) ) ) ) + ( ( 5.20833333333333 * 1.73205080756888 ) * ( ( ( ( ( 0.001 * g ) * ( ( ( ( 0.016 * 1.4142135623731 ) * cetaUpper0@[0, 0] ) + ( 0.032 * cetaUpper1@[0, 0] ) ) + ( ( 0.032 * 1.73205080756888 ) * cetaUpper2@[0, 0] ) ) ) - ( ( ( ( 6.66666666666667E-4 * M_PI ) * g ) * ( ( ( ( 0.001 * vf_nodePosition_0@[1, 1] ) + ( 0.002 * vf_nodePosition_1@[1, 1] ) ) - ( 0.4 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 1] ) ) ) ) ) ) + 17.3 ) ) * cos ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 1] ) ) ) ) ) ) + ( ( 1.33333333333333E-5 * M_PI ) * cos ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 1] ) ) ) ) ) ) + ( ( ( ( ( (-( ( ( -6.66666666666667E-4 * M_PI ) * cos ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 1] ) ) ) ) ) + 0.001 )) * ( ( ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 1] ) ) ) ) ) + 0.6 ) * ( ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 1] ) ) ) ) ) + 0.6 ) ) ) - ( ( ( ( ( -6.66666666666667E-4 * M_PI ) * cos ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 1] ) ) ) ) ) + 0.002 ) * ( ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 1] ) ) ) ) ) + 0.3 ) ) * ( ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 1] ) ) ) ) ) + 0.6 ) ) ) + ( ( ( ( ( 6.66666666666667E-5 * M_PI ) * ( ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 1] ) ) ) ) ) + 0.3 ) ) * cos ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 1] ) ) ) ) ) + ( ( ( 6.66666666666667E-5 * M_PI ) * ( ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 1] ) ) ) ) ) + 0.6 ) ) * cos ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 1] ) ) ) ) ) ) * ( ( ( ( 0.001 * vf_nodePosition_0@[1, 1] ) + ( 0.002 * vf_nodePosition_1@[1, 1] ) ) - ( 0.4 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 1] ) ) ) ) ) ) + 17.3 ) ) ) + ( ( ( ( 6.66666666666667E-5 * M_PI ) * ( ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 1] ) ) ) ) ) + 0.6 ) ) * ( ( ( ( 0.002 * vf_nodePosition_0@[1, 1] ) + ( 0.004 * vf_nodePosition_1@[1, 1] ) ) - ( 0.8 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 1] ) ) ) ) ) ) + 34.6 ) ) * cos ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 1] ) ) ) ) ) ) / ( ( ( ( ( 0.001 * vf_nodePosition_0@[1, 1] ) + ( 0.002 * vf_nodePosition_1@[1, 1] ) ) - ( 0.4 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 1] ) ) ) ) ) ) + 17.3 ) * ( ( ( ( 0.001 * vf_nodePosition_0@[1, 1] ) + ( 0.002 * vf_nodePosition_1@[1, 1] ) ) - ( 0.4 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 1] ) ) ) ) ) ) + 17.3 ) ) ) ) ) )
			cvNewUpper2 = ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( 0.0106666666666667 * 2.44948974278318 ) * bath@[0, 1] ) * cetaUpper0@[0, 0] ) * g ) - ( ( ( ( 0.0106666666666667 * 1.73205080756888 ) * bath@[0, 1] ) * cetaUpper1@[0, 0] ) * g ) ) + ( ( ( ( 0.0106666666666667 * 2.44948974278318 ) * bath@[1, 0] ) * cetaUpper0@[0, 0] ) * g ) ) + ( ( ( ( 0.00533333333333333 * 1.73205080756888 ) * bath@[1, 0] ) * cetaUpper1@[0, 0] ) * g ) ) - ( ( ( 0.016 * bath@[1, 0] ) * cetaUpper2@[0, 0] ) * g ) ) + ( ( ( ( 0.0106666666666667 * 2.44948974278318 ) * bath@[1, 1] ) * cetaUpper0@[0, 0] ) * g ) ) + ( ( ( ( 0.00533333333333333 * 1.73205080756888 ) * bath@[1, 1] ) * cetaUpper1@[0, 0] ) * g ) ) + ( ( ( 0.016 * bath@[1, 1] ) * cetaUpper2@[0, 0] ) * g ) ) + ( ( ( 5.12E-4 * 1.73205080756888 ) * ( cetaUpper0@[0, 0] * cetaUpper0@[0, 0] ) ) * g ) ) + ( ( ( 5.12E-4 * 1.73205080756888 ) * ( cetaUpper1@[0, 0] * cetaUpper1@[0, 0] ) ) * g ) ) + ( ( ( 5.12E-4 * 1.73205080756888 ) * ( cetaUpper2@[0, 0] * cetaUpper2@[0, 0] ) ) * g ) ) + ( ( ( 5.12E-4 * 1.73205080756888 ) * cuTildeUpper0@[0, 0] ) * cvUpper0@[0, 0] ) ) + ( ( ( 5.12E-4 * 1.73205080756888 ) * cuTildeUpper1@[0, 0] ) * cvUpper1@[0, 0] ) ) + ( ( ( 5.12E-4 * 1.73205080756888 ) * cuTildeUpper2@[0, 0] ) * cvUpper2@[0, 0] ) ) - ( 0.016 * cvEdgeDUpper2@[0, 0] ) ) - ( 0.016 * cvEdgeHUpper2@[0, 1] ) ) - ( 0.016 * cvEdgeVUpper2@[1, 0] ) ) + ( ( ( 0.001024 * 1.73205080756888 ) * cvTildeUpper0@[0, 0] ) * cvUpper0@[0, 0] ) ) + ( ( ( 0.001024 * 1.73205080756888 ) * cvTildeUpper1@[0, 0] ) * cvUpper1@[0, 0] ) ) + ( ( ( 0.001024 * 1.73205080756888 ) * cvTildeUpper2@[0, 0] ) * cvUpper2@[0, 0] ) ) - ( ( 5.20833333333333 * 1.73205080756888 ) * ( ( ( ( ( 0.002 * g ) * ( ( ( ( 0.016 * 1.4142135623731 ) * cetaUpper0@[0, 0] ) + ( 0.032 * cetaUpper1@[0, 0] ) ) - ( ( 0.032 * 1.73205080756888 ) * cetaUpper2@[0, 0] ) ) ) - ( ( ( ( 6.66666666666667E-4 * M_PI ) * g ) * ( ( ( ( 0.001 * vf_nodePosition_0@[1, 0] ) + ( 0.002 * vf_nodePosition_1@[1, 0] ) ) - ( 0.4 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 0] ) ) ) ) ) ) + 17.3 ) ) * cos ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 0] ) ) ) ) ) ) + ( ( 1.33333333333333E-5 * M_PI ) * cos ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 0] ) ) ) ) ) ) + ( ( ( ( ( ( (-( ( ( -6.66666666666667E-4 * M_PI ) * cos ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 0] ) ) ) ) ) + 0.001 )) * ( ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 0] ) ) ) ) ) + 0.3 ) ) * ( ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 0] ) ) ) ) ) + 0.6 ) ) - ( ( ( ( -6.66666666666667E-4 * M_PI ) * cos ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 0] ) ) ) ) ) + 0.002 ) * ( ( ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 0] ) ) ) ) ) + 0.3 ) * ( ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 0] ) ) ) ) ) + 0.3 ) ) ) ) + ( ( ( ( ( 6.66666666666667E-5 * M_PI ) * ( ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 0] ) ) ) ) ) + 0.3 ) ) * cos ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 0] ) ) ) ) ) + ( ( ( 6.66666666666667E-5 * M_PI ) * ( ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 0] ) ) ) ) ) + 0.6 ) ) * cos ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 0] ) ) ) ) ) ) * ( ( ( ( 0.001 * vf_nodePosition_0@[1, 0] ) + ( 0.002 * vf_nodePosition_1@[1, 0] ) ) - ( 0.4 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 0] ) ) ) ) ) ) + 17.3 ) ) ) + ( ( ( ( 6.66666666666667E-5 * M_PI ) * ( ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 0] ) ) ) ) ) + 0.3 ) ) * ( ( ( ( 0.002 * vf_nodePosition_0@[1, 0] ) + ( 0.004 * vf_nodePosition_1@[1, 0] ) ) - ( 0.8 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 0] ) ) ) ) ) ) + 34.6 ) ) * cos ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 0] ) ) ) ) ) ) / ( ( ( ( ( 0.001 * vf_nodePosition_0@[1, 0] ) + ( 0.002 * vf_nodePosition_1@[1, 0] ) ) - ( 0.4 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 0] ) ) ) ) ) ) + 17.3 ) * ( ( ( ( 0.001 * vf_nodePosition_0@[1, 0] ) + ( 0.002 * vf_nodePosition_1@[1, 0] ) ) - ( 0.4 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 0] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 0] ) ) ) ) ) ) + 17.3 ) ) ) ) ) ) + ( ( 5.20833333333333 * 1.73205080756888 ) * ( ( ( ( ( 0.002 * g ) * ( ( ( ( 0.016 * 1.4142135623731 ) * cetaUpper0@[0, 0] ) + ( 0.032 * cetaUpper1@[0, 0] ) ) + ( ( 0.032 * 1.73205080756888 ) * cetaUpper2@[0, 0] ) ) ) - ( ( ( ( 6.66666666666667E-4 * M_PI ) * g ) * ( ( ( ( 0.001 * vf_nodePosition_0@[1, 1] ) + ( 0.002 * vf_nodePosition_1@[1, 1] ) ) - ( 0.4 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 1] ) ) ) ) ) ) + 17.3 ) ) * cos ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 1] ) ) ) ) ) ) + ( ( 1.33333333333333E-5 * M_PI ) * cos ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 1] ) ) ) ) ) ) + ( ( ( ( ( ( (-( ( ( -6.66666666666667E-4 * M_PI ) * cos ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 1] ) ) ) ) ) + 0.001 )) * ( ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 1] ) ) ) ) ) + 0.3 ) ) * ( ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 1] ) ) ) ) ) + 0.6 ) ) - ( ( ( ( -6.66666666666667E-4 * M_PI ) * cos ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 1] ) ) ) ) ) + 0.002 ) * ( ( ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 1] ) ) ) ) ) + 0.3 ) * ( ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 1] ) ) ) ) ) + 0.3 ) ) ) ) + ( ( ( ( ( 6.66666666666667E-5 * M_PI ) * ( ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 1] ) ) ) ) ) + 0.3 ) ) * cos ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 1] ) ) ) ) ) + ( ( ( 6.66666666666667E-5 * M_PI ) * ( ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 1] ) ) ) ) ) + 0.6 ) ) * cos ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 1] ) ) ) ) ) ) * ( ( ( ( 0.001 * vf_nodePosition_0@[1, 1] ) + ( 0.002 * vf_nodePosition_1@[1, 1] ) ) - ( 0.4 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 1] ) ) ) ) ) ) + 17.3 ) ) ) + ( ( ( ( 6.66666666666667E-5 * M_PI ) * ( ( 0.04 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 1] ) ) ) ) ) + 0.3 ) ) * ( ( ( ( 0.002 * vf_nodePosition_0@[1, 1] ) + ( 0.004 * vf_nodePosition_1@[1, 1] ) ) - ( 0.8 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 1] ) ) ) ) ) ) + 34.6 ) ) * cos ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 1] ) ) ) ) ) ) / ( ( ( ( ( 0.001 * vf_nodePosition_0@[1, 1] ) + ( 0.002 * vf_nodePosition_1@[1, 1] ) ) - ( 0.4 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 1] ) ) ) ) ) ) + 17.3 ) * ( ( ( ( 0.001 * vf_nodePosition_0@[1, 1] ) + ( 0.002 * vf_nodePosition_1@[1, 1] ) ) - ( 0.4 * sin ( ( M_PI * ( ( ( 3.33333333333333E-4 * t ) + ( 0.00166666666666667 * vf_nodePosition_0@[1, 1] ) ) + ( 0.00166666666666667 * vf_nodePosition_1@[1, 1] ) ) ) ) ) ) + 17.3 ) ) ) ) ) )
		}
	}
	stopTimer ( "UpdateUnknowns" )
}

Function AdvanceRK2@all {
	startTimer ( "AdvanceRK2" )
	UpdateUnknowns (  )
	loop over cetaLower0 {
		cetaOldLower0 = cetaLower0
		cetaLower0 += ( cetaNewLower0 * dt )
		cetaOldLower1 = cetaLower1
		cetaLower1 += ( cetaNewLower1 * dt )
		cetaOldLower2 = cetaLower2
		cetaLower2 += ( cetaNewLower2 * dt )
		cuOldLower0 = cuLower0
		cuLower0 += ( cuNewLower0 * dt )
		cuOldLower1 = cuLower1
		cuLower1 += ( cuNewLower1 * dt )
		cuOldLower2 = cuLower2
		cuLower2 += ( cuNewLower2 * dt )
		cvOldLower0 = cvLower0
		cvLower0 += ( cvNewLower0 * dt )
		cvOldLower1 = cvLower1
		cvLower1 += ( cvNewLower1 * dt )
		cvOldLower2 = cvLower2
		cvLower2 += ( cvNewLower2 * dt )
		cetaOldUpper0 = cetaUpper0
		cetaUpper0 += ( cetaNewUpper0 * dt )
		cetaOldUpper1 = cetaUpper1
		cetaUpper1 += ( cetaNewUpper1 * dt )
		cetaOldUpper2 = cetaUpper2
		cetaUpper2 += ( cetaNewUpper2 * dt )
		cuOldUpper0 = cuUpper0
		cuUpper0 += ( cuNewUpper0 * dt )
		cuOldUpper1 = cuUpper1
		cuUpper1 += ( cuNewUpper1 * dt )
		cuOldUpper2 = cuUpper2
		cuUpper2 += ( cuNewUpper2 * dt )
		cvOldUpper0 = cvUpper0
		cvUpper0 += ( cvNewUpper0 * dt )
		cvOldUpper1 = cvUpper1
		cvUpper1 += ( cvNewUpper1 * dt )
		cvOldUpper2 = cvUpper2
		cvUpper2 += ( cvNewUpper2 * dt )
	}
	t += dt
	UpdateCTilde (  )
	CommunicateAll (  )
	ApplyAllBc (  )
	UpdateUnknowns (  )
	loop over cetaLower0 {
		cetaLower0 = ( ( ( 0.5 * cetaLower0 ) + ( ( 0.5 * cetaNewLower0 ) * dt ) ) + ( 0.5 * cetaOldLower0 ) )
		cetaLower1 = ( ( ( 0.5 * cetaLower1 ) + ( ( 0.5 * cetaNewLower1 ) * dt ) ) + ( 0.5 * cetaOldLower1 ) )
		cetaLower2 = ( ( ( 0.5 * cetaLower2 ) + ( ( 0.5 * cetaNewLower2 ) * dt ) ) + ( 0.5 * cetaOldLower2 ) )
		cuLower0 = ( ( ( 0.5 * cuLower0 ) + ( ( 0.5 * cuNewLower0 ) * dt ) ) + ( 0.5 * cuOldLower0 ) )
		cuLower1 = ( ( ( 0.5 * cuLower1 ) + ( ( 0.5 * cuNewLower1 ) * dt ) ) + ( 0.5 * cuOldLower1 ) )
		cuLower2 = ( ( ( 0.5 * cuLower2 ) + ( ( 0.5 * cuNewLower2 ) * dt ) ) + ( 0.5 * cuOldLower2 ) )
		cvLower0 = ( ( ( 0.5 * cvLower0 ) + ( ( 0.5 * cvNewLower0 ) * dt ) ) + ( 0.5 * cvOldLower0 ) )
		cvLower1 = ( ( ( 0.5 * cvLower1 ) + ( ( 0.5 * cvNewLower1 ) * dt ) ) + ( 0.5 * cvOldLower1 ) )
		cvLower2 = ( ( ( 0.5 * cvLower2 ) + ( ( 0.5 * cvNewLower2 ) * dt ) ) + ( 0.5 * cvOldLower2 ) )
		cetaUpper0 = ( ( ( ( 0.5 * cetaNewUpper0 ) * dt ) + ( 0.5 * cetaOldUpper0 ) ) + ( 0.5 * cetaUpper0 ) )
		cetaUpper1 = ( ( ( ( 0.5 * cetaNewUpper1 ) * dt ) + ( 0.5 * cetaOldUpper1 ) ) + ( 0.5 * cetaUpper1 ) )
		cetaUpper2 = ( ( ( ( 0.5 * cetaNewUpper2 ) * dt ) + ( 0.5 * cetaOldUpper2 ) ) + ( 0.5 * cetaUpper2 ) )
		cuUpper0 = ( ( ( ( 0.5 * cuNewUpper0 ) * dt ) + ( 0.5 * cuOldUpper0 ) ) + ( 0.5 * cuUpper0 ) )
		cuUpper1 = ( ( ( ( 0.5 * cuNewUpper1 ) * dt ) + ( 0.5 * cuOldUpper1 ) ) + ( 0.5 * cuUpper1 ) )
		cuUpper2 = ( ( ( ( 0.5 * cuNewUpper2 ) * dt ) + ( 0.5 * cuOldUpper2 ) ) + ( 0.5 * cuUpper2 ) )
		cvUpper0 = ( ( ( ( 0.5 * cvNewUpper0 ) * dt ) + ( 0.5 * cvOldUpper0 ) ) + ( 0.5 * cvUpper0 ) )
		cvUpper1 = ( ( ( ( 0.5 * cvNewUpper1 ) * dt ) + ( 0.5 * cvOldUpper1 ) ) + ( 0.5 * cvUpper1 ) )
		cvUpper2 = ( ( ( ( 0.5 * cvNewUpper2 ) * dt ) + ( 0.5 * cvOldUpper2 ) ) + ( 0.5 * cvUpper2 ) )
	}
	UpdateCTilde (  )
	CommunicateAll (  )
	ApplyAllBc (  )
	stopTimer ( "AdvanceRK2" )
}

Function SolvePhase@all {
	startTimer ( "SolvePhase" )
	repeat while ( t < ( tMax - 1.0E-7 ) ) {
		startTimer ( "timeLoop" )
		AdvanceRK2 (  )
		it += 1
		stopTimer ( "timeLoop" )
		if ( ( ( fmod ( t, printInterval ) < ( 0.1 * dt ) ) || ( fmod ( t, printInterval ) > ( ( -0.1 * dt ) + printInterval ) ) ) ) {
			startTimer ( "print" )
			print ( "t:", t, ", dt", dt )
			PrintError (  )
			print ( "------------------" )
			PrintDebugFields (  )
			PrintVTK (  )
			stopTimer ( "print" )
			print_count += 1
		}
	}
	stopTimer ( "SolvePhase" )
}

Function Application {
	initGlobals (  )
	startTimer ( "setup" )
	readParameterFile ( "../swe_o1_rk2_l4_noPloy_uniform.parameter" )
	initDomain (  )
	initFieldsWithZero (  )
	initGeometry (  )
	stopTimer ( "setup" )
	SetupPhase@4 (  )
	SolvePhase@4 (  )
	reduceTimers (  )
	printAllTimers (  )
	destroyGlobals (  )
}

Layout DefaultNodeLayout< Real, Node >@all {
	duplicateLayers = [1, 1] with communication
	ghostLayers = [1, 1] with communication
}

Layout DefaultCellLayout< Real, Cell >@all {
	duplicateLayers = [0, 0]
	ghostLayers = [1, 1] with communication
}

Layout DefaultFaceXLayout< Real, Face_x >@all {
	duplicateLayers = [1, 0] with communication
	ghostLayers = [1, 1] with communication
}

Layout DefaultFaceYLayout< Real, Face_y >@all {
	duplicateLayers = [0, 1] with communication
	ghostLayers = [1, 1] with communication
}

Field bath< global, DefaultNodeLayout, None>@all

Field cetaLower0< global, DefaultCellLayout, None>@all

Field cetaLower1< global, DefaultCellLayout, None>@all

Field cetaLower2< global, DefaultCellLayout, None>@all

Field cetaUpper0< global, DefaultCellLayout, None>@all

Field cetaUpper1< global, DefaultCellLayout, None>@all

Field cetaUpper2< global, DefaultCellLayout, None>@all

FieldCombination ceta0 : "Triangles" = cetaLower0, cetaUpper0

FieldCombination ceta1 : "Triangles" = cetaLower1, cetaUpper1

FieldCombination ceta2 : "Triangles" = cetaLower2, cetaUpper2

Field cuLower0< global, DefaultCellLayout, None>@all

Field cuLower1< global, DefaultCellLayout, None>@all

Field cuLower2< global, DefaultCellLayout, None>@all

Field cuUpper0< global, DefaultCellLayout, None>@all

Field cuUpper1< global, DefaultCellLayout, None>@all

Field cuUpper2< global, DefaultCellLayout, None>@all

FieldCombination cu0 : "Triangles" = cuLower0, cuUpper0

FieldCombination cu1 : "Triangles" = cuLower1, cuUpper1

FieldCombination cu2 : "Triangles" = cuLower2, cuUpper2

Field cvLower0< global, DefaultCellLayout, None>@all

Field cvLower1< global, DefaultCellLayout, None>@all

Field cvLower2< global, DefaultCellLayout, None>@all

Field cvUpper0< global, DefaultCellLayout, None>@all

Field cvUpper1< global, DefaultCellLayout, None>@all

Field cvUpper2< global, DefaultCellLayout, None>@all

FieldCombination cv0 : "Triangles" = cvLower0, cvUpper0

FieldCombination cv1 : "Triangles" = cvLower1, cvUpper1

FieldCombination cv2 : "Triangles" = cvLower2, cvUpper2

Field cuTildeLower0< global, DefaultCellLayout, None>@all

Field cuTildeLower1< global, DefaultCellLayout, None>@all

Field cuTildeLower2< global, DefaultCellLayout, None>@all

Field cuTildeUpper0< global, DefaultCellLayout, None>@all

Field cuTildeUpper1< global, DefaultCellLayout, None>@all

Field cuTildeUpper2< global, DefaultCellLayout, None>@all

FieldCombination cuTilde0 : "Triangles" = cuTildeLower0, cuTildeUpper0

FieldCombination cuTilde1 : "Triangles" = cuTildeLower1, cuTildeUpper1

FieldCombination cuTilde2 : "Triangles" = cuTildeLower2, cuTildeUpper2

Field cvTildeLower0< global, DefaultCellLayout, None>@all

Field cvTildeLower1< global, DefaultCellLayout, None>@all

Field cvTildeLower2< global, DefaultCellLayout, None>@all

Field cvTildeUpper0< global, DefaultCellLayout, None>@all

Field cvTildeUpper1< global, DefaultCellLayout, None>@all

Field cvTildeUpper2< global, DefaultCellLayout, None>@all

FieldCombination cvTilde0 : "Triangles" = cvTildeLower0, cvTildeUpper0

FieldCombination cvTilde1 : "Triangles" = cvTildeLower1, cvTildeUpper1

FieldCombination cvTilde2 : "Triangles" = cvTildeLower2, cvTildeUpper2

Field local_orderLower0< global, DefaultCellLayout, None>@all

Field local_orderUpper0< global, DefaultCellLayout, None>@all

FieldCombination local_order0 : "Triangles" = local_orderLower0, local_orderUpper0

Field adaptivity_nlockLower0< global, DefaultCellLayout, None>@all

Field adaptivity_nlockUpper0< global, DefaultCellLayout, None>@all

FieldCombination adaptivity_nlock0 : "Triangles" = adaptivity_nlockLower0, adaptivity_nlockUpper0

Field etaDiscLower0< global, DefaultCellLayout, None>@all

Field etaDiscLower1< global, DefaultCellLayout, None>@all

Field etaDiscLower2< global, DefaultCellLayout, None>@all

Field etaDiscUpper0< global, DefaultCellLayout, None>@all

Field etaDiscUpper1< global, DefaultCellLayout, None>@all

Field etaDiscUpper2< global, DefaultCellLayout, None>@all

FieldCombination etaDisc0 : "Triangles" = etaDiscLower0, etaDiscUpper0

FieldCombination etaDisc1 : "Triangles" = etaDiscLower1, etaDiscUpper1

FieldCombination etaDisc2 : "Triangles" = etaDiscLower2, etaDiscUpper2

Field uDiscLower0< global, DefaultCellLayout, None>@all

Field uDiscLower1< global, DefaultCellLayout, None>@all

Field uDiscLower2< global, DefaultCellLayout, None>@all

Field uDiscUpper0< global, DefaultCellLayout, None>@all

Field uDiscUpper1< global, DefaultCellLayout, None>@all

Field uDiscUpper2< global, DefaultCellLayout, None>@all

FieldCombination uDisc0 : "Triangles" = uDiscLower0, uDiscUpper0

FieldCombination uDisc1 : "Triangles" = uDiscLower1, uDiscUpper1

FieldCombination uDisc2 : "Triangles" = uDiscLower2, uDiscUpper2

Field vDiscLower0< global, DefaultCellLayout, None>@all

Field vDiscLower1< global, DefaultCellLayout, None>@all

Field vDiscLower2< global, DefaultCellLayout, None>@all

Field vDiscUpper0< global, DefaultCellLayout, None>@all

Field vDiscUpper1< global, DefaultCellLayout, None>@all

Field vDiscUpper2< global, DefaultCellLayout, None>@all

FieldCombination vDisc0 : "Triangles" = vDiscLower0, vDiscUpper0

FieldCombination vDisc1 : "Triangles" = vDiscLower1, vDiscUpper1

FieldCombination vDisc2 : "Triangles" = vDiscLower2, vDiscUpper2

Field cetaOldLower0< global, DefaultCellLayout, None>@all

Field cetaOldLower1< global, DefaultCellLayout, None>@all

Field cetaOldLower2< global, DefaultCellLayout, None>@all

Field cetaOldUpper0< global, DefaultCellLayout, None>@all

Field cetaOldUpper1< global, DefaultCellLayout, None>@all

Field cetaOldUpper2< global, DefaultCellLayout, None>@all

FieldCombination cetaOld0 : "Triangles" = cetaOldLower0, cetaOldUpper0

FieldCombination cetaOld1 : "Triangles" = cetaOldLower1, cetaOldUpper1

FieldCombination cetaOld2 : "Triangles" = cetaOldLower2, cetaOldUpper2

Field cuOldLower0< global, DefaultCellLayout, None>@all

Field cuOldLower1< global, DefaultCellLayout, None>@all

Field cuOldLower2< global, DefaultCellLayout, None>@all

Field cuOldUpper0< global, DefaultCellLayout, None>@all

Field cuOldUpper1< global, DefaultCellLayout, None>@all

Field cuOldUpper2< global, DefaultCellLayout, None>@all

FieldCombination cuOld0 : "Triangles" = cuOldLower0, cuOldUpper0

FieldCombination cuOld1 : "Triangles" = cuOldLower1, cuOldUpper1

FieldCombination cuOld2 : "Triangles" = cuOldLower2, cuOldUpper2

Field cvOldLower0< global, DefaultCellLayout, None>@all

Field cvOldLower1< global, DefaultCellLayout, None>@all

Field cvOldLower2< global, DefaultCellLayout, None>@all

Field cvOldUpper0< global, DefaultCellLayout, None>@all

Field cvOldUpper1< global, DefaultCellLayout, None>@all

Field cvOldUpper2< global, DefaultCellLayout, None>@all

FieldCombination cvOld0 : "Triangles" = cvOldLower0, cvOldUpper0

FieldCombination cvOld1 : "Triangles" = cvOldLower1, cvOldUpper1

FieldCombination cvOld2 : "Triangles" = cvOldLower2, cvOldUpper2

Field cetaNewLower0< global, DefaultCellLayout, None>@all

Field cetaNewLower1< global, DefaultCellLayout, None>@all

Field cetaNewLower2< global, DefaultCellLayout, None>@all

Field cetaNewUpper0< global, DefaultCellLayout, None>@all

Field cetaNewUpper1< global, DefaultCellLayout, None>@all

Field cetaNewUpper2< global, DefaultCellLayout, None>@all

FieldCombination cetaNew0 : "Triangles" = cetaNewLower0, cetaNewUpper0

FieldCombination cetaNew1 : "Triangles" = cetaNewLower1, cetaNewUpper1

FieldCombination cetaNew2 : "Triangles" = cetaNewLower2, cetaNewUpper2

Field cuNewLower0< global, DefaultCellLayout, None>@all

Field cuNewLower1< global, DefaultCellLayout, None>@all

Field cuNewLower2< global, DefaultCellLayout, None>@all

Field cuNewUpper0< global, DefaultCellLayout, None>@all

Field cuNewUpper1< global, DefaultCellLayout, None>@all

Field cuNewUpper2< global, DefaultCellLayout, None>@all

FieldCombination cuNew0 : "Triangles" = cuNewLower0, cuNewUpper0

FieldCombination cuNew1 : "Triangles" = cuNewLower1, cuNewUpper1

FieldCombination cuNew2 : "Triangles" = cuNewLower2, cuNewUpper2

Field cvNewLower0< global, DefaultCellLayout, None>@all

Field cvNewLower1< global, DefaultCellLayout, None>@all

Field cvNewLower2< global, DefaultCellLayout, None>@all

Field cvNewUpper0< global, DefaultCellLayout, None>@all

Field cvNewUpper1< global, DefaultCellLayout, None>@all

Field cvNewUpper2< global, DefaultCellLayout, None>@all

FieldCombination cvNew0 : "Triangles" = cvNewLower0, cvNewUpper0

FieldCombination cvNew1 : "Triangles" = cvNewLower1, cvNewUpper1

FieldCombination cvNew2 : "Triangles" = cvNewLower2, cvNewUpper2

Field cetaEdgeDLower0< global, DefaultCellLayout, None>@all

Field cetaEdgeDLower1< global, DefaultCellLayout, None>@all

Field cetaEdgeDLower2< global, DefaultCellLayout, None>@all

Field cuEdgeDLower0< global, DefaultCellLayout, None>@all

Field cuEdgeDLower1< global, DefaultCellLayout, None>@all

Field cuEdgeDLower2< global, DefaultCellLayout, None>@all

Field cvEdgeDLower0< global, DefaultCellLayout, None>@all

Field cvEdgeDLower1< global, DefaultCellLayout, None>@all

Field cvEdgeDLower2< global, DefaultCellLayout, None>@all

Field cetaEdgeDUpper0< global, DefaultCellLayout, None>@all

Field cetaEdgeDUpper1< global, DefaultCellLayout, None>@all

Field cetaEdgeDUpper2< global, DefaultCellLayout, None>@all

Field cuEdgeDUpper0< global, DefaultCellLayout, None>@all

Field cuEdgeDUpper1< global, DefaultCellLayout, None>@all

Field cuEdgeDUpper2< global, DefaultCellLayout, None>@all

Field cvEdgeDUpper0< global, DefaultCellLayout, None>@all

Field cvEdgeDUpper1< global, DefaultCellLayout, None>@all

Field cvEdgeDUpper2< global, DefaultCellLayout, None>@all

Field cetaEdgeVLower0< global, DefaultFaceXLayout, None>@all

Field cetaEdgeVLower1< global, DefaultFaceXLayout, None>@all

Field cetaEdgeVLower2< global, DefaultFaceXLayout, None>@all

Field cuEdgeVLower0< global, DefaultFaceXLayout, None>@all

Field cuEdgeVLower1< global, DefaultFaceXLayout, None>@all

Field cuEdgeVLower2< global, DefaultFaceXLayout, None>@all

Field cvEdgeVLower0< global, DefaultFaceXLayout, None>@all

Field cvEdgeVLower1< global, DefaultFaceXLayout, None>@all

Field cvEdgeVLower2< global, DefaultFaceXLayout, None>@all

Field cetaEdgeVUpper0< global, DefaultFaceXLayout, None>@all

Field cetaEdgeVUpper1< global, DefaultFaceXLayout, None>@all

Field cetaEdgeVUpper2< global, DefaultFaceXLayout, None>@all

Field cuEdgeVUpper0< global, DefaultFaceXLayout, None>@all

Field cuEdgeVUpper1< global, DefaultFaceXLayout, None>@all

Field cuEdgeVUpper2< global, DefaultFaceXLayout, None>@all

Field cvEdgeVUpper0< global, DefaultFaceXLayout, None>@all

Field cvEdgeVUpper1< global, DefaultFaceXLayout, None>@all

Field cvEdgeVUpper2< global, DefaultFaceXLayout, None>@all

Field cetaEdgeHLower0< global, DefaultFaceYLayout, None>@all

Field cetaEdgeHLower1< global, DefaultFaceYLayout, None>@all

Field cetaEdgeHLower2< global, DefaultFaceYLayout, None>@all

Field cuEdgeHLower0< global, DefaultFaceYLayout, None>@all

Field cuEdgeHLower1< global, DefaultFaceYLayout, None>@all

Field cuEdgeHLower2< global, DefaultFaceYLayout, None>@all

Field cvEdgeHLower0< global, DefaultFaceYLayout, None>@all

Field cvEdgeHLower1< global, DefaultFaceYLayout, None>@all

Field cvEdgeHLower2< global, DefaultFaceYLayout, None>@all

Field cetaEdgeHUpper0< global, DefaultFaceYLayout, None>@all

Field cetaEdgeHUpper1< global, DefaultFaceYLayout, None>@all

Field cetaEdgeHUpper2< global, DefaultFaceYLayout, None>@all

Field cuEdgeHUpper0< global, DefaultFaceYLayout, None>@all

Field cuEdgeHUpper1< global, DefaultFaceYLayout, None>@all

Field cuEdgeHUpper2< global, DefaultFaceYLayout, None>@all

Field cvEdgeHUpper0< global, DefaultFaceYLayout, None>@all

Field cvEdgeHUpper1< global, DefaultFaceYLayout, None>@all

Field cvEdgeHUpper2< global, DefaultFaceYLayout, None>@all

