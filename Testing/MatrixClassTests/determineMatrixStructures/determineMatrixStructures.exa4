
Domain global< [ 0, 0 ] to [ 0.1, 0.1 ] >

Globals {
	
}

/// main function

Function Application ( ) : Unit {
/*
	// input matrices
	Var mat : Matrix<Int, 2, 2> = {{1,2},{3,4}}	

	Var diagM : Matrix<Double, 3, 3> = {{1, 0,   0},
    					   {0, -1, 0},
    				           {0,  0, 3}}

	Var blockdiagM : Matrix<Double, 4, 4> = {{1,  2, 0, 0},
 	   					{1, -1, 0, 0},
    						{0,  0, 3, 2},
 						{0,  0, 3, 2}}
	
	
	Var schurM : Matrix<Double, 5, 5> = {{1,  2, 0, 0, 1},
	   				     {1, -1, 0, 0, 1},
    					     {0,  0, 3, 2, 1},
    					     {0,  0, 3, 2, 1},
    					     {1,  2, 3, 2, 1}}
	
	// should say filled
	Var inverse0 : Matrix<Int, 2, 2> = inverse(mat, "Determine")
	
	// should say diag
	Var mat_inverse1 : Matrix<Double, 3, 3> = inverse(diagM, "Determine")
	

	// should say blockdiag, 2
	Var mat_inverse2 : Matrix<Double, 4, 4> = inverse(blockdiagM, "Determine")
	
	// should say schur, 4, blockdiag, 2
	Var mat_inverse3 : Matrix<Double, 5, 5> = inverse(schurM, "Determine")
	
	// should say schur, 9 blockdiag, 3
	Var mat_inverse4 : Matrix<Double, 11, 11> = inverse({{1.0, 2.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 3.0}, {4.0, 2.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 1.0}, {1.0, 5.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.0, 5.0},{0.0, 0.0, 0.0, 4.0, 1.0, 3.0, 0.0, 0.0, 0.0, 3.0, 2.0}, {0.0, 0.0, 0.0, 1.0, 1.0, 2.0, 0.0, 0.0, 0.0, 5.0, 3.0}, {0.0, 0.0, 0.0, 4.0, 6.0, 7.0, 0.0, 0.0, 0.0, 7.0, 3.0},{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.0, 5.0, 7.0, 4.0, 5.0},{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.0, 1.0, 3.0, 1.0, 5.0}, {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 12.0, 5.0, 5.0, 5.0}, {4.0, 1.0, 7.0, 2.0, 4.0, 6.0, 2.0, 1.0, 5.0, 8.0, 1.0}, {4.0, 1.0, 7.0, 2.0, 5.0, 7.0, 2.0, 2.0, 1.0, 8.0, 4.0}},"Determine")
	Var mat_sol : Matrix<Real, 11, 11> =  {{-0.94232288805511146337,0.38271086479726128984,0.21396930301035447809,0.16029010698221935421,-0.31247520557081505185,-0.1068600713214795695,0.60685304510721462542,-0.22389734376672103896,-0.28796506782458677779,-0.54645786919783333213,0.59583540066176128867},{-0.62415969179781365828,0.0235805155511740804,0.43551556738842101506,0.0037795627965197539209,-0.052200448164374499374,-0.0025197085310131692777,-0.056257276185349370449,0.012605028391310410599,0.022990313552918743478,0.054363441201936640887,-0.030782925650762560487},{1.544492691115730397,-0.296400308288662825,-0.50662355813976113047,-0.089315073823892803858,0.045220715009182721701,0.059543382549261869265,-0.5410228222248885809,0.17617529647921807981,0.24607531885500812361,0.49783106170421367511,-0.4608980366595431668},{1.8651242504921052384,-0.15122629058044096531	,-0.65531392584857751615,0.15818548557085828975,-0.24179473293359578923,0.2278763429527611402,-0.60077374833397650278,0.25128012219127084784,0.2985465650759317602,0.52751735745162451528,-0.67874364803206548061},{2.7578209871939137858,-0.22360710706977679349,-0.96896413063569943812,-0.3808862110004572446,-0.37827083785983675353,0.58725747400030482973,-0.7416439395659096739,0.32088828643605550523,0.3734081571104747887,0.64635225979265101287,-0.86995936686242780638},{-4.1468403114450544655,0.33623029552257198377,1.4569979472644785958,0.33519582059156400318,0.21394498149943736183,-0.5567972137277093355,1.2672869192428551519,-0.53504405436344120245,-0.63202851129653110462,-1.1104910026623947293,1.4467212981849667132},{-0.003299618314422007181,0.000267536620088270843,0.001159325353715840375,-0.047402624777458175149,0.062668426463101025127,0.031601749851638783444,-0.33818898786843035472,0.29107335691979414279,0.13379587442317483285,0.20621398389591690488,-0.20594644727582863405},{-0.18837820922336551342,0.015273908855948555145,0.066186938375777072279,0.021013785432387821091,-0.058566198288414068,-0.014009190288258547396,-0.034789489215842059328,-0.01872107766993436784,0.093073557977617724203,-0.045238010305834892637,0.060511919161783447784},{-0.3202429556797213729,0.025965645055112543755,0.1125177952388210229,0.035723435235059295868,-0.099562537090304148645,-0.023815623490039530582,0.34085786833306849921,-0.13182583203888847457,-0.14177495143804986888,-0.076904617519919317514,	0.10287026257503186127},{0.67486193488969384129,-0.054718535261326527694,-0.23711365279908161987,-0.1230522523340543311,0.27350674030139216342,	0.082034834889369554089,-0.41294682669139894125,0.15846923653155797128,0.19873106570375102574,0.36907082099692251844,-0.42378935625824904615},{0.098808570251873566781,-0.0080115056960978567542,-0.03471652468309071267,0.055856781972247534669,-0.058452697904134332649,-0.037237854648165023127,0.29085932762372352629,-0.09814216085274460154,-0.13385100318125362809,-0.26608057230136622055,0.2580690666052683638}}
	Var prec : Double = 0.0001
	compare(mat_inverse4,mat_sol,prec)

	// Filled
	Var bait0 : Matrix<Double, 4, 4> = {{1,  2, 0, 0},
 	   					{1, -1, 0, 0},
    						{0,  1, 3, 2},
 						{0,  0, 3, 2}}
	
	Var mat_inverse5 : Matrix<Double, 4, 4> = inverse(bait0, "Determine")
	// Filled

	Var bait1 : Matrix<Double, 4, 4> = {{1,  2, 0, 1},
 	   					{1, -1, 0, 1},
    						{0,  0, 3, 2},
 						{1,  1, 3, 2}}
	
	Var mat_inverse6 : Matrix<Double, 4, 4> = inverse(bait1, "Determine")
	// Blockdiagonal
	Var bait2 : Matrix<Double, 4, 4> = {{1,  2, 0, 0},
 	   					{0, -1, 0, 0},
    						{0,  0, 3, 2},
 						{0,  0, 3, 2}}
	Var mat_inverse7 : Matrix<Double, 4, 4> = inverse(bait2, "Determine")
	// Schur, 4, Diagonal

	Var bait3 : Matrix<Double, 5, 5> = {{1,  0, 0, 0, 1},
	   				     {0, 0, 0, 0, 0},
    					     {0,  0, 3, 0, 1},
    					     {0,  0, 0, 2, 1},
    					     {1,  0, 3, 2, 1}}
	Var mat_inverse8 : Matrix<Double, 5, 5> = inverse(bait3, "Determine")
	// Filled
	Var bait4 : Matrix<Double, 5, 5> = {{1,  1, 1, 0, 0},
	   				     {0, 1, 1, 0, 0},
    					     {1,  1, 3, 0, 0},
    					     {0,  0, 0, 2, 1},
    					     {0,  0, 0, 2, 1}}
	Var mat_inverse9 : Matrix<Double, 5, 5> = inverse(bait4, "Determine")
	// Filled
	Var bait5 : Matrix<Double, 5, 5> = {{1,  0, 0, 0, 1},
	   				     {0, 0, 0, 0, 0},
    					     {0,  0, 3, 0, 1},
    					     {0,  0, 0, 2, 1},
    					     {1,  0, 3, 2, 1}}

	Var mat_inverse10 : Matrix<Double, 5, 5> = inverse(bait5, "Determine")

*/
	// runtime determine structure tests
	// blockdiagonal
	Var t1 : Matrix<Double, 6, 6> = {{12.13, 2, 1.13, 0, 0, 0}, {4.13, 3, 4.113, 0, 0, 0}, {3.13, 3.141, 1, 0, 0, 0}, {0, 0, 0, 1.214, 4.52, 6.35},{0, 0, 0, 3.345, -1.345, 6.534}, {0, 0, 0, 4.435, 1.34, 3.13}}
	Var t_inverse : Matrix<Real, 6, 6> 
	t_inverse = inverse(t1, "DetermineRuntime")
	Var t_solution : Matrix<Double, 6, 6> = {{0.10041312053975431802,-0.01568445517737215864,-0.048956662065390690905,0,0,0	},{-0.088515689936835386734,-0.08699121025519204841,0.45781757740822888212,0,0,0},{-0.036265285197831065708,0.32233173611673308059,-0.28477065837457405616,0,0,0},{0,0,0,-0.09657015674202578739	,-0.04199793803709922053,0.28358946404034187114},{0,0,0,0.13785626153360208154,-0.18145848713743964156,0.099125397513628562347},{0,0,0,0.077815097346919353911,0.13719336356508120214,-0.1247754970246576588}}
	Var prec : Double = 0.01	
	compare(t_inverse,t_solution, prec)

	// diagonal
	Var t2 : Matrix<Double, 6, 6> = {{1.123, 0, 0, 0, 0, 0}, {0, 2.156, 0, 0, 0, 0}, {0, 0, 3.135, 0, 0, 0}, {0, 0, 0, 4.532, 0, 0}, {0, 0, 0, 0, 2.131, 0}, {0, 0, 0, 0, 0, 5.213}}
	Var t2_inverse : Matrix<Double,6,6> 
	t2_inverse = inverse(t2, "DetermineRuntime")
	Var t2_sol : Matrix<Double, 6, 6> = {{0.89047195013357079252,0,0,0,0,0},{0,0.46382189239332096474,0,0,0,0},{0,0,0.31897926634768740031,0,0,0},{0,0,0,0.22065313327449249779	,0,0},{0,0,0,0,0.46926325668700140778,0},{0,0,0,0,0,0.1918281220026855937}}
	compare(t2_inverse,t2_sol,prec)

	// filled 
	Var t3 : Matrix<Double, 4, 4> = {{1.0, 2, 1, 3}, {4, 2, 1, 2}, {4, 1, 3, 2}, {1, 1, 2, 3}}
	Var t3_inverse : Matrix<Double, 4 ,4>
	t3_inverse = inverse(t3, "DetermineRuntime")	
	Var t3_sol : Matrix<Real, 4, 4> = {{-0.7,0.6,-0.3,0.5},{2,-1,1,-2},{1,-1,1,-1},{-1.1,0.8,-0.9,1.5}}
	compare(t3_inverse,t3_sol,prec)


	// schur
	Var t4 : Matrix<Double, 7, 7> = {{1.0, 2, 1, 0, 0, 0, 3}, {4, 2, 1, 0, 0, 0, 1}, {1,5,1,0,0,0,5},{0, 0, 0, 4, 1, 3, 2}, {0, 0, 0, 1, 1, 2, 3}, {0,0,0,4,6,7,3},{3,5,7,4,4,5,1}}
	Var t4_inverse : Matrix<Double, 7, 7> 
	t4_inverse = inverse(t4, "DetermineRuntime")
	Var t4_sol : Matrix<Real, 7, 7> = {{0.090647482,0.2834532,-0.1122302,0.0172661,-0.0230215827,0.02589,-0.0374100},{-0.75731,0.049880,0.44556,-0.017266,0.023021582,-0.025899,0.0374100},{0.51606714,-0.1587529,-0.2738609,-0.060431,0.08057,-0.090647482,0.1309352},{0.9784172,-0.115107,-0.2589928,0.4244604,-0.89928057,0.1366906,-0.0863309},{1.71223021,-0.201438,-0.45323741,-0.007194,-1.323741,0.489208,-0.151079},{-2.299280,0.270503,0.608633,-0.2474820,1.6633093,-0.37122,0.2028776},{0.6359712,-0.07482,-0.1683453,0.025899,-0.0345323,0.03884892,-0.0561151}}
	compare(t4_inverse,t4_sol,0.001)

}

