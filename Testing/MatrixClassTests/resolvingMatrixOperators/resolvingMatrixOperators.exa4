
Domain global< [ 0, 0 ] to [ 0.1, 0.1 ] >

Globals {
	
}

/// main function

Function Application ( ) : Unit {
	// input matrices
	Var m1 : Matrix<Real, 2, 2> = {{1, 2}, {3, 4}}
	Var m2 : Matrix<Real, 2, 2> = {{1, 2}, {3, 4}}
	Var m3 : Matrix<Real, 2, 1> = {{1}, {2}}
	Var m4 : Matrix<Real, 1, 2> = {{1, 2}}
	Var m5 : Matrix<Real, 1, 4> = {{1, 2, 5, 1}}
	Var v1 : Double = 1	
	Var v2 : Double = 2	
	Var prec : Double = 0.0001
/*
	// add matrices
	Var addMatrices_res1 : Matrix<Double, 2, 2> = m2 + m1 
	Var addMatrices_sol1 : Matrix<Double, 2, 2> = {{2, 4},{6, 8}}
	compare(addMatrices_res1, addMatrices_sol1,prec)

	Var addMatrices_res2 : Matrix<Double, 2, 2> = m2 + m1 + m1 + m1
	Var addMatrices_sol2 : Matrix<Double, 2, 2> = {{4, 8},{12, 16}}
	compare(addMatrices_res2, addMatrices_sol2,prec)
	Var addMatrices_res3 : Matrix<Double, 2, 2> 
	addMatrices_res3 = m2 + m1 + m1 + m1
	compare(addMatrices_res3, addMatrices_sol2,prec)
	Var addMatrices_res4 : Matrix<Double, 2, 2> = m2 + m1 + 1
	Var addMatrices_res5 : Matrix<Double, 2, 2> = 1 + m1 + m1
	Var addMatrices_sol3 : Matrix<Double, 2, 2> = {{3, 5},{7, 9}}
	compare(addMatrices_res4, addMatrices_sol3,prec)
	compare(addMatrices_res5, addMatrices_sol3,prec)

	// mult matrices
	Var multMatrices_res1 : Matrix<Double, 2, 2> = m2 * m1 
	Var multMatrices_sol1 : Matrix<Double, 2, 2> = {{7, 10},{15, 22}}
	compare(multMatrices_res1, multMatrices_sol1,prec)

	Var multMatrices_res2 : Matrix<Double, 2, 2> = m2 * m1 * m1
	Var multMatrices_sol2 : Matrix<Double, 2, 2> = {{37, 54},{81, 118}}
	compare(multMatrices_res2, multMatrices_sol2,prec)

	Var multMatrices_res3 : Matrix<Double, 2, 1> = m1 * m3 
	Var multMatrices_sol3 : Matrix<Double, 2, 1> = {{5},{11}}
	compare(multMatrices_res3, multMatrices_sol3,prec)
*/	
	Var multMatrices_res4 : Matrix<Double, 1, 4> = m4 * m2 * m3 * m5
	Var multMatrices_sol4 : Matrix<Double, 1, 4> = {{27, 54, 135, 27}}
	compare(multMatrices_res4, multMatrices_sol4,prec)
	
/*
	// subtract matrices	
	Var subMatrices_res1 : Matrix<Double, 2, 2> = m2 - m1 
	Var subMatrices_sol1 : Matrix<Double, 2, 2> = {{0, 0},{0, 0}}
	compare(subMatrices_res1, subMatrices_sol1,prec)
	Var subMatrices_res2 : Matrix<Double, 2, 2> 
	subMatrices_res2 = m2 - 1
	Var subMatrices_sol2 : Matrix<Double, 2, 2> = {{0, 1},{2, 3}}
	subMatrices_res2 = m2 - v
	compare(subMatrices_res2, subMatrices_sol2 ,prec)


	// elementwise multiplication
	Var multelemMatrices_res1 : Matrix<Double, 2, 2> = m2 .* m1 
	Var multelemMatrices_res2 : Matrix<Double, 2, 2> = v2 .* m1
	Var multelemMatrices_res3 : Matrix<Double, 2, 2> = m1 .* v2
	Var multelemMatrices_sol1 : Matrix<Double, 2, 2> = {{1, 4},{9, 16}}
	Var multelemMatrices_sol2 : Matrix<Double, 2, 2> = {{2, 4},{6, 8}}
	compare(multelemMatrices_res1, multelemMatrices_sol1,prec)
	compare(multelemMatrices_res2, multelemMatrices_sol2,prec)
	compare(multelemMatrices_res3, multelemMatrices_sol2,prec)

	// elementwise division
	Var divelemMatrices_res1 : Matrix<Double, 2, 2> = m2 ./ m1 
	Var divelemMatrices_res2 : Matrix<Double, 2, 2> = v1 ./ m1
	Var divelemMatrices_res3 : Matrix<Double, 2, 2> = m1 ./ v2
	Var divelemMatrices_sol1 : Matrix<Double, 2, 2> = {{1, 1},{1, 1}}
	Var divelemMatrices_sol2 : Matrix<Double, 2, 2> = {{1, 0.5},{0.33333333333, 0.25}}
	Var divelemMatrices_sol3 : Matrix<Double, 2, 2> = {{0.5, 1},{1.5, 2}}
	compare(divelemMatrices_res1, divelemMatrices_sol1,prec)
	compare(divelemMatrices_res2, divelemMatrices_sol2,prec)
	compare(divelemMatrices_res3, divelemMatrices_sol3,prec)

  
	// elementwise power
	Var powelemMatrices_res1 : Matrix<Double, 2, 2> = m2 .^ v1 
	Var powelemMatrices_res2 : Matrix<Double, 2, 2> = m2 .^ v2
	Var powelemMatrices_sol1 : Matrix<Double, 2, 2> = {{1, 2},{3, 4}}
	Var powelemMatrices_sol2 : Matrix<Double, 2, 2> = {{1, 4},{9, 16}}
	compare(powelemMatrices_res1, powelemMatrices_sol1,prec)
	compare(powelemMatrices_res2, powelemMatrices_sol2,prec)
*/
}

