#include "User/User.h"
void print(double* m, int s) {
	for (int i = 0; i < s; ++i) {
		for (int j = 0; j < s; ++j) {
			std::cout << m[i * s + j] << " ";
		}
		std::cout << std::endl;
	}
}
int main (int argc, char** argv) {
	__matrix_double_6_6_t t {12.13, 2.0, 1.13, 0.0, 0.0, 0.0, 4.13, 3.0, 4.113, 0.0, 0.0, 0.0, 3.13, 3.141, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.214, 4.52, 6.35, 0.0, 0.0, 0.0, 3.345, -1.345, 6.534, 0.0, 0.0, 0.0, 4.435, 1.34, 3.13};
	__matrix_double_6_6_t t_inverse {((((t[6]/t[0])*(t[1]/(t[7]-(t[1]*(t[6]/t[0])))))+1.0)/(t[0]-((t[6]-t[6])*(t[1]/(t[7]-(t[1]*(t[6]/t[0]))))))), (-((t[1]/(t[7]-(t[1]*(t[6]/t[0]))))/(t[0]-((t[6]-t[6])*(t[1]/(t[7]-(t[1]*(t[6]/t[0])))))))), t[2], t[3], t[4], t[5], (-((t[6]/t[0])/(t[7]-(t[1]*(t[6]/t[0]))))), (1.0/(t[7]-(t[1]*(t[6]/t[0])))), t[8], t[9], t[10], t[11], t[12], t[13], ((((t[20]/t[14])*(t[15]/(t[21]-(t[15]*(t[20]/t[14])))))+1.0)/(t[14]-((t[20]-t[20])*(t[15]/(t[21]-(t[15]*(t[20]/t[14]))))))), (-((t[15]/(t[21]-(t[15]*(t[20]/t[14]))))/(t[14]-((t[20]-t[20])*(t[15]/(t[21]-(t[15]*(t[20]/t[14])))))))), t[16], t[17], t[18], t[19], (-((t[20]/t[14])/(t[21]-(t[15]*(t[20]/t[14]))))), (1.0/(t[21]-(t[15]*(t[20]/t[14])))), t[22], t[23], t[24], t[25], t[26], t[27], ((((t[34]/t[28])*(t[29]/(t[35]-(t[29]*(t[34]/t[28])))))+1.0)/(t[28]-((t[34]-t[34])*(t[29]/(t[35]-(t[29]*(t[34]/t[28]))))))), (-((t[29]/(t[35]-(t[29]*(t[34]/t[28]))))/(t[28]-((t[34]-t[34])*(t[29]/(t[35]-(t[29]*(t[34]/t[28])))))))), t[30], t[31], t[32], t[33], (-((t[34]/t[28])/(t[35]-(t[29]*(t[34]/t[28]))))), (1.0/(t[35]-(t[29]*(t[34]/t[28]))))};
	print(t, 6);
	print(t_inverse, 6);
	__matrix_double_8_8_t t2 {12.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 6.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 5.0};
	__matrix_double_8_8_t t2_inverse {((((t2[8]/t2[0])*(t2[1]/(t2[9]-(t2[1]*(t2[8]/t2[0])))))+1.0)/(t2[0]-((t2[8]-t2[8])*(t2[1]/(t2[9]-(t2[1]*(t2[8]/t2[0]))))))), (-((t2[1]/(t2[9]-(t2[1]*(t2[8]/t2[0]))))/(t2[0]-((t2[8]-t2[8])*(t2[1]/(t2[9]-(t2[1]*(t2[8]/t2[0])))))))), t2[2], t2[3], t2[4], t2[5], t2[6], t2[7], (-((t2[8]/t2[0])/(t2[9]-(t2[1]*(t2[8]/t2[0]))))), (1.0/(t2[9]-(t2[1]*(t2[8]/t2[0])))), t2[10], t2[11], t2[12], t2[13], t2[14], t2[15], t2[16], t2[17], ((((t2[26]/t2[18])*(t2[19]/(t2[27]-(t2[19]*(t2[26]/t2[18])))))+1.0)/(t2[18]-((t2[26]-t2[26])*(t2[19]/(t2[27]-(t2[19]*(t2[26]/t2[18]))))))), (-((t2[19]/(t2[27]-(t2[19]*(t2[26]/t2[18]))))/(t2[18]-((t2[26]-t2[26])*(t2[19]/(t2[27]-(t2[19]*(t2[26]/t2[18])))))))), t2[20], t2[21], t2[22], t2[23], t2[24], t2[25], (-((t2[26]/t2[18])/(t2[27]-(t2[19]*(t2[26]/t2[18]))))), (1.0/(t2[27]-(t2[19]*(t2[26]/t2[18])))), t2[28], t2[29], t2[30], t2[31], t2[32], t2[33], t2[34], t2[35], ((((t2[44]/t2[36])*(t2[37]/(t2[45]-(t2[37]*(t2[44]/t2[36])))))+1.0)/(t2[36]-((t2[44]-t2[44])*(t2[37]/(t2[45]-(t2[37]*(t2[44]/t2[36]))))))), (-((t2[37]/(t2[45]-(t2[37]*(t2[44]/t2[36]))))/(t2[36]-((t2[44]-t2[44])*(t2[37]/(t2[45]-(t2[37]*(t2[44]/t2[36])))))))), t2[38], t2[39], t2[40], t2[41], t2[42], t2[43], (-((t2[44]/t2[36])/(t2[45]-(t2[37]*(t2[44]/t2[36]))))), (1.0/(t2[45]-(t2[37]*(t2[44]/t2[36])))), t2[46], t2[47], t2[48], t2[49], t2[50], t2[51], t2[52], t2[53], ((((t2[62]/t2[54])*(t2[55]/(t2[63]-(t2[55]*(t2[62]/t2[54])))))+1.0)/(t2[54]-((t2[62]-t2[62])*(t2[55]/(t2[63]-(t2[55]*(t2[62]/t2[54]))))))), (-((t2[55]/(t2[63]-(t2[55]*(t2[62]/t2[54]))))/(t2[54]-((t2[62]-t2[62])*(t2[55]/(t2[63]-(t2[55]*(t2[62]/t2[54])))))))), t2[56], t2[57], t2[58], t2[59], t2[60], t2[61], (-((t2[62]/t2[54])/(t2[63]-(t2[55]*(t2[62]/t2[54]))))), (1.0/(t2[63]-(t2[55]*(t2[62]/t2[54]))))};
	return 0;
}
