Domain global< [0.0] to [1.0] >

Layout CellMatrixWithComm< Matrix < Real, 3, 3>, Cell >@all {
	ghostLayers = [1] with communication
	duplicateLayers = [0]
}

Field mat< global, CellMatrixWithComm, 0.0 >@all

Globals {
    Val eps : Real = 0.0000001
    Val maxVal : Real = 1000.
    Val minVal : Real = 0.123
    Val matrixEntry : Real = 2.
    Val someVal : Real = 1337.
}

Function Application {
	initGlobals (  )
	initDomain (  )
	initFieldsWithZero (  )

	loop over mat@finest {
        mat@finest = matrixEntry
    }

    Var redTarget : Matrix < Real, 3, 3 > = 0.
    Var ones : Matrix < Real, 3, 3 > = {{1, 0, 0}, {0, 1, 0}, {0, 0, 1}}

	loop over mat@finest with reduction (+: redTarget[0][0]) {
        Var tmp : Matrix < Real, 3, 3 > = ones * mat@finest
        redTarget[0][0] += tmp[0][0] + tmp[1][1] + tmp[2][2]
    }
	
	Val expected : Real = (2 ** levels@finest ( )) * matrixEntry * 3
	
	if ( fabs(redTarget[0][0] - expected) <= eps ) {
        print('Passed stage 0: redTarget equals expected result')
    } else {
        print('Failed stage 0: redTarget=', redTarget[0][0], ', expected=', expected)
    }

	redTarget = 0.
	Val a : Real = 1.
	Val b : Real = 13.
	Val c : Real = -1.
	Val d : Real = 0.
	Val e : Real = 3.
	Val f : Real = 2.
	Val zero : Real = 0.

	loop over mat@finest with reduction(+: redTarget) {
		redTarget += {{a, b, c}, {d, e, f}, {zero, zero, zero}}
	}
	
	Val n : Real = (2 ** levels@finest ( ))
	if (fabs(redTarget[0][0] - n * a) <= eps &&
		fabs(redTarget[0][1] - n * b) <= eps &&
		fabs(redTarget[0][2] - n * c) <= eps &&
        fabs(redTarget[1][0] - n * d) <= eps &&
        fabs(redTarget[1][1] - n * e) <= eps &&
        fabs(redTarget[1][2] - n * f) <= eps &&
		fabs(redTarget[2][0] - n * zero) <= eps && fabs(redTarget[2][1] - n * zero) <= eps && fabs(redTarget[2][2] - n * zero) ) {
		
		print('Passed stage 1')
		
	} else {
		print('Failed stage 1. redTarget[0][0] = ', redTarget[0][0], '. redTarget[0][1] = ', redTarget[0][1], '. redTarget[0][2] = ', redTarget[0][2],
                '. redTarget[1][0] = ', redTarget[1][0], '. redTarget[1][1] = ', redTarget[1][1], '. redTarget[1][2] = ', redTarget[1][2],
                '. redTarget[2][0] = ', redTarget[2][0], '. redTarget[2][1] = ', redTarget[2][1], '. redTarget[2][2] = ', redTarget[2][2])
	}

	loop over mat@finest with reduction(+: redTarget) {
		redTarget[0][0] += a
		redTarget[0][1] += b
		redTarget[0][2] += c
		redTarget[1][0] += d
		redTarget[1][1] += e
		redTarget[1][2] += f
		redTarget[2] += {zero, zero, zero}
	}
	
	if (fabs(redTarget[0][0] - n * a) <= eps &&
		fabs(redTarget[0][1] - n * b) <= eps &&
		fabs(redTarget[0][2] - n * c) <= eps &&
        fabs(redTarget[1][0] - n * d) <= eps &&
        fabs(redTarget[1][1] - n * e) <= eps &&
        fabs(redTarget[1][2] - n * f) <= eps &&
		fabs(redTarget[2][0] - n * zero) <= eps && fabs(redTarget[2][1] - n * zero) <= eps && fabs(redTarget[2][2] - n * zero) ) {
		
		print('Passed stage 2')
		
	} else {
		print('Failed stage 2. redTarget[0][0] = ', redTarget[0][0], '. redTarget[0][1] = ', redTarget[0][1], '. redTarget[0][2] = ', redTarget[0][2],
                '. redTarget[1][0] = ', redTarget[1][0], '. redTarget[1][1] = ', redTarget[1][1], '. redTarget[1][2] = ', redTarget[1][2],
                '. redTarget[2][0] = ', redTarget[2][0], '. redTarget[2][1] = ', redTarget[2][1], '. redTarget[2][2] = ', redTarget[2][2])
	}

    Var tmp : Real = 0.
    loop over mat@finest with reduction (+: tmp) {
        tmp += mat@finest[0][0] * mat@finest[0][0]
    }

    if (fabs(tmp - n * (matrixEntry**2)) <= eps) {
        print('Passed stage 3')
    } else {
        print('Failed stage 3: tmp = ', tmp)
    }

	destroyGlobals (  )
}