// domain declarations

// field layout declarations

// field declarations

// field combinations

// external field declarations

// stencil declarations

// stencil field declarations

// equations declarations

Domain global< [0.0, 0.0, 0.0] to [1.0, 1.0, 1.0] >

Layout NoComm< Real, Cell >@all {
	ghostLayers = [0, 0, 0]
	duplicateLayers = [0, 0, 0]
}

Layout CommPartTempBlockable< Real, Cell >@all {
	ghostLayers = [0, 0, 0]
	duplicateLayers = [0, 0, 0]
}

Layout BasicComm< Real, Cell >@all {
	ghostLayers = [1, 1, 1] with communication
	duplicateLayers = [0, 0, 0] with communication
}

Layout CommFullTempBlockable< Real, Cell >@all {
	ghostLayers = [1, 1, 1] with communication
	duplicateLayers = [0, 0, 0] with communication
}

Field Solution< global, BasicComm, 0.0 >[2]@(coarsest to 0)

Field Solution< global, CommFullTempBlockable, 0.0 >[2]@(1 to (finest - 1))

Field Solution< global, CommFullTempBlockable, ( ( sin ( ( PI * vf_boundaryCoord_x@current ) ) * sin ( ( PI * vf_boundaryCoord_y@current ) ) ) * sinh ( ( ( sqrt ( 2.0 ) * PI ) * vf_boundaryCoord_z@current ) ) ) >[2]@finest

Field Residual< global, BasicComm, 0.0 >@all

Field RHS< global, NoComm, None >@(coarsest to 0)

Field RHS< global, CommPartTempBlockable, None >@(1 to finest)

Field VecP< global, BasicComm, 0.0 >@coarsest

Field VecGradP< global, NoComm, None >@coarsest

Stencil Laplace@all{
	[0, 0, 0] => ( ( ( 2.0 / ( vf_cellWidth_x@current * vf_cellWidth_x@current ) ) + ( 2.0 / ( vf_cellWidth_y@current * vf_cellWidth_y@current ) ) ) + ( 2.0 / ( vf_cellWidth_z@current * vf_cellWidth_z@current ) ) )
	[1, 0, 0] => ( -1.0 / ( vf_cellWidth_x@current * vf_cellWidth_x@current ) )
	[-1, 0, 0] => ( -1.0 / ( vf_cellWidth_x@current * vf_cellWidth_x@current ) )
	[0, 1, 0] => ( -1.0 / ( vf_cellWidth_y@current * vf_cellWidth_y@current ) )
	[0, -1, 0] => ( -1.0 / ( vf_cellWidth_y@current * vf_cellWidth_y@current ) )
	[0, 0, 1] => ( -1.0 / ( vf_cellWidth_z@current * vf_cellWidth_z@current ) )
	[0, 0, -1] => ( -1.0 / ( vf_cellWidth_z@current * vf_cellWidth_z@current ) )
}

Stencil CorrectionStencil from default prolongation on Cell with "linear"

Stencil RestrictionStencil from default restriction on Cell with "linear"



Function VCycle@coarsest {
	VCycle_0@current (  )
}

Function VCycle_0@coarsest {
	UpResidual@current (  )
	apply bc to Residual@current
	communicate Residual@current
	Var res : Real = NormResidual_0@current (  )
	Var initialRes : Real = res
	loop over VecP@current {
		VecP@current = Residual@current
	}
	Var cgSteps : Integer
	repeat 512 times count cgSteps {
		apply bc to VecP@current
		communicate VecP@current
		loop over VecP@current {
			VecGradP@current = ( Laplace@current * VecP@current )
		}
		Var alphaDenom : Real = 0
		loop over VecP@current with reduction ( + : alphaDenom ) {
			alphaDenom += ( VecP@current * VecGradP@current )
		}
		Var alpha : Real = ( ( res * res ) / alphaDenom )
		loop over Solution@current {
			Solution[active]@current += ( alpha * VecP@current )
			Residual@current -= ( alpha * VecGradP@current )
		}
		Var nextRes : Real = NormResidual_0@current (  )
		if ( ( nextRes <= ( 0.001 * initialRes ) ) ) {
			return
		}
		Var beta : Real = ( ( nextRes * nextRes ) / ( res * res ) )
		loop over VecP@current {
			VecP@current = ( Residual@current + ( beta * VecP@current ) )
		}
		res = nextRes
	}
	print ( "Maximum number of cgs iterations (", 512, ") was exceeded" )
}

Function VCycle@((coarsest + 1) to finest) {
	repeat 3 times {
		Smoother@current (  )
	}
	UpResidual@current (  )
	Restriction@current (  )
	SetSolution@coarser ( 0 )
	VCycle@coarser (  )
	Correction@current (  )
	repeat 3 times {
		Smoother@current (  )
	}
}

Function Smoother@((coarsest + 1) to finest) {
	apply bc to Solution[active]@current
	communicate ghost of Solution[active]@current
	loop over Solution@current {
		Solution[next]@current = ( Solution[active]@current + ( ( ( 1.0 / diag ( Laplace@current ) ) * 0.8 ) * ( RHS@current - ( Laplace@current * Solution[active]@current ) ) ) )
	}
	advance Solution@current
}

Function UpResidual@all {
	apply bc to Solution[active]@current
	communicate Solution[active]@current
	loop over Residual@current {
		Residual@current = ( RHS@current - ( Laplace@current * Solution[active]@current ) )
	}
}

Function NormResidual_0@(finest, coarsest) : Real {
	Var res : Real = 0
	loop over Residual@current with reduction ( + : res ) {
		res += ( Residual@current * Residual@current )
	}
	return sqrt ( res )
}

Function NormError_0@(finest) : Real {
	Var err : Real = 0
	loop over Solution@current with reduction ( max : err ) {
		Var curErr : Real = fabs ( ( Solution[active]@current - ( ( sin ( ( PI * vf_cellCenter_x@current ) ) * sin ( ( PI * vf_cellCenter_y@current ) ) ) * sinh ( ( ( sqrt ( 2.0 ) * PI ) * vf_cellCenter_z@current ) ) ) ) )
		err = max ( err, curErr )
	}
	return err
}

Function Restriction@((coarsest + 1) to finest) {
	apply bc to Residual@current
	communicate ghost of Residual@current
	loop over RHS@coarser {
		RHS@coarser = ( RestrictionStencil@current * Residual@current )
	}
}

Function Correction@((coarsest + 1) to finest) {
	apply bc to Solution[active]@coarser
	communicate ghost of Solution[active]@coarser
	loop over Solution@current {
		Solution[active]@current += ( CorrectionStencil@current * Solution[active]@coarser )
	}
}

Function SetSolution@all ( value : Real ) {
	loop over Solution@current {
		Solution[active]@current = value
	}
}

Function InitSolution {
	loop over Solution@finest {
		Solution[active]@finest = 0
	}
}

Function InitRHS@finest {
	loop over RHS@current {
		RHS@current = 0.0
	}
}

Function Solve {
	UpResidual@finest (  )
	Var resStart_0 : Real = NormResidual_0@finest (  )
	Var res_0 : Real = resStart_0
	Var resOld_0 : Real = 0
	if ( ( resStart_0 <= 1.0E-12 ) ) {
		print ( "EFFECTIVELY ZERO" )
	} else {
		if ( ( resStart_0 <= 1.0E-11 ) ) {
			native ( "std::streamsize oldPrec = std::cout.precision()" )
			native ( "std::cout.precision(1)" )
			print ( resStart_0 )
			native ( "std::cout.precision(oldPrec)" )
		} else {
			if ( ( resStart_0 <= 9.999999999999999E-11 ) ) {
				native ( "std::streamsize oldPrec = std::cout.precision()" )
				native ( "std::cout.precision(2)" )
				print ( resStart_0 )
				native ( "std::cout.precision(oldPrec)" )
			} else {
				if ( ( resStart_0 <= 9.999999999999999E-10 ) ) {
					native ( "std::streamsize oldPrec = std::cout.precision()" )
					native ( "std::cout.precision(3)" )
					print ( resStart_0 )
					native ( "std::cout.precision(oldPrec)" )
				} else {
					native ( "std::streamsize oldPrec = std::cout.precision()" )
					native ( "std::cout.precision(4)" )
					print ( resStart_0 )
					native ( "std::cout.precision(oldPrec)" )
				}
			}
		}
	}
	Var numIt : Integer = 0
	repeat until ( ( res_0 < ( 1.0E-5 * resStart_0 ) ) || ( numIt >= 100 ) ) {
		numIt += 1
		VCycle@finest (  )
		UpResidual@finest (  )
		resOld_0 = res_0
		res_0 = NormResidual_0@finest (  )
		Var curError_0 : Real = NormError_0@finest (  )
		if ( ( curError_0 <= 1.0E-12 ) ) {
			print ( "EFFECTIVELY ZERO" )
		} else {
			if ( ( curError_0 <= 1.0E-11 ) ) {
				native ( "std::streamsize oldPrec = std::cout.precision()" )
				native ( "std::cout.precision(1)" )
				print ( curError_0 )
				native ( "std::cout.precision(oldPrec)" )
			} else {
				if ( ( curError_0 <= 9.999999999999999E-11 ) ) {
					native ( "std::streamsize oldPrec = std::cout.precision()" )
					native ( "std::cout.precision(2)" )
					print ( curError_0 )
					native ( "std::cout.precision(oldPrec)" )
				} else {
					if ( ( curError_0 <= 9.999999999999999E-10 ) ) {
						native ( "std::streamsize oldPrec = std::cout.precision()" )
						native ( "std::cout.precision(3)" )
						print ( curError_0 )
						native ( "std::cout.precision(oldPrec)" )
					} else {
						native ( "std::streamsize oldPrec = std::cout.precision()" )
						native ( "std::cout.precision(4)" )
						print ( curError_0 )
						native ( "std::cout.precision(oldPrec)" )
					}
				}
			}
		}
	}
	print ( numIt )
}

Function Application {
	initGlobals (  )
	initDomain (  )
	initFieldsWithZero (  )
	InitRHS@finest (  )
	InitSolution (  )
	Solve (  )
	destroyGlobals (  )
}

