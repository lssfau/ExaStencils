package exastencils.operator.meta

import scala.collection.mutable.ListBuffer

import meta._

object ME_Stencil extends Generatable {
  override def validLayers() = ListBuffer(L2, L3)

  override def filenameForLayer(layer : Layer) = s"./Compiler/src/exastencils/operator/|LAYER_LC|/|LAYER_UC|_Stencil.scala"

  override def generateForLayer(layer : Layer) = {
    val printer = new Printer
    printer <<< """package exastencils.operator.|LAYER_LC|"""
    printer <<< """"""
    printer <<< """import scala.collection.mutable._"""
    printer <<< """"""
    printer <<< """import exastencils.base.|LAYER_LC|.|LAYER_UC|_ImplicitConversion._"""
    printer <<< """import exastencils.base.|LAYER_LC|._"""
    printer <<< """import exastencils.core._"""
    printer <<< """import exastencils.knowledge.|LAYER_LC|.|LAYER_UC|_LeveledKnowledgeObject"""
    printer <<< """import exastencils.logger.Logger"""
    printer <<< """import exastencils.operator.|NEXT_LC|._"""
    printer <<< """import exastencils.optimization.|LAYER_LC|._"""
    printer <<< """import exastencils.prettyprinting._"""
    printer <<< """import exastencils.util.|LAYER_LC|.|LAYER_UC|_ReplaceExpressions"""
    printer <<< """"""
    printer <<< """/// |LAYER_UC|_Stencil"""
    printer <<< """"""
    printer <<< """case class |LAYER_UC|_Stencil("""
    printer <<< """    var name : String, // will be used to find the stencil"""
    printer <<< """    var level : Int, // the level the stencil lives on"""
    printer <<< """    var numDims : Int, // number of dimensions in the coefficients"""
    printer <<< """    var colStride : Array[Double], // strides of the entries per dimension; 1 means stencil represents a square matrix, >1 means stride*n x n, <1 means n x n/stride"""
    printer <<< """    var entries : ListBuffer[|LAYER_UC|_StencilMappingEntry]) extends |LAYER_UC|_LeveledKnowledgeObject[|NEXT_UC|_Stencil] {"""
    printer <<< """"""
    printer <<< """  override def prettyprintDecl(out : PpStream) : Unit = ???"""
    if (L2 == layer) {
      printer <<< """  override def progressImpl() = |NEXT_UC|_Stencil(name, level, numDims, colStride, entries.map(_.progress))"""
    }
    if (L3 == layer) {
      printer <<< """  override def progressImpl() = |NEXT_UC|_Stencil(name, level, entries.map(_.progress))"""
    }
    printer <<< """"""
    printer <<< """  def squash() = {"""
    printer <<< """    case class Mapping(var row : |LAYER_UC|_ExpressionIndex, var col : |LAYER_UC|_ExpressionIndex)"""
    printer <<< """"""
    printer <<< """    val newEntries = HashMap[Mapping, |LAYER_UC|_Expression]()"""
    printer <<< """"""
    printer <<< """    entries.foreach(_.row.indices.transform(|LAYER_UC|_SimplifyExpression.simplifyFloatingExpr))"""
    printer <<< """    entries.foreach(_.col.indices.transform(|LAYER_UC|_SimplifyExpression.simplifyFloatingExpr))"""
    printer <<< """"""
    printer <<< """    for (entry <- entries) {"""
    printer <<< """      val id = Mapping(entry.row, entry.col)"""
    printer <<< """      if (newEntries.contains(id))"""
    printer <<< """        newEntries(id) += entry.coefficient"""
    printer <<< """      else"""
    printer <<< """        newEntries += ((id, entry.coefficient))"""
    printer <<< """    }"""
    printer <<< """"""
    printer <<< """    entries = newEntries.to[ListBuffer].sortBy(_._1.col.prettyprint()).map {"""
    printer <<< """      case (mapping, coeff) => |LAYER_UC|_StencilMappingEntry(mapping.row, mapping.col, coeff)"""
    printer <<< """    }"""
    printer <<< """"""
    printer <<< """    entries.foreach(|LAYER_UC|_GeneralSimplify.doUntilDoneStandalone(_))"""
    printer <<< """  }"""
    printer <<< """"""
    printer <<< """  def compileCases() : ListBuffer[ListBuffer[Int]] = {"""
    printer <<< """    def numCases(d : Int) : Int = if (colStride(d) >= 1) 1/*colStride(d).toInt*/ else (1.0 / colStride(d)).toInt"""
    printer <<< """"""
    printer <<< """    var cases = ListBuffer.range(0, numCases(0)).map(i => ListBuffer(i))"""
    printer <<< """    for (d <- 1 until numDims)"""
    printer <<< """      cases = ListBuffer.range(0, numCases(d)).flatMap(i => cases.map(_ :+ i))"""
    printer <<< """"""
    printer <<< """    cases"""
    printer <<< """  }"""
    printer <<< """"""
    printer <<< """  def filter() = {"""
    printer <<< """    // remove entries with zero coefficients"""
    printer <<< """    entries = entries.filter(entry => {"""
    printer <<< """      try {"""
    printer <<< """        val simplified = |LAYER_UC|_SimplifyExpression.simplifyFloatingExpr(entry.coefficient)"""
    printer <<< """        //entry.coefficient = simplified"""
    printer <<< """"""
    printer <<< """        simplified match {"""
    printer <<< """          case |LAYER_UC|_RealConstant(0.0) => false"""
    printer <<< """          case _                    => true"""
    printer <<< """        }"""
    printer <<< """      } catch {"""
    printer <<< """        // keep entry if eval is not possible"""
    printer <<< """        case _ : EvaluationException => true"""
    printer <<< """      }"""
    printer <<< """    })"""
    printer <<< """"""
    printer <<< """    // remove entries with invalid row/column pairs"""
    printer <<< """    entries = entries.filter(entry => {"""
    printer <<< """      // filter entries with invalid indices"""
    printer <<< """      val cases = compileCases()"""
    printer <<< """"""
    printer <<< """      // check if at least one case exists that emits valid indices"""
    printer <<< """      cases.map(curCase => {"""
    printer <<< """        val newIndex = Duplicate(entry.col)"""
    printer <<< """        for (d <- 0 until numDims) {"""
    printer <<< """          |LAYER_UC|_ReplaceExpressions.toReplace = entry.row.indices(d)"""
    printer <<< """          |LAYER_UC|_ReplaceExpressions.replacement = curCase(d)"""
    printer <<< """          |LAYER_UC|_ReplaceExpressions.applyStandalone(newIndex)"""
    printer <<< """        }"""
    printer <<< """        newIndex.indices.map(|LAYER_UC|_SimplifyExpression.simplifyFloatingExpr(_) match {"""
    printer <<< """          case |LAYER_UC|_RealConstant(v) => v.isValidInt"""
    printer <<< """          case other              => Logger.warn(other); false"""
    printer <<< """        }).reduce(_ && _)"""
    printer <<< """      }).reduce(_ || _)"""
    printer <<< """    })"""
    printer <<< """  }"""
    printer <<< """}"""
    printer.toString
  }
}
