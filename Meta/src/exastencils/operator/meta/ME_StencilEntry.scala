package exastencils.operator.meta

import scala.collection.mutable.ListBuffer

import meta._

object ME_StencilEntry extends Generatable {
  override def validLayers() = ListBuffer(L2, L3)

  override def filenameForLayer(layer : Layer) = s"./Compiler/src/exastencils/operator/|LAYER_LC|/|LAYER_UC|_StencilEntry.scala"

  override def generateForLayer(layer : Layer) = {
    val printer = new Printer
    printer <<< """package exastencils.operator.|LAYER_LC|"""
    printer <<< """"""
    printer <<< """import exastencils.base.|LAYER_LC|.|LAYER_UC|_ImplicitConversion._"""
    printer <<< """import exastencils.base.|LAYER_LC|._"""
    printer <<< """import exastencils.baseExt.|LAYER_LC|.|LAYER_UC|_FieldIteratorAccess"""
    printer <<< """import exastencils.core.Duplicate"""
    printer <<< """import exastencils.logger.Logger"""
    printer <<< """import exastencils.operator.|NEXT_LC|._"""
    printer <<< """import exastencils.optimization.|LAYER_LC|._"""
    printer <<< """import exastencils.prettyprinting._"""
    printer <<< """import exastencils.util.|LAYER_LC|._"""
    printer <<< """"""
    printer <<< """/// |LAYER_UC|_StencilEntry"""
    printer <<< """"""
    printer <<< """abstract class |LAYER_UC|_StencilEntry extends |LAYER_UC|_Node with |LAYER_UC|_Progressable with PrettyPrintable {"""
    printer <<< """  override def progress : |NEXT_UC|_StencilEntry"""
    printer <<< """"""
    printer <<< """  def asStencilOffsetEntry : |LAYER_UC|_StencilOffsetEntry"""
    printer <<< """  def asStencilMappingEntry : |LAYER_UC|_StencilMappingEntry"""
    printer <<< """"""
    printer <<< """  def numDims : Int"""
    printer <<< """  def colStride : Array[Double]"""
    printer <<< """}"""
    printer <<< """"""
    printer <<< """/// |LAYER_UC|_StencilOffsetEntry"""
    printer <<< """"""
    printer <<< """case class |LAYER_UC|_StencilOffsetEntry(var offset : |LAYER_UC|_Index, var coefficient : |LAYER_UC|_Expression) extends |LAYER_UC|_StencilEntry {"""
    printer <<< """  override def prettyprint(out : PpStream) = out << offset << " => " << coefficient"""
    if (L3 == layer) {
      printer <<< """  override def progress = |NEXT_UC|_StencilEntry(offset.progress, coefficient.progress)"""
    }
    if (L2 == layer) {
      printer <<< """  override def progress = |NEXT_UC|_StencilOffsetEntry(offset.progress, coefficient.progress)"""
    }
    printer <<< """"""
    printer <<< """  override def asStencilOffsetEntry = this"""
    printer <<< """  override def asStencilMappingEntry = {"""
    printer <<< """    def defIt = |LAYER_UC|_ExpressionIndex((0 until numDims).toArray.map(|LAYER_UC|_FieldIteratorAccess(_) : |LAYER_UC|_Expression))"""
    printer <<< """    |LAYER_UC|_StencilMappingEntry(defIt, defIt + offset, coefficient)"""
    printer <<< """  }"""
    printer <<< """"""
    printer <<< """  override def numDims = offset.length"""
    printer <<< """  override def colStride = Array.fill(numDims)(1.0)"""
    printer <<< """}"""
    printer <<< """"""
    printer <<< """/// |LAYER_UC|_StencilOffsetEntry"""
    printer <<< """"""
    printer <<< """case class |LAYER_UC|_StencilMappingEntry(var row : |LAYER_UC|_ExpressionIndex, var col : |LAYER_UC|_ExpressionIndex, var coefficient : |LAYER_UC|_Expression) extends |LAYER_UC|_StencilEntry {"""
    printer <<< """"""
    printer <<< """  |LAYER_UC|_ReplaceIntWithReal.applyStandalone(row)"""
    printer <<< """  |LAYER_UC|_ReplaceIntWithReal.applyStandalone(col)"""
    printer <<< """"""
    printer <<< """  override def prettyprint(out : PpStream) = out << row << " from " << col << " with " << coefficient"""
    printer <<< """"""
    if (L3 == layer) {
      printer <<< """  override def progress = {"""
    }
    if (L2 == layer) {
      printer <<< """  override def progress = |NEXT_UC|_StencilMappingEntry(row.progress, col.progress, coefficient.progress)"""
    }
    if (L3 == layer) {
      printer <<< """    // FIXME: specialized |LAYER_UC| class |NEXT_UC|_StencilEntry(row.progress, col.progress, coefficient.progress)"""
      printer <<< """    asStencilOffsetEntry.progress"""
      printer <<< """  }"""
    }
    printer <<< """"""
    printer <<< """  override def asStencilOffsetEntry = {"""
    printer <<< """    val offset = Duplicate(col)"""
    printer <<< """"""
    printer <<< """    for (d <- 0 until row.length) {"""
    printer <<< """      |LAYER_UC|_ReplaceExpressions.toReplace = row.indices(d)"""
    printer <<< """      |LAYER_UC|_ReplaceExpressions.replacement = 0"""
    printer <<< """      |LAYER_UC|_ReplaceExpressions.applyStandalone(offset)"""
    printer <<< """    }"""
    printer <<< """"""
    printer <<< """    offset.indices.transform(|LAYER_UC|_SimplifyExpression.simplifyFloatingExpr)"""
    printer <<< """"""
    printer <<< """    |LAYER_UC|_ReplaceRealWithInt.applyStandalone(offset)"""
    printer <<< """    |LAYER_UC|_GeneralSimplify.applyStandalone(offset)"""
    printer <<< """"""
    printer <<< """    |LAYER_UC|_StencilOffsetEntry(offset, coefficient)"""
    printer <<< """  }"""
    printer <<< """"""
    printer <<< """  override def asStencilMappingEntry = this"""
    printer <<< """"""
    printer <<< """  override def numDims = {"""
    printer <<< """    if (row.length != col.length)"""
    printer <<< """      Logger.warn(s"Size mismatch: ${ row.length } != ${ col.length }")"""
    printer <<< """    row.length"""
    printer <<< """  }"""
    printer <<< """"""
    printer <<< """  override def colStride = {"""
    printer <<< """    val stride = Duplicate(col)"""
    printer <<< """    val sthLarge = 2 * 2 * 2 * 3 * 3 * 3 * 5 * 5 * 7 * 7"""
    printer <<< """"""
    printer <<< """    for (d <- 0 until row.length) {"""
    printer <<< """      |LAYER_UC|_ReplaceExpressions.toReplace = row.indices(d)"""
    printer <<< """      |LAYER_UC|_ReplaceExpressions.replacement = sthLarge"""
    printer <<< """      |LAYER_UC|_ReplaceExpressions.applyStandalone(stride)"""
    printer <<< """    }"""
    printer <<< """"""
    printer <<< """    stride.indices.transform(|LAYER_UC|_SimplifyExpression.simplifyFloatingExpr)"""
    printer <<< """    stride.indices.map { v =>"""
    printer <<< """      val stride = v.asInstanceOf[|LAYER_UC|_RealConstant].value / sthLarge"""
    printer <<< """      if (stride > 1) stride.round.toDouble"""
    printer <<< """      else 1.0 / (1.0 / stride).round.toDouble"""
    printer <<< """    }"""
    printer <<< """  }"""
    printer <<< """"""
    printer <<< """  def transpose() = {"""
    printer <<< """    val tmp = row"""
    printer <<< """    row = col"""
    printer <<< """    col = tmp"""
    printer <<< """  }"""
    printer <<< """}"""
    printer.toString
  }
}
