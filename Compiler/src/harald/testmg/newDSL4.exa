Field Solution< [1, 1, 1], Real>@(0 to 4) (bcDir = true)
Field Residual< [1, 1, 1], Real>@(0 to 4) (bcDir = false)
Field RHS< [1, 1, 1], Real>@(0 to 4) (bcDir = false)

Set inner [1, 1, 1] - [1, 1, 1] steps [1, 1, 1]
Set domain [0, 0, 0] - [0, 0, 0] steps [1, 1, 1]

def VCycle@0 ( ) : Unit {
	repeat up 512 {
		GaussSeidel@0 ( )
	}
}

def VCycle@(1 to 4) ( ) : Unit {
	repeat up 3 {
		GaussSeidel@(current) ( )
	}
	UpResidual@(current) ( )
	Restrict@(current) ( )
	set@(coarser) ( 0 )
	VCycle@(coarser) ( )
	interpolatecorr@(current) ( )
	repeat up 3 {
		GaussSeidel@(current) ( )
	}
}

def GaussSeidel@(0 to 4) ( ) : Unit { 
	exchsolData@(current) ( 0 )
	loop over inner on Solution@(current) {
		Solution@(current) = Solution@(current) + ( ( ( 1.0 / diag ( Lapl@(current) ) ) * 1.0 ) * ( RHS@(current) - Lapl@(current) * Solution@(current) ) )
	}
}

def UpResidual@(0 to 4) ( ) : Unit {
	exchsolData@(current) ( 0 )
	loop over inner on Residual@(current) {
		Residual@(current) = RHS@(current) - (Lapl@(current) * Solution@(current))
	}
}

def Restrict @(1 to 4) ( ) : Unit { 
	exchresData@(current) ( 0 )
	loop over inner on RHS@(coarser) {
		RHS@(coarser) = ToCoarser ( RestrictionStencil@(current) * Residual@(current) )
    }
}

def interpolatecorr@(1 to 4) ( ) : Unit { 
	exchsolData@(current) ( 0 )  
	loop over inner on Solution@(current) {
		Solution@(current) += ToFiner ( CorrectionStencil@(current) * Solution@(coarser) )
	}
}

def set@(0 to 4) (value : Real) : Unit {
	loop over domain on Solution@(current) {
		Solution@(current) = value
	}
}

def L2Residual@4 ( ) : Real {
	exchsolData@(current) ( 0 )
	var res : Real = 0
	loop over inner on RHS@(current) with reduction( + : res ) {
		var temp : Real = RHS@(current) - Lapl@(current) * Solution@(current)
		res += temp * temp
	}
	return ( sqrt ( res ) )
}

def Application ( ) : Unit {
	UpResidual@4 ( )
	var res0 : Real = L2Residual@4 (  )
	var res : Real = res0
	var resold : Real = 0
	print ( '"startingres"', res0 )
	repeat up 10 {
		resold = res
		VCycle@4 (  )
		UpResidual@4 ( )
		res = L2Residual@4 (  )
		print ( '"Residual:"', res, '"Residual reduction:"', ( res0 / res ), '"Convergence factor:"', ( res / resold ) )
	}
}