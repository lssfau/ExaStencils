Domain global< [ 0, 0, 0 ] to [ 1, 1, 1 ] >

Layout FullTempBlockable< Real, Node >@all {
	ghostLayers = [ 5, 5, 5 ]
	duplicateLayers = [ 1, 1, 1 ]
}
Layout NoTempBlockable< Real, Node >@all {
	ghostLayers = [ 1, 1, 1 ]
	duplicateLayers = [ 1, 1, 1 ]
}
Layout PartTempBlockable< Real, Node >@all {
	ghostLayers = [ 4, 4, 4 ]
	duplicateLayers = [ 1, 1, 1 ]
}
Layout NoComm< Real, Node >@all {
	ghostLayers = [ 0, 0, 0 ]
	duplicateLayers = [ 1, 1, 1 ]
}

Field SolutionT< global, FullTempBlockable, 0.0 >[2]@finest
Field Solution< global, NoTempBlockable, 0.0 >[2]@finest
Field RHST< global, PartTempBlockable, None >@finest
Field RHS< global, NoComm, None >@finest

Stencil Laplace@finest {
	[ 0,  0,  0] => 6.0
	[ 1,  0,  0] => -1.0
	[-1,  0,  0] => -1.0
	[ 0,  1,  0] => -1.0
	[ 0, -1,  0] => -1.0
	[ 0,  0,  1] => -1.0
	[ 0,  0, -1] => -1.0
}

Globals {
}

Function SmootherT() : Unit {
	loop over fragments {
		repeat 5 times with contraction {
			loop over SolutionT@finest {
				SolutionT[nextSlot]@finest = SolutionT[active]@finest + (0.8 / diag(Laplace@finest) * (RHST@finest - Laplace@finest * SolutionT[active]@finest))
			}
			advance SolutionT@finest
		}
	}
}
Function Smoother() : Unit {
	loop over fragments {
		loop over Solution@finest {
			Solution[nextSlot]@finest = Solution[active]@finest + (0.8 / diag(Laplace@finest) * (RHS@finest - Laplace@finest * Solution[active]@finest))
		}
		advance Solution@finest
	}
}

Function InitFields ( ) : Unit {
	loop over SolutionT@finest sequentially {
		SolutionT[active]@finest = native('((double)std::rand()/RAND_MAX)')
	}
	loop over Solution@finest sequentially {
		Solution[active]@finest = native('((double)std::rand()/RAND_MAX)')
	}
	loop over RHST@finest {
		RHST@finest = 0
	}
	loop over RHS@finest {
		RHS@finest = 0
	}
}

Function LUPs() : Real {
	Variable dimSize : Integer = 511
	return(dimSize * dimSize * dimSize)
}

Function BenchmarkT() : Unit {
	print('"Cache warmup"')
	repeat 1 times {
		SmootherT()
	}
	print('"Starting benchmark (temporal blocking)"')
	startTimer(benchTTimer)
	repeat 2 times {
		SmootherT()
	}
	stopTimer(benchTTimer)
	Variable time : Real = getTotalFromTimer(benchTTimer)
	print('"Runtime: "', time)
	print('"MLUPs: "', (LUPs() * 10) / time / 1e3)
}

Function Benchmark() : Unit {
	print('"Cache warmup"')
	repeat 1 times {
		Smoother()
	}
	print('"Starting benchmark (normal)"')
	startTimer(benchTimer)
	repeat 10 times {
		Smoother()
	}
	stopTimer(benchTimer)
	Variable time : Real = getTotalFromTimer(benchTimer)
	print('"Runtime: "', time)
	print('"MLUPs: "', (LUPs() * 10) / time / 1e3)
}

Function Application() : Unit {
	startTimer(setupWatch)
	initGlobals()
	initDomain()
	InitFields()
	stopTimer(setupWatch)
	print('"Total time to setup: "', getTotalFromTimer(setupWatch))
	Benchmark()
	BenchmarkT()
	destroyGlobals()
}
