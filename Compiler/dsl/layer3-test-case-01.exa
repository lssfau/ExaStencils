

Function jacobi(dest : Field, L : Stencil, f : Field, u : Field, omega : Real, work : Field) : Unit
{
    D_inv := diag_inv(L)
    
    //dest = u + D_inv * (f - L*u)
    apply(work, L, u)
    work = f - work
    apply(dest, D_inv, work)
    dest = u + dest
}

Function restrict(u_c : Field, R : Stencil, u : Field, work : Field) : Unit
{
    apply(work, R, u)
    //inject(aux, u_c)
}

Function smoother(L : Stencil, f : Field, u : Field) : Unit
{
    jacobi(L, f, u, dest)
    u = dest
}

Instantiate Function jacobi with (myDest, myL, myF, myU, myWork) as smoother @(1 to finest)

Instantiate Function restrict with (myF, myR, myU, myWork) as restrict @(1 to finest)


