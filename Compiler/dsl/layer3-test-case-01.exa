

Function jacobi(L : Stencil, f : Field, u : Field, omega : Real, dest : Field, work : Field) : Unit
{
    //dest = u + diag_inv(L) * (f - L*u)
    //work = apply(L, u)
    work = f - work
    //dest = apply(diag_inv(L), work)
    dest = u + dest
}

Function restrict(R : Stencil, u : Field, u_c : Field) : Unit
{
    aux = apply(R, u)
    inject(aux, u_c)
}

Function smoother(L : Stencil, f : Field, u : Field) : Unit
{
    jacobi(L, f, u, dest)
    u = dest
}

Instantiate Function jacobi with (myL, myF, myU, myDest, myWork) as smoother @(1 to finest)


