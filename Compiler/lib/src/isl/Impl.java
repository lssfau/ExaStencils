package isl;
import isl.*;
import java.lang.reflect.*;
import com.sun.jna.*;
interface Impl extends Library {
    static Impl isl = (Impl)Native.loadLibrary("isl", Impl.class);
    Context.Ptr isl_ctx_alloc();
    int isl_ctx_last_error(Context.Ptr ctx);
    void isl_ctx_reset_error(Context.Ptr ctx);
    void isl_aff_free(Aff.Ptr islobject);
    Aff.Ptr isl_aff_copy(Aff.Ptr islobject);
    Aff.Ptr isl_aff_zero_on_domain(LocalSpace.Ptr ls);
    Aff.Ptr isl_aff_val_on_domain(LocalSpace.Ptr ls, Val.Ptr val);
    Aff.Ptr isl_aff_var_on_domain(LocalSpace.Ptr ls, int type, int pos);
    int isl_aff_dim(Aff.Ptr aff, int type);
    boolean isl_aff_involves_dims(Aff.Ptr aff, int type, int first, int n);
    Space.Ptr isl_aff_get_domain_space(Aff.Ptr aff);
    Space.Ptr isl_aff_get_space(Aff.Ptr aff);
    LocalSpace.Ptr isl_aff_get_domain_local_space(Aff.Ptr aff);
    LocalSpace.Ptr isl_aff_get_local_space(Aff.Ptr aff);
    String isl_aff_get_dim_name(Aff.Ptr aff, int type, int pos);
    Val.Ptr isl_aff_get_constant_val(Aff.Ptr aff);
    Val.Ptr isl_aff_get_coefficient_val(Aff.Ptr aff, int type, int pos);
    Val.Ptr isl_aff_get_denominator_val(Aff.Ptr aff);
    Aff.Ptr isl_aff_set_constant_si(Aff.Ptr aff, int v);
    Aff.Ptr isl_aff_set_constant_val(Aff.Ptr aff, Val.Ptr v);
    Aff.Ptr isl_aff_set_coefficient_si(Aff.Ptr aff, int type, int pos, int v);
    Aff.Ptr isl_aff_set_coefficient_val(Aff.Ptr aff, int type, int pos, Val.Ptr v);
    Aff.Ptr isl_aff_add_constant_si(Aff.Ptr aff, int v);
    Aff.Ptr isl_aff_add_constant_val(Aff.Ptr aff, Val.Ptr v);
    Aff.Ptr isl_aff_add_constant_num_si(Aff.Ptr aff, int v);
    Aff.Ptr isl_aff_add_coefficient_si(Aff.Ptr aff, int type, int pos, int v);
    Aff.Ptr isl_aff_add_coefficient_val(Aff.Ptr aff, int type, int pos, Val.Ptr v);
    boolean isl_aff_is_cst(Aff.Ptr aff);
    Aff.Ptr isl_aff_set_tuple_id(Aff.Ptr aff, int type, Id.Ptr id);
    Aff.Ptr isl_aff_set_dim_name(Aff.Ptr aff, int type, int pos, String s);
    Aff.Ptr isl_aff_set_dim_id(Aff.Ptr aff, int type, int pos, Id.Ptr id);
    boolean isl_aff_plain_is_equal(Aff.Ptr aff1, Aff.Ptr aff2);
    boolean isl_aff_plain_is_zero(Aff.Ptr aff);
    Aff.Ptr isl_aff_get_div(Aff.Ptr aff, int pos);
    Aff.Ptr isl_aff_neg(Aff.Ptr aff);
    Aff.Ptr isl_aff_ceil(Aff.Ptr aff);
    Aff.Ptr isl_aff_floor(Aff.Ptr aff);
    Aff.Ptr isl_aff_mod_val(Aff.Ptr aff, Val.Ptr mod);
    Aff.Ptr isl_aff_mul(Aff.Ptr aff1, Aff.Ptr aff2);
    Aff.Ptr isl_aff_div(Aff.Ptr aff1, Aff.Ptr aff2);
    Aff.Ptr isl_aff_add(Aff.Ptr aff1, Aff.Ptr aff2);
    Aff.Ptr isl_aff_sub(Aff.Ptr aff1, Aff.Ptr aff2);
    Aff.Ptr isl_aff_scale_val(Aff.Ptr aff, Val.Ptr v);
    Aff.Ptr isl_aff_scale_down_ui(Aff.Ptr aff, int f);
    Aff.Ptr isl_aff_scale_down_val(Aff.Ptr aff, Val.Ptr v);
    Aff.Ptr isl_aff_insert_dims(Aff.Ptr aff, int type, int first, int n);
    Aff.Ptr isl_aff_add_dims(Aff.Ptr aff, int type, int n);
    Aff.Ptr isl_aff_move_dims(Aff.Ptr aff, int dst_type, int dst_pos, int src_type, int src_pos, int n);
    Aff.Ptr isl_aff_drop_dims(Aff.Ptr aff, int type, int first, int n);
    Aff.Ptr isl_aff_project_domain_on_params(Aff.Ptr aff);
    Aff.Ptr isl_aff_align_params(Aff.Ptr aff, Space.Ptr model);
    Aff.Ptr isl_aff_gist(Aff.Ptr aff, Set.Ptr context);
    Aff.Ptr isl_aff_gist_params(Aff.Ptr aff, Set.Ptr context);
    Aff.Ptr isl_aff_pullback_aff(Aff.Ptr aff1, Aff.Ptr aff2);
    Aff.Ptr isl_aff_pullback_multi_aff(Aff.Ptr aff, MultiAff.Ptr ma);
    BasicSet.Ptr isl_aff_zero_basic_set(Aff.Ptr aff);
    BasicSet.Ptr isl_aff_neg_basic_set(Aff.Ptr aff);
    BasicSet.Ptr isl_aff_le_basic_set(Aff.Ptr aff1, Aff.Ptr aff2);
    BasicSet.Ptr isl_aff_ge_basic_set(Aff.Ptr aff1, Aff.Ptr aff2);
    void isl_ast_build_free(AstBuild.Ptr islobject);
    AstBuild.Ptr isl_ast_build_copy(AstBuild.Ptr islobject);
    AstBuild.Ptr isl_ast_build_from_context(Set.Ptr set);
    AstNode.Ptr isl_ast_build_ast_from_schedule(AstBuild.Ptr build, UnionMap.Ptr schedule);
    void isl_ast_expr_free(AstExpr.Ptr islobject);
    AstExpr.Ptr isl_ast_expr_copy(AstExpr.Ptr islobject);
    int isl_ast_expr_get_type(AstExpr.Ptr expr);
    int isl_ast_expr_get_op_type(AstExpr.Ptr expr);
    void isl_ast_node_free(AstNode.Ptr islobject);
    AstNode.Ptr isl_ast_node_copy(AstNode.Ptr islobject);
    int isl_ast_node_get_type(AstNode.Ptr node);
    void isl_band_free(Band.Ptr islobject);
    Band.Ptr isl_band_copy(Band.Ptr islobject);
    UnionMap.Ptr isl_band_get_prefix_schedule(Band.Ptr band);
    UnionMap.Ptr isl_band_get_partial_schedule(Band.Ptr band);
    UnionMap.Ptr isl_band_get_suffix_schedule(Band.Ptr band);
    void isl_basic_map_free(BasicMap.Ptr islobject);
    BasicMap.Ptr isl_basic_map_copy(BasicMap.Ptr islobject);
    BasicMap.Ptr isl_basic_map_from_constraint(Constraint.Ptr constraint);
    BasicMap.Ptr isl_basic_map_identity(Space.Ptr dim);
    BasicMap.Ptr isl_basic_map_equal(Space.Ptr dim, int n_equal);
    BasicMap.Ptr isl_basic_map_less_at(Space.Ptr dim, int pos);
    BasicMap.Ptr isl_basic_map_more_at(Space.Ptr dim, int pos);
    BasicMap.Ptr isl_basic_map_empty(Space.Ptr dim);
    BasicMap.Ptr isl_basic_map_universe(Space.Ptr dim);
    BasicMap.Ptr isl_basic_map_nat_universe(Space.Ptr dim);
    BasicMap.Ptr isl_basic_map_universe_like(BasicMap.Ptr bmap);
    BasicMap.Ptr isl_basic_map_from_basic_set(BasicSet.Ptr bset, Space.Ptr dim);
    BasicMap.Ptr isl_basic_map_read_from_str(Context.Ptr ctx, String str);
    BasicMap.Ptr isl_basic_map_from_domain(BasicSet.Ptr bset);
    BasicMap.Ptr isl_basic_map_from_range(BasicSet.Ptr bset);
    BasicMap.Ptr isl_basic_map_from_domain_and_range(BasicSet.Ptr domain, BasicSet.Ptr range);
    BasicMap.Ptr isl_basic_map_from_constraint_matrices(Space.Ptr dim, Mat.Ptr eq, Mat.Ptr ineq, int c1, int c2, int c3, int c4, int c5);
    BasicMap.Ptr isl_basic_map_from_aff(Aff.Ptr aff);
    BasicMap.Ptr isl_basic_map_from_multi_aff(MultiAff.Ptr maff);
    BasicMap.Ptr isl_basic_map_from_qpolynomial(Qpolynomial.Ptr qp);
    PwMultiAff.Ptr isl_basic_map_lexmin_pw_multi_aff(BasicMap.Ptr bmap);
    boolean isl_basic_map_is_universe(BasicMap.Ptr bmap);
    boolean isl_basic_map_is_empty(BasicMap.Ptr bmap);
    boolean isl_basic_map_is_subset(BasicMap.Ptr bmap1, BasicMap.Ptr bmap2);
    boolean isl_basic_map_is_strict_subset(BasicMap.Ptr bmap1, BasicMap.Ptr bmap2);
    BasicMap.Ptr isl_basic_map_product(BasicMap.Ptr bmap1, BasicMap.Ptr bmap2);
    BasicMap.Ptr isl_basic_map_domain_product(BasicMap.Ptr bmap1, BasicMap.Ptr bmap2);
    BasicMap.Ptr isl_basic_map_range_product(BasicMap.Ptr bmap1, BasicMap.Ptr bmap2);
    BasicMap.Ptr isl_basic_map_flat_product(BasicMap.Ptr bmap1, BasicMap.Ptr bmap2);
    BasicMap.Ptr isl_basic_map_flat_range_product(BasicMap.Ptr bmap1, BasicMap.Ptr bmap2);
    int isl_basic_map_foreach_constraint(BasicMap.Ptr bmap, Callback fn, Pointer user);
    BasicMap.Ptr isl_basic_map_add_constraint(BasicMap.Ptr bmap, Constraint.Ptr constraint);
    int isl_basic_map_n_in(BasicMap.Ptr bmap);
    int isl_basic_map_n_out(BasicMap.Ptr bmap);
    int isl_basic_map_n_param(BasicMap.Ptr bmap);
    int isl_basic_map_n_div(BasicMap.Ptr bmap);
    int isl_basic_map_total_dim(BasicMap.Ptr bmap);
    int isl_basic_map_dim(BasicMap.Ptr bmap, int type);
    Space.Ptr isl_basic_map_get_space(BasicMap.Ptr bmap);
    Aff.Ptr isl_basic_map_get_div(BasicMap.Ptr bmap, int pos);
    LocalSpace.Ptr isl_basic_map_get_local_space(BasicMap.Ptr bmap);
    BasicMap.Ptr isl_basic_map_set_tuple_name(BasicMap.Ptr bmap, int type, String s);
    String isl_basic_map_get_tuple_name(BasicMap.Ptr bmap, int type);
    String isl_basic_map_get_dim_name(BasicMap.Ptr bmap, int type, int pos);
    BasicMap.Ptr isl_basic_map_set_dim_name(BasicMap.Ptr bmap, int type, int pos, String s);
    BasicMap.Ptr isl_basic_map_set_tuple_id(BasicMap.Ptr bmap, int type, Id.Ptr id);
    boolean isl_basic_map_has_dim_id(BasicMap.Ptr bmap, int type, int pos);
    boolean isl_basic_map_is_rational(BasicMap.Ptr bmap);
    BasicMap.Ptr isl_basic_map_remove_redundancies(BasicMap.Ptr bmap);
    BasicMap.Ptr isl_basic_map_intersect_domain(BasicMap.Ptr bmap, BasicSet.Ptr bset);
    BasicMap.Ptr isl_basic_map_intersect_range(BasicMap.Ptr bmap, BasicSet.Ptr bset);
    BasicMap.Ptr isl_basic_map_intersect(BasicMap.Ptr bmap1, BasicMap.Ptr bmap2);
    Map.Ptr isl_basic_map_union(BasicMap.Ptr bmap1, BasicMap.Ptr bmap2);
    BasicMap.Ptr isl_basic_map_apply_domain(BasicMap.Ptr bmap1, BasicMap.Ptr bmap2);
    BasicMap.Ptr isl_basic_map_apply_range(BasicMap.Ptr bmap1, BasicMap.Ptr bmap2);
    BasicMap.Ptr isl_basic_map_affine_hull(BasicMap.Ptr bmap);
    BasicMap.Ptr isl_basic_map_reverse(BasicMap.Ptr bmap);
    BasicSet.Ptr isl_basic_map_domain(BasicMap.Ptr bmap);
    BasicSet.Ptr isl_basic_map_range(BasicMap.Ptr bmap);
    BasicMap.Ptr isl_basic_map_domain_map(BasicMap.Ptr bmap);
    BasicMap.Ptr isl_basic_map_range_map(BasicMap.Ptr bmap);
    BasicMap.Ptr isl_basic_map_remove_dims(BasicMap.Ptr bmap, int type, int first, int n);
    BasicMap.Ptr isl_basic_map_eliminate(BasicMap.Ptr bmap, int type, int first, int n);
    BasicMap.Ptr isl_basic_map_sample(BasicMap.Ptr bmap);
    BasicMap.Ptr isl_basic_map_detect_equalities(BasicMap.Ptr bmap);
    BasicMap.Ptr isl_basic_map_fix_val(BasicMap.Ptr bmap, int type, int pos, Val.Ptr v);
    boolean isl_basic_map_is_equal(BasicMap.Ptr bmap1, BasicMap.Ptr bmap2);
    boolean isl_basic_map_is_disjoint(BasicMap.Ptr bmap1, BasicMap.Ptr bmap2);
    Map.Ptr isl_basic_map_lexmin(BasicMap.Ptr bmap);
    Map.Ptr isl_basic_map_lexmax(BasicMap.Ptr bmap);
    BasicSet.Ptr isl_basic_map_deltas(BasicMap.Ptr bmap);
    BasicMap.Ptr isl_basic_map_deltas_map(BasicMap.Ptr bmap);
    BasicMap.Ptr isl_basic_map_add(BasicMap.Ptr bmap, int type, int n);
    BasicMap.Ptr isl_basic_map_insert_dims(BasicMap.Ptr bmap, int type, int pos, int n);
    BasicMap.Ptr isl_basic_map_move_dims(BasicMap.Ptr bmap, int dst_type, int dst_pos, int src_type, int src_pos, int n);
    BasicMap.Ptr isl_basic_map_project_out(BasicMap.Ptr bmap, int type, int first, int n);
    BasicMap.Ptr isl_basic_map_remove_divs(BasicMap.Ptr bmap);
    BasicMap.Ptr isl_basic_map_remove_divs_involving_dims(BasicMap.Ptr bmap, int type, int first, int n);
    BasicMap.Ptr isl_basic_map_equate(BasicMap.Ptr bmap, int type1, int pos1, int type2, int pos2);
    BasicMap.Ptr isl_basic_map_order_ge(BasicMap.Ptr bmap, int type1, int pos1, int type2, int pos2);
    BasicMap.Ptr isl_basic_map_order_gt(BasicMap.Ptr bmap, int type1, int pos1, int type2, int pos2);
    BasicSet.Ptr isl_basic_map_wrap(BasicMap.Ptr bmap);
    BasicMap.Ptr isl_basic_map_flatten(BasicMap.Ptr bmap);
    BasicMap.Ptr isl_basic_map_flatten_domain(BasicMap.Ptr bmap);
    BasicMap.Ptr isl_basic_map_flatten_range(BasicMap.Ptr bmap);
    boolean isl_basic_map_is_single_valued(BasicMap.Ptr bmap);
    boolean isl_basic_map_can_zip(BasicMap.Ptr bmap);
    BasicMap.Ptr isl_basic_map_zip(BasicMap.Ptr bmap);
    boolean isl_basic_map_can_curry(BasicMap.Ptr bmap);
    BasicMap.Ptr isl_basic_map_curry(BasicMap.Ptr bmap);
    boolean isl_basic_map_can_uncurry(BasicMap.Ptr bmap);
    BasicMap.Ptr isl_basic_map_uncurry(BasicMap.Ptr bmap);
    Map.Ptr isl_basic_map_compute_divs(BasicMap.Ptr bmap);
    BasicMap.Ptr isl_basic_map_drop_constraints_involving_dims(BasicMap.Ptr bmap, int type, int first, int n);
    boolean isl_basic_map_involves_dims(BasicMap.Ptr bmap, int type, int first, int n);
    BasicMap.Ptr isl_basic_map_gist(BasicMap.Ptr bmap, BasicMap.Ptr context);
    BasicMap.Ptr isl_basic_map_align_params(BasicMap.Ptr bmap, Space.Ptr model);
    Mat.Ptr isl_basic_map_equalities_matrix(BasicMap.Ptr bmap, int c1, int c2, int c3, int c4, int c5);
    Mat.Ptr isl_basic_map_inequalities_matrix(BasicMap.Ptr bmap, int c1, int c2, int c3, int c4, int c5);
    void isl_basic_set_free(BasicSet.Ptr islobject);
    BasicSet.Ptr isl_basic_set_copy(BasicSet.Ptr islobject);
    BasicSet.Ptr isl_basic_set_from_constraint(Constraint.Ptr constraint);
    BasicSet.Ptr isl_basic_set_universe(Space.Ptr dim);
    BasicSet.Ptr isl_basic_set_read_from_str(Context.Ptr ctx, String str);
    BasicSet.Ptr isl_basic_set_from_point(Point.Ptr pnt);
    BasicSet.Ptr isl_basic_set_box_from_points(Point.Ptr pnt1, Point.Ptr pnt2);
    BasicSet.Ptr isl_basic_set_from_constraint_matrices(Space.Ptr dim, Mat.Ptr eq, Mat.Ptr ineq, int c1, int c2, int c3, int c4);
    int isl_basic_set_n_constraint(BasicSet.Ptr bset);
    int isl_basic_set_foreach_constraint(BasicSet.Ptr bset, Callback fn, Pointer user);
    int isl_basic_set_foreach_bound_pair(BasicSet.Ptr bset, int type, int pos, Callback fn, Pointer user);
    BasicSet.Ptr isl_basic_set_add_constraint(BasicSet.Ptr bset, Constraint.Ptr constraint);
    int isl_basic_set_dim(BasicSet.Ptr bset, int type);
    LocalSpace.Ptr isl_basic_set_get_local_space(BasicSet.Ptr bset);
    String isl_basic_set_get_tuple_name(BasicSet.Ptr bset);
    BasicSet.Ptr isl_basic_set_set_tuple_name(BasicSet.Ptr set, String s);
    String isl_basic_set_get_dim_name(BasicSet.Ptr bset, int type, int pos);
    BasicSet.Ptr isl_basic_set_set_dim_name(BasicSet.Ptr bset, int type, int pos, String s);
    BasicSet.Ptr isl_basic_set_intersect(BasicSet.Ptr bset1, BasicSet.Ptr bset2);
    BasicSet.Ptr isl_basic_set_intersect_params(BasicSet.Ptr bset1, BasicSet.Ptr bset2);
    BasicSet.Ptr isl_basic_set_apply(BasicSet.Ptr bset, BasicMap.Ptr bmap);
    BasicSet.Ptr isl_basic_set_affine_hull(BasicSet.Ptr bset);
    BasicSet.Ptr isl_basic_set_sample(BasicSet.Ptr bset);
    BasicSet.Ptr isl_basic_set_detect_equalities(BasicSet.Ptr bset);
    boolean isl_basic_set_is_equal(BasicSet.Ptr bset1, BasicSet.Ptr bset2);
    Set.Ptr isl_basic_set_lexmin(BasicSet.Ptr bset);
    Set.Ptr isl_basic_set_lexmax(BasicSet.Ptr bset);
    Set.Ptr isl_basic_set_union(BasicSet.Ptr bset1, BasicSet.Ptr bset2);
    BasicSet.Ptr isl_basic_set_params(BasicSet.Ptr bset);
    boolean isl_basic_set_is_empty(BasicSet.Ptr bset);
    boolean isl_basic_set_is_subset(BasicSet.Ptr bset1, BasicSet.Ptr bset2);
    Point.Ptr isl_basic_set_sample_point(BasicSet.Ptr bset);
    BasicSet.Ptr isl_basic_set_flat_product(BasicSet.Ptr bset1, BasicSet.Ptr bset2);
    BasicSet.Ptr isl_basic_set_insert_dims(BasicSet.Ptr bset, int type, int pos, int n);
    BasicSet.Ptr isl_basic_set_add_dims(BasicSet.Ptr bset, int type, int n);
    BasicSet.Ptr isl_basic_set_move_dims(BasicSet.Ptr bset, int dst_type, int dst_pos, int src_type, int src_pos, int n);
    BasicSet.Ptr isl_basic_set_project_out(BasicSet.Ptr bset, int type, int first, int n);
    BasicSet.Ptr isl_basic_set_remove_divs(BasicSet.Ptr bset);
    BasicSet.Ptr isl_basic_set_eliminate(BasicSet.Ptr bset, int type, int first, int n);
    BasicSet.Ptr isl_basic_set_remove_divs_involving_dims(BasicSet.Ptr bset, int type, int first, int n);
    BasicSet.Ptr isl_basic_set_remove_unknown_divs(BasicSet.Ptr bset);
    BasicSet.Ptr isl_basic_set_drop_constraints_involving_dims(BasicSet.Ptr bset, int type, int first, int n);
    BasicSet.Ptr isl_basic_set_drop_constraints_not_involving_dims(BasicSet.Ptr bset, int type, int first, int n);
    boolean isl_basic_set_involves_dims(BasicSet.Ptr bset, int type, int first, int n);
    BasicSet.Ptr isl_basic_set_neg(BasicSet.Ptr bset);
    BasicSet.Ptr isl_basic_set_gist(BasicSet.Ptr bset, BasicSet.Ptr context);
    BasicSet.Ptr isl_basic_set_lift(BasicSet.Ptr bset);
    BasicSet.Ptr isl_basic_set_align_params(BasicSet.Ptr bset, Space.Ptr model);
    Mat.Ptr isl_basic_set_equalities_matrix(BasicSet.Ptr bset, int c1, int c2, int c3, int c4);
    Mat.Ptr isl_basic_set_inequalities_matrix(BasicSet.Ptr bset, int c1, int c2, int c3, int c4);
    Mat.Ptr isl_basic_set_reduced_basis(BasicSet.Ptr bset);
    BasicSet.Ptr isl_basic_set_coefficients(BasicSet.Ptr bset);
    BasicSet.Ptr isl_basic_set_solutions(BasicSet.Ptr bset);
    boolean isl_basic_set_is_wrapping(BasicSet.Ptr bset);
    BasicMap.Ptr isl_basic_set_unwrap(BasicSet.Ptr bset);
    BasicSet.Ptr isl_basic_set_flatten(BasicSet.Ptr bset);
    void isl_constraint_free(Constraint.Ptr islobject);
    Constraint.Ptr isl_constraint_copy(Constraint.Ptr islobject);
    Constraint.Ptr isl_equality_alloc(LocalSpace.Ptr ls);
    Constraint.Ptr isl_inequality_alloc(LocalSpace.Ptr ls);
    Space.Ptr isl_constraint_get_space(Constraint.Ptr constraint);
    LocalSpace.Ptr isl_constraint_get_local_space(Constraint.Ptr constraint);
    int isl_constraint_dim(Constraint.Ptr constraint, int type);
    boolean isl_constraint_involves_dims(Constraint.Ptr constraint, int type, int first, int n);
    String isl_constraint_get_dim_name(Constraint.Ptr constraint, int type, int pos);
    Val.Ptr isl_constraint_get_constant_val(Constraint.Ptr constraint);
    Val.Ptr isl_constraint_get_coefficient_val(Constraint.Ptr constraint, int type, int pos);
    Constraint.Ptr isl_constraint_set_constant_val(Constraint.Ptr constraint, Val.Ptr v);
    Constraint.Ptr isl_constraint_set_coefficient_val(Constraint.Ptr constraint, int type, int pos, Val.Ptr v);
    Aff.Ptr isl_constraint_get_div(Constraint.Ptr constraint, int pos);
    Constraint.Ptr isl_constraint_negate(Constraint.Ptr constraint);
    boolean isl_constraint_is_equality(Constraint.Ptr constraint);
    boolean isl_constraint_is_div_constraint(Constraint.Ptr constraint);
    boolean isl_constraint_is_lower_bound(Constraint.Ptr constraint, int type, int pos);
    boolean isl_constraint_is_upper_bound(Constraint.Ptr constraint, int type, int pos);
    Aff.Ptr isl_constraint_get_bound(Constraint.Ptr constraint, int type, int pos);
    Aff.Ptr isl_constraint_get_aff(Constraint.Ptr constraint);
    void isl_id_free(Id.Ptr islobject);
    Id.Ptr isl_id_copy(Id.Ptr islobject);
    Id.Ptr isl_id_alloc(Context.Ptr ctx, String name, Pointer user);
    Pointer isl_id_get_user(Id.Ptr id);
    void isl_local_space_free(LocalSpace.Ptr islobject);
    LocalSpace.Ptr isl_local_space_copy(LocalSpace.Ptr islobject);
    LocalSpace.Ptr isl_local_space_from_space(Space.Ptr dim);
    boolean isl_local_space_is_set(LocalSpace.Ptr ls);
    LocalSpace.Ptr isl_local_space_set_tuple_id(LocalSpace.Ptr ls, int type, Id.Ptr id);
    int isl_local_space_dim(LocalSpace.Ptr ls, int type);
    boolean isl_local_space_has_dim_name(LocalSpace.Ptr ls, int type, int pos);
    String isl_local_space_get_dim_name(LocalSpace.Ptr ls, int type, int pos);
    LocalSpace.Ptr isl_local_space_set_dim_name(LocalSpace.Ptr ls, int type, int pos, String s);
    boolean isl_local_space_has_dim_id(LocalSpace.Ptr ls, int type, int pos);
    Id.Ptr isl_local_space_get_dim_id(LocalSpace.Ptr ls, int type, int pos);
    LocalSpace.Ptr isl_local_space_set_dim_id(LocalSpace.Ptr ls, int type, int pos, Id.Ptr id);
    Space.Ptr isl_local_space_get_space(LocalSpace.Ptr ls);
    Aff.Ptr isl_local_space_get_div(LocalSpace.Ptr ls, int pos);
    LocalSpace.Ptr isl_local_space_domain(LocalSpace.Ptr ls);
    LocalSpace.Ptr isl_local_space_range(LocalSpace.Ptr ls);
    LocalSpace.Ptr isl_local_space_from_domain(LocalSpace.Ptr ls);
    LocalSpace.Ptr isl_local_space_add_dims(LocalSpace.Ptr ls, int type, int n);
    LocalSpace.Ptr isl_local_space_drop_dims(LocalSpace.Ptr ls, int type, int first, int n);
    LocalSpace.Ptr isl_local_space_insert_dims(LocalSpace.Ptr ls, int type, int first, int n);
    LocalSpace.Ptr isl_local_space_intersect(LocalSpace.Ptr ls1, LocalSpace.Ptr ls2);
    boolean isl_local_space_is_equal(LocalSpace.Ptr ls1, LocalSpace.Ptr ls2);
    BasicMap.Ptr isl_local_space_lifting(LocalSpace.Ptr ls);
    void isl_map_free(Map.Ptr islobject);
    Map.Ptr isl_map_copy(Map.Ptr islobject);
    Map.Ptr isl_map_from_pw_aff(PwAff.Ptr pwaff);
    Map.Ptr isl_map_universe(Space.Ptr dim);
    Map.Ptr isl_map_nat_universe(Space.Ptr dim);
    Map.Ptr isl_map_empty(Space.Ptr dim);
    Map.Ptr isl_map_identity(Space.Ptr dim);
    Map.Ptr isl_map_lex_lt_first(Space.Ptr dim, int n);
    Map.Ptr isl_map_lex_le_first(Space.Ptr dim, int n);
    Map.Ptr isl_map_lex_lt(Space.Ptr set_dim);
    Map.Ptr isl_map_lex_le(Space.Ptr set_dim);
    Map.Ptr isl_map_lex_gt_first(Space.Ptr dim, int n);
    Map.Ptr isl_map_lex_ge_first(Space.Ptr dim, int n);
    Map.Ptr isl_map_lex_gt(Space.Ptr set_dim);
    Map.Ptr isl_map_lex_ge(Space.Ptr set_dim);
    Map.Ptr isl_map_from_union_map(UnionMap.Ptr umap);
    Map.Ptr isl_map_read_from_str(Context.Ptr ctx, String str);
    Map.Ptr isl_map_from_basic_map(BasicMap.Ptr bmap);
    Map.Ptr isl_map_from_domain(Set.Ptr set);
    Map.Ptr isl_map_from_domain_and_range(Set.Ptr domain, Set.Ptr range);
    Map.Ptr isl_map_from_set(Set.Ptr set, Space.Ptr dim);
    Map.Ptr isl_map_from_aff(Aff.Ptr aff);
    Map.Ptr isl_map_from_multi_aff(MultiAff.Ptr maff);
    PwMultiAff.Ptr isl_map_lexmin_pw_multi_aff(Map.Ptr map);
    Map.Ptr isl_map_add_basic_map(Map.Ptr map, BasicMap.Ptr bmap);
    Map.Ptr isl_map_reverse(Map.Ptr map);
    Map.Ptr isl_map_union(Map.Ptr map1, Map.Ptr map2);
    Map.Ptr isl_map_intersect_domain(Map.Ptr map, Set.Ptr set);
    Map.Ptr isl_map_intersect_range(Map.Ptr map, Set.Ptr set);
    Map.Ptr isl_map_apply_domain(Map.Ptr map1, Map.Ptr map2);
    Map.Ptr isl_map_apply_range(Map.Ptr map1, Map.Ptr map2);
    Map.Ptr isl_map_preimage_domain_multi_aff(Map.Ptr map, MultiAff.Ptr ma);
    Map.Ptr isl_map_preimage_domain_pw_multi_aff(Map.Ptr map, PwMultiAff.Ptr pma);
    Map.Ptr isl_map_preimage_domain_multi_pw_aff(Map.Ptr map, MultiPwAff.Ptr mpa);
    Map.Ptr isl_map_product(Map.Ptr map1, Map.Ptr map2);
    Map.Ptr isl_map_domain_product(Map.Ptr map1, Map.Ptr map2);
    Map.Ptr isl_map_range_product(Map.Ptr map1, Map.Ptr map2);
    Map.Ptr isl_map_flat_product(Map.Ptr map1, Map.Ptr map2);
    Map.Ptr isl_map_flat_domain_product(Map.Ptr map1, Map.Ptr map2);
    Map.Ptr isl_map_flat_range_product(Map.Ptr map1, Map.Ptr map2);
    Map.Ptr isl_map_add_constraint(Map.Ptr map, Constraint.Ptr constraint);
    int isl_map_n_in(Map.Ptr map);
    int isl_map_n_out(Map.Ptr map);
    int isl_map_n_param(Map.Ptr map);
    int isl_map_dim(Map.Ptr map, int type);
    Space.Ptr isl_map_get_space(Map.Ptr map);
    boolean isl_map_has_tuple_name(Map.Ptr map, int type);
    String isl_map_get_tuple_name(Map.Ptr map, int type);
    Map.Ptr isl_map_set_tuple_name(Map.Ptr map, int type, String s);
    boolean isl_map_has_dim_name(Map.Ptr map, int type, int pos);
    String isl_map_get_dim_name(Map.Ptr map, int type, int pos);
    Map.Ptr isl_map_set_dim_name(Map.Ptr map, int type, int pos, String s);
    Map.Ptr isl_map_set_dim_id(Map.Ptr map, int type, int pos, Id.Ptr id);
    boolean isl_map_has_dim_id(Map.Ptr map, int type, int pos);
    Id.Ptr isl_map_get_dim_id(Map.Ptr map, int type, int pos);
    Map.Ptr isl_map_set_tuple_id(Map.Ptr map, int type, Id.Ptr id);
    Map.Ptr isl_map_reset_tuple_id(Map.Ptr map, int type);
    boolean isl_map_has_tuple_id(Map.Ptr map, int type);
    Id.Ptr isl_map_get_tuple_id(Map.Ptr map, int type);
    int isl_map_find_dim_by_id(Map.Ptr map, int type, Id.Ptr id);
    int isl_map_find_dim_by_name(Map.Ptr map, int type, String name);
    Map.Ptr isl_map_remove_redundancies(Map.Ptr map);
    BasicMap.Ptr isl_map_simple_hull(Map.Ptr map);
    BasicMap.Ptr isl_map_unshifted_simple_hull(Map.Ptr map);
    Map.Ptr isl_map_floordiv_val(Map.Ptr map, Val.Ptr d);
    Map.Ptr isl_map_lexmin(Map.Ptr map);
    Map.Ptr isl_map_lexmax(Map.Ptr map);
    Map.Ptr isl_map_intersect(Map.Ptr map1, Map.Ptr map2);
    Map.Ptr isl_map_intersect_params(Map.Ptr map, Set.Ptr params);
    Map.Ptr isl_map_subtract(Map.Ptr map1, Map.Ptr map2);
    Map.Ptr isl_map_subtract_domain(Map.Ptr map, Set.Ptr dom);
    Map.Ptr isl_map_subtract_range(Map.Ptr map, Set.Ptr dom);
    Map.Ptr isl_map_complement(Map.Ptr map);
    Map.Ptr isl_map_fix_val(Map.Ptr map, int type, int pos, Val.Ptr v);
    Set.Ptr isl_map_deltas(Map.Ptr map);
    Map.Ptr isl_map_deltas_map(Map.Ptr map);
    Map.Ptr isl_map_detect_equalities(Map.Ptr map);
    BasicMap.Ptr isl_map_affine_hull(Map.Ptr map);
    BasicMap.Ptr isl_map_convex_hull(Map.Ptr map);
    BasicMap.Ptr isl_map_polyhedral_hull(Map.Ptr map);
    Map.Ptr isl_map_add_dims(Map.Ptr map, int type, int n);
    Map.Ptr isl_map_insert_dims(Map.Ptr map, int type, int pos, int n);
    Map.Ptr isl_map_move_dims(Map.Ptr map, int dst_type, int dst_pos, int src_type, int src_pos, int n);
    Map.Ptr isl_map_project_out(Map.Ptr map, int type, int first, int n);
    Map.Ptr isl_map_remove_unknown_divs(Map.Ptr map);
    Map.Ptr isl_map_remove_divs(Map.Ptr map);
    Map.Ptr isl_map_eliminate(Map.Ptr map, int type, int first, int n);
    Map.Ptr isl_map_remove_dims(Map.Ptr map, int type, int first, int n);
    Map.Ptr isl_map_remove_divs_involving_dims(Map.Ptr map, int type, int first, int n);
    Map.Ptr isl_map_equate(Map.Ptr map, int type1, int pos1, int type2, int pos2);
    Map.Ptr isl_map_oppose(Map.Ptr map, int type1, int pos1, int type2, int pos2);
    Map.Ptr isl_map_order_lt(Map.Ptr map, int type1, int pos1, int type2, int pos2);
    Map.Ptr isl_map_order_gt(Map.Ptr map, int type1, int pos1, int type2, int pos2);
    Set.Ptr isl_map_wrap(Map.Ptr map);
    Map.Ptr isl_map_flatten(Map.Ptr map);
    Map.Ptr isl_map_flatten_domain(Map.Ptr map);
    Map.Ptr isl_map_flatten_range(Map.Ptr map);
    Set.Ptr isl_map_params(Map.Ptr map);
    Set.Ptr isl_map_domain(Map.Ptr bmap);
    Set.Ptr isl_map_range(Map.Ptr map);
    Map.Ptr isl_map_domain_map(Map.Ptr map);
    Map.Ptr isl_map_range_map(Map.Ptr map);
    BasicMap.Ptr isl_map_sample(Map.Ptr map);
    boolean isl_map_plain_is_empty(Map.Ptr map);
    int isl_map_fast_is_empty(Map.Ptr map);
    boolean isl_map_plain_is_universe(Map.Ptr map);
    boolean isl_map_is_empty(Map.Ptr map);
    boolean isl_map_is_subset(Map.Ptr map1, Map.Ptr map2);
    boolean isl_map_is_strict_subset(Map.Ptr map1, Map.Ptr map2);
    boolean isl_map_is_equal(Map.Ptr map1, Map.Ptr map2);
    boolean isl_map_is_disjoint(Map.Ptr map1, Map.Ptr map2);
    boolean isl_map_plain_is_single_valued(Map.Ptr map);
    boolean isl_map_is_single_valued(Map.Ptr map);
    boolean isl_map_plain_is_injective(Map.Ptr map);
    boolean isl_map_is_injective(Map.Ptr map);
    boolean isl_map_is_bijective(Map.Ptr map);
    boolean isl_map_is_translation(Map.Ptr map);
    boolean isl_map_has_equal_space(Map.Ptr map1, Map.Ptr map2);
    boolean isl_map_can_zip(Map.Ptr map);
    Map.Ptr isl_map_zip(Map.Ptr map);
    boolean isl_map_can_curry(Map.Ptr map);
    Map.Ptr isl_map_curry(Map.Ptr map);
    boolean isl_map_can_uncurry(Map.Ptr map);
    Map.Ptr isl_map_uncurry(Map.Ptr map);
    Map.Ptr isl_map_make_disjoint(Map.Ptr map);
    Map.Ptr isl_map_compute_divs(Map.Ptr map);
    Map.Ptr isl_map_align_divs(Map.Ptr map);
    Map.Ptr isl_map_drop_constraints_involving_dims(Map.Ptr map, int type, int first, int n);
    boolean isl_map_involves_dims(Map.Ptr map, int type, int first, int n);
    Map.Ptr isl_map_gist(Map.Ptr map, Map.Ptr context);
    Map.Ptr isl_map_gist_domain(Map.Ptr map, Set.Ptr context);
    Map.Ptr isl_map_gist_range(Map.Ptr map, Set.Ptr context);
    Map.Ptr isl_map_gist_params(Map.Ptr map, Set.Ptr context);
    Map.Ptr isl_map_gist_basic_map(Map.Ptr map, BasicMap.Ptr context);
    Map.Ptr isl_map_coalesce(Map.Ptr map);
    boolean isl_map_plain_is_equal(Map.Ptr map1, Map.Ptr map2);
    int isl_map_fast_is_equal(Map.Ptr map1, Map.Ptr map2);
    int isl_map_foreach_basic_map(Map.Ptr map, Callback fn, Pointer user);
    Map.Ptr isl_map_fixed_power_val(Map.Ptr map, Val.Ptr exp);
    Map.Ptr isl_map_transitive_closure(Map.Ptr map, boolean[] exact);
    Map.Ptr isl_map_lex_le_map(Map.Ptr map1, Map.Ptr map2);
    Map.Ptr isl_map_lex_lt_map(Map.Ptr map1, Map.Ptr map2);
    Map.Ptr isl_map_lex_ge_map(Map.Ptr map1, Map.Ptr map2);
    Map.Ptr isl_map_lex_gt_map(Map.Ptr map1, Map.Ptr map2);
    Map.Ptr isl_map_align_params(Map.Ptr map, Space.Ptr model);
    PwAff.Ptr isl_map_dim_max(Map.Ptr map, int pos);
    PwQpolynomialFold.Ptr isl_map_apply_pw_qpolynomial_fold(Map.Ptr map, PwQpolynomialFold.Ptr pwf, boolean[] tight);
    void isl_mat_free(Mat.Ptr islobject);
    Mat.Ptr isl_mat_copy(Mat.Ptr islobject);
    Mat.Ptr isl_mat_alloc(Context.Ptr ctx, int n_row, int n_col);
    Mat.Ptr isl_mat_from_row_vec(Vec.Ptr vec);
    int isl_mat_rows(Mat.Ptr mat);
    int isl_mat_cols(Mat.Ptr mat);
    Val.Ptr isl_mat_get_element_val(Mat.Ptr mat, int row, int col);
    Mat.Ptr isl_mat_set_element_val(Mat.Ptr mat, int row, int col, Val.Ptr v);
    Mat.Ptr isl_mat_right_inverse(Mat.Ptr mat);
    Mat.Ptr isl_mat_right_kernel(Mat.Ptr mat);
    Mat.Ptr isl_mat_normalize(Mat.Ptr mat);
    Mat.Ptr isl_mat_normalize_row(Mat.Ptr mat, int row);
    Mat.Ptr isl_mat_insert_cols(Mat.Ptr mat, int col, int n);
    Mat.Ptr isl_mat_insert_rows(Mat.Ptr mat, int row, int n);
    Mat.Ptr isl_mat_move_cols(Mat.Ptr mat, int dst_col, int src_col, int n);
    Mat.Ptr isl_mat_add_rows(Mat.Ptr mat, int n);
    Mat.Ptr isl_mat_insert_zero_cols(Mat.Ptr mat, int first, int n);
    Mat.Ptr isl_mat_add_zero_cols(Mat.Ptr mat, int n);
    Mat.Ptr isl_mat_insert_zero_rows(Mat.Ptr mat, int row, int n);
    Mat.Ptr isl_mat_add_zero_rows(Mat.Ptr mat, int n);
    Mat.Ptr isl_mat_concat(Mat.Ptr top, Mat.Ptr bot);
    Mat.Ptr isl_mat_vec_concat(Mat.Ptr top, Vec.Ptr bot);
    boolean isl_mat_is_equal(Mat.Ptr mat1, Mat.Ptr mat2);
    int isl_mat_initial_non_zero_cols(Mat.Ptr mat);
    void isl_multi_aff_free(MultiAff.Ptr islobject);
    MultiAff.Ptr isl_multi_aff_copy(MultiAff.Ptr islobject);
    MultiAff.Ptr isl_multi_aff_from_aff(Aff.Ptr aff);
    MultiAff.Ptr isl_multi_aff_add(MultiAff.Ptr maff1, MultiAff.Ptr maff2);
    MultiAff.Ptr isl_multi_aff_sub(MultiAff.Ptr ma1, MultiAff.Ptr ma2);
    MultiAff.Ptr isl_multi_aff_product(MultiAff.Ptr ma1, MultiAff.Ptr ma2);
    MultiAff.Ptr isl_multi_aff_gist_params(MultiAff.Ptr maff, Set.Ptr context);
    MultiAff.Ptr isl_multi_aff_gist(MultiAff.Ptr maff, Set.Ptr context);
    MultiAff.Ptr isl_multi_aff_lift(MultiAff.Ptr maff, LocalSpace.Ptr[] ls);
    MultiAff.Ptr isl_multi_aff_pullback_multi_aff(MultiAff.Ptr ma1, MultiAff.Ptr ma2);
    Set.Ptr isl_multi_aff_lex_le_set(MultiAff.Ptr ma1, MultiAff.Ptr ma2);
    Set.Ptr isl_multi_aff_lex_ge_set(MultiAff.Ptr ma1, MultiAff.Ptr ma2);
    void isl_multi_pw_aff_free(MultiPwAff.Ptr islobject);
    MultiPwAff.Ptr isl_multi_pw_aff_copy(MultiPwAff.Ptr islobject);
    void isl_point_free(Point.Ptr islobject);
    Point.Ptr isl_point_copy(Point.Ptr islobject);
    Point.Ptr isl_point_zero(Space.Ptr dim);
    Point.Ptr isl_point_void(Space.Ptr dim);
    Space.Ptr isl_point_get_space(Point.Ptr pnt);
    Val.Ptr isl_point_get_coordinate_val(Point.Ptr pnt, int type, int pos);
    Point.Ptr isl_point_set_coordinate_val(Point.Ptr pnt, int type, int pos, Val.Ptr v);
    boolean isl_point_is_void(Point.Ptr pnt);
    void isl_printer_free(Printer.Ptr islobject);
    Printer.Ptr isl_printer_copy(Printer.Ptr islobject);
    Printer.Ptr isl_printer_to_str(Context.Ptr ctx);
    String isl_printer_get_str(Printer.Ptr printer);
    Printer.Ptr isl_printer_print_id(Printer.Ptr p, Id.Ptr id);
    Printer.Ptr isl_printer_print_space(Printer.Ptr p, Space.Ptr dim);
    Printer.Ptr isl_printer_print_local_space(Printer.Ptr p, LocalSpace.Ptr ls);
    Printer.Ptr isl_printer_print_constraint(Printer.Ptr p, Constraint.Ptr c);
    Printer.Ptr isl_printer_print_point(Printer.Ptr printer, Point.Ptr pnt);
    Printer.Ptr isl_printer_print_pw_multi_aff(Printer.Ptr p, PwMultiAff.Ptr pma);
    Printer.Ptr isl_printer_print_val(Printer.Ptr p, Val.Ptr v);
    Printer.Ptr isl_printer_print_aff(Printer.Ptr p, Aff.Ptr aff);
    Printer.Ptr isl_printer_print_pw_aff(Printer.Ptr p, PwAff.Ptr pwaff);
    Printer.Ptr isl_printer_print_multi_aff(Printer.Ptr p, MultiAff.Ptr maff);
    Printer.Ptr isl_printer_print_union_pw_multi_aff(Printer.Ptr p, UnionPwMultiAff.Ptr upma);
    Printer.Ptr isl_printer_print_multi_pw_aff(Printer.Ptr p, MultiPwAff.Ptr mpa);
    Printer.Ptr isl_printer_print_union_map(Printer.Ptr p, UnionMap.Ptr umap);
    Printer.Ptr isl_printer_print_union_set(Printer.Ptr p, UnionSet.Ptr uset);
    Printer.Ptr isl_printer_print_vec(Printer.Ptr printer, Vec.Ptr vec);
    Printer.Ptr isl_printer_print_basic_set(Printer.Ptr printer, BasicSet.Ptr bset);
    Printer.Ptr isl_printer_print_set(Printer.Ptr printer, Set.Ptr map);
    Printer.Ptr isl_printer_print_basic_map(Printer.Ptr printer, BasicMap.Ptr bmap);
    Printer.Ptr isl_printer_print_map(Printer.Ptr printer, Map.Ptr map);
    Printer.Ptr isl_printer_print_band(Printer.Ptr p, Band.Ptr band);
    Printer.Ptr isl_printer_print_schedule(Printer.Ptr p, Schedule.Ptr schedule);
    Printer.Ptr isl_printer_print_qpolynomial(Printer.Ptr p, Qpolynomial.Ptr qp);
    Printer.Ptr isl_printer_print_pw_qpolynomial(Printer.Ptr p, PwQpolynomial.Ptr pwqp);
    Printer.Ptr isl_printer_print_qpolynomial_fold(Printer.Ptr p, QpolynomialFold.Ptr fold);
    Printer.Ptr isl_printer_print_pw_qpolynomial_fold(Printer.Ptr p, PwQpolynomialFold.Ptr pwf);
    Printer.Ptr isl_printer_print_union_pw_qpolynomial(Printer.Ptr p, UnionPwQpolynomial.Ptr upwqp);
    Printer.Ptr isl_printer_print_union_pw_qpolynomial_fold(Printer.Ptr p, UnionPwQpolynomialFold.Ptr upwf);
    void isl_pw_aff_free(PwAff.Ptr islobject);
    PwAff.Ptr isl_pw_aff_copy(PwAff.Ptr islobject);
    PwAff.Ptr isl_pw_aff_from_aff(Aff.Ptr aff);
    PwAff.Ptr isl_pw_aff_empty(Space.Ptr dim);
    PwAff.Ptr isl_pw_aff_alloc(Set.Ptr set, Aff.Ptr aff);
    PwAff.Ptr isl_pw_aff_zero_on_domain(LocalSpace.Ptr ls);
    PwAff.Ptr isl_pw_aff_var_on_domain(LocalSpace.Ptr ls, int type, int pos);
    Space.Ptr isl_pw_aff_get_domain_space(PwAff.Ptr pwaff);
    Space.Ptr isl_pw_aff_get_space(PwAff.Ptr pwaff);
    String isl_pw_aff_get_dim_name(PwAff.Ptr pa, int type, int pos);
    boolean isl_pw_aff_has_dim_id(PwAff.Ptr pa, int type, int pos);
    Id.Ptr isl_pw_aff_get_dim_id(PwAff.Ptr pa, int type, int pos);
    PwAff.Ptr isl_pw_aff_set_dim_id(PwAff.Ptr pma, int type, int pos, Id.Ptr id);
    boolean isl_pw_aff_is_empty(PwAff.Ptr pwaff);
    boolean isl_pw_aff_is_equal(PwAff.Ptr pa1, PwAff.Ptr pa2);
    PwAff.Ptr isl_pw_aff_union_min(PwAff.Ptr pwaff1, PwAff.Ptr pwaff2);
    PwAff.Ptr isl_pw_aff_union_max(PwAff.Ptr pwaff1, PwAff.Ptr pwaff2);
    PwAff.Ptr isl_pw_aff_union_add(PwAff.Ptr pwaff1, PwAff.Ptr pwaff2);
    int isl_pw_aff_dim(PwAff.Ptr pwaff, int type);
    boolean isl_pw_aff_involves_dims(PwAff.Ptr pwaff, int type, int first, int n);
    boolean isl_pw_aff_is_cst(PwAff.Ptr pwaff);
    PwAff.Ptr isl_pw_aff_align_params(PwAff.Ptr pwaff, Space.Ptr model);
    boolean isl_pw_aff_has_tuple_id(PwAff.Ptr pa, int type);
    Id.Ptr isl_pw_aff_get_tuple_id(PwAff.Ptr pa, int type);
    PwAff.Ptr isl_pw_aff_set_tuple_id(PwAff.Ptr pwaff, int type, Id.Ptr id);
    Set.Ptr isl_pw_aff_params(PwAff.Ptr pwa);
    Set.Ptr isl_pw_aff_domain(PwAff.Ptr pwaff);
    PwAff.Ptr isl_pw_aff_from_range(PwAff.Ptr pwa);
    PwAff.Ptr isl_pw_aff_min(PwAff.Ptr pwaff1, PwAff.Ptr pwaff2);
    PwAff.Ptr isl_pw_aff_max(PwAff.Ptr pwaff1, PwAff.Ptr pwaff2);
    PwAff.Ptr isl_pw_aff_mul(PwAff.Ptr pwaff1, PwAff.Ptr pwaff2);
    PwAff.Ptr isl_pw_aff_div(PwAff.Ptr pa1, PwAff.Ptr pa2);
    PwAff.Ptr isl_pw_aff_add(PwAff.Ptr pwaff1, PwAff.Ptr pwaff2);
    PwAff.Ptr isl_pw_aff_sub(PwAff.Ptr pwaff1, PwAff.Ptr pwaff2);
    PwAff.Ptr isl_pw_aff_neg(PwAff.Ptr pwaff);
    PwAff.Ptr isl_pw_aff_ceil(PwAff.Ptr pwaff);
    PwAff.Ptr isl_pw_aff_floor(PwAff.Ptr pwaff);
    PwAff.Ptr isl_pw_aff_mod_val(PwAff.Ptr pa, Val.Ptr mod);
    PwAff.Ptr isl_pw_aff_tdiv_q(PwAff.Ptr pa1, PwAff.Ptr pa2);
    PwAff.Ptr isl_pw_aff_tdiv_r(PwAff.Ptr pa1, PwAff.Ptr pa2);
    PwAff.Ptr isl_pw_aff_intersect_params(PwAff.Ptr pa, Set.Ptr set);
    PwAff.Ptr isl_pw_aff_intersect_domain(PwAff.Ptr pa, Set.Ptr set);
    PwAff.Ptr isl_pw_aff_cond(PwAff.Ptr cond, PwAff.Ptr pwaff_true, PwAff.Ptr pwaff_false);
    PwAff.Ptr isl_pw_aff_scale_val(PwAff.Ptr pa, Val.Ptr v);
    PwAff.Ptr isl_pw_aff_scale_down_val(PwAff.Ptr pa, Val.Ptr f);
    PwAff.Ptr isl_pw_aff_insert_dims(PwAff.Ptr pwaff, int type, int first, int n);
    PwAff.Ptr isl_pw_aff_add_dims(PwAff.Ptr pwaff, int type, int n);
    PwAff.Ptr isl_pw_aff_move_dims(PwAff.Ptr pa, int dst_type, int dst_pos, int src_type, int src_pos, int n);
    PwAff.Ptr isl_pw_aff_drop_dims(PwAff.Ptr pwaff, int type, int first, int n);
    PwAff.Ptr isl_pw_aff_coalesce(PwAff.Ptr pwqp);
    PwAff.Ptr isl_pw_aff_gist(PwAff.Ptr pwaff, Set.Ptr context);
    PwAff.Ptr isl_pw_aff_gist_params(PwAff.Ptr pwaff, Set.Ptr context);
    PwAff.Ptr isl_pw_aff_pullback_multi_aff(PwAff.Ptr pa, MultiAff.Ptr ma);
    PwAff.Ptr isl_pw_aff_pullback_pw_multi_aff(PwAff.Ptr pa, PwMultiAff.Ptr pma);
    int isl_pw_aff_n_piece(PwAff.Ptr pwaff);
    int isl_pw_aff_foreach_piece(PwAff.Ptr pwaff, Callback fn, Pointer user);
    Set.Ptr isl_pw_aff_nonneg_set(PwAff.Ptr pwaff);
    Set.Ptr isl_pw_aff_zero_set(PwAff.Ptr pwaff);
    Set.Ptr isl_pw_aff_non_zero_set(PwAff.Ptr pwaff);
    Set.Ptr isl_pw_aff_eq_set(PwAff.Ptr pwaff1, PwAff.Ptr pwaff2);
    Set.Ptr isl_pw_aff_ne_set(PwAff.Ptr pwaff1, PwAff.Ptr pwaff2);
    Set.Ptr isl_pw_aff_le_set(PwAff.Ptr pwaff1, PwAff.Ptr pwaff2);
    Set.Ptr isl_pw_aff_lt_set(PwAff.Ptr pwaff1, PwAff.Ptr pwaff2);
    Set.Ptr isl_pw_aff_ge_set(PwAff.Ptr pwaff1, PwAff.Ptr pwaff2);
    Set.Ptr isl_pw_aff_gt_set(PwAff.Ptr pwaff1, PwAff.Ptr pwaff2);
    void isl_pw_multi_aff_free(PwMultiAff.Ptr islobject);
    PwMultiAff.Ptr isl_pw_multi_aff_copy(PwMultiAff.Ptr islobject);
    PwMultiAff.Ptr isl_pw_multi_aff_from_multi_aff(MultiAff.Ptr ma);
    PwMultiAff.Ptr isl_pw_multi_aff_from_pw_aff(PwAff.Ptr pa);
    PwMultiAff.Ptr isl_pw_multi_aff_alloc(Set.Ptr set, MultiAff.Ptr maff);
    PwMultiAff.Ptr isl_pw_multi_aff_coalesce(PwMultiAff.Ptr pma);
    PwMultiAff.Ptr isl_pw_multi_aff_gist_params(PwMultiAff.Ptr pma, Set.Ptr set);
    PwMultiAff.Ptr isl_pw_multi_aff_gist(PwMultiAff.Ptr pma, Set.Ptr set);
    PwMultiAff.Ptr isl_pw_multi_aff_pullback_multi_aff(PwMultiAff.Ptr pma, MultiAff.Ptr ma);
    PwMultiAff.Ptr isl_pw_multi_aff_pullback_pw_multi_aff(PwMultiAff.Ptr pma1, PwMultiAff.Ptr pma2);
    int isl_pw_multi_aff_foreach_piece(PwMultiAff.Ptr pma, Callback fn, Pointer user);
    int isl_pw_multi_aff_dim(PwMultiAff.Ptr pma, int type);
    PwAff.Ptr isl_pw_multi_aff_get_pw_aff(PwMultiAff.Ptr pma, int pos);
    PwMultiAff.Ptr isl_pw_multi_aff_set_pw_aff(PwMultiAff.Ptr pma, int pos, PwAff.Ptr pa);
    Space.Ptr isl_pw_multi_aff_get_domain_space(PwMultiAff.Ptr pma);
    Space.Ptr isl_pw_multi_aff_get_space(PwMultiAff.Ptr pma);
    boolean isl_pw_multi_aff_has_tuple_name(PwMultiAff.Ptr pma, int type);
    String isl_pw_multi_aff_get_tuple_name(PwMultiAff.Ptr pma, int type);
    Id.Ptr isl_pw_multi_aff_get_tuple_id(PwMultiAff.Ptr pma, int type);
    boolean isl_pw_multi_aff_has_tuple_id(PwMultiAff.Ptr pma, int type);
    PwMultiAff.Ptr isl_pw_multi_aff_set_tuple_id(PwMultiAff.Ptr pma, int type, Id.Ptr id);
    PwMultiAff.Ptr isl_pw_multi_aff_drop_dims(PwMultiAff.Ptr pma, int type, int first, int n);
    Set.Ptr isl_pw_multi_aff_domain(PwMultiAff.Ptr pma);
    String isl_pw_multi_aff_get_dim_name(PwMultiAff.Ptr pma, int type, int pos);
    Id.Ptr isl_pw_multi_aff_get_dim_id(PwMultiAff.Ptr pma, int type, int pos);
    PwMultiAff.Ptr isl_pw_multi_aff_set_dim_id(PwMultiAff.Ptr pma, int type, int pos, Id.Ptr id);
    boolean isl_pw_multi_aff_plain_is_equal(PwMultiAff.Ptr pma1, PwMultiAff.Ptr pma2);
    PwMultiAff.Ptr isl_pw_multi_aff_union_add(PwMultiAff.Ptr pma1, PwMultiAff.Ptr pma2);
    PwMultiAff.Ptr isl_pw_multi_aff_add(PwMultiAff.Ptr pma1, PwMultiAff.Ptr pma2);
    PwMultiAff.Ptr isl_pw_multi_aff_sub(PwMultiAff.Ptr pma1, PwMultiAff.Ptr pma2);
    PwMultiAff.Ptr isl_pw_multi_aff_scale_val(PwMultiAff.Ptr pma, Val.Ptr v);
    PwMultiAff.Ptr isl_pw_multi_aff_union_lexmin(PwMultiAff.Ptr pma1, PwMultiAff.Ptr pma2);
    PwMultiAff.Ptr isl_pw_multi_aff_union_lexmax(PwMultiAff.Ptr pma1, PwMultiAff.Ptr pma2);
    PwMultiAff.Ptr isl_pw_multi_aff_range_product(PwMultiAff.Ptr pma1, PwMultiAff.Ptr pma2);
    PwMultiAff.Ptr isl_pw_multi_aff_flat_range_product(PwMultiAff.Ptr pma1, PwMultiAff.Ptr pma2);
    PwMultiAff.Ptr isl_pw_multi_aff_product(PwMultiAff.Ptr pma1, PwMultiAff.Ptr pma2);
    PwMultiAff.Ptr isl_pw_multi_aff_intersect_params(PwMultiAff.Ptr pma, Set.Ptr set);
    PwMultiAff.Ptr isl_pw_multi_aff_intersect_domain(PwMultiAff.Ptr pma, Set.Ptr set);
    PwMultiAff.Ptr isl_pw_multi_aff_project_domain_on_params(PwMultiAff.Ptr pma);
    PwMultiAff.Ptr isl_pw_multi_aff_align_params(PwMultiAff.Ptr pma, Space.Ptr model);
    void isl_pw_qpolynomial_free(PwQpolynomial.Ptr islobject);
    PwQpolynomial.Ptr isl_pw_qpolynomial_copy(PwQpolynomial.Ptr islobject);
    PwQpolynomial.Ptr isl_pw_qpolynomial_zero(Space.Ptr dim);
    PwQpolynomial.Ptr isl_pw_qpolynomial_alloc(Set.Ptr set, Qpolynomial.Ptr qp);
    PwQpolynomial.Ptr isl_pw_qpolynomial_from_qpolynomial(Qpolynomial.Ptr qp);
    PwQpolynomial.Ptr isl_pw_qpolynomial_from_pw_aff(PwAff.Ptr pwaff);
    PwQpolynomial.Ptr isl_pw_qpolynomial_read_from_str(Context.Ptr ctx, String str);
    boolean isl_pw_qpolynomial_plain_is_equal(PwQpolynomial.Ptr pwqp1, PwQpolynomial.Ptr pwqp2);
    boolean isl_pw_qpolynomial_is_zero(PwQpolynomial.Ptr pwqp);
    Space.Ptr isl_pw_qpolynomial_get_domain_space(PwQpolynomial.Ptr pwqp);
    Space.Ptr isl_pw_qpolynomial_get_space(PwQpolynomial.Ptr pwqp);
    PwQpolynomial.Ptr isl_pw_qpolynomial_reset_domain_space(PwQpolynomial.Ptr pwqp, Space.Ptr dim);
    int isl_pw_qpolynomial_dim(PwQpolynomial.Ptr pwqp, int type);
    boolean isl_pw_qpolynomial_involves_dims(PwQpolynomial.Ptr pwqp, int type, int first, int n);
    boolean isl_pw_qpolynomial_has_equal_space(PwQpolynomial.Ptr pwqp1, PwQpolynomial.Ptr pwqp2);
    PwQpolynomial.Ptr isl_pw_qpolynomial_set_dim_name(PwQpolynomial.Ptr pwqp, int type, int pos, String s);
    Set.Ptr isl_pw_qpolynomial_domain(PwQpolynomial.Ptr pwqp);
    PwQpolynomial.Ptr isl_pw_qpolynomial_intersect_domain(PwQpolynomial.Ptr pwpq, Set.Ptr set);
    PwQpolynomial.Ptr isl_pw_qpolynomial_intersect_params(PwQpolynomial.Ptr pwpq, Set.Ptr set);
    PwQpolynomial.Ptr isl_pw_qpolynomial_project_domain_on_params(PwQpolynomial.Ptr pwqp);
    PwQpolynomial.Ptr isl_pw_qpolynomial_drop_dims(PwQpolynomial.Ptr pwqp, int type, int first, int n);
    PwQpolynomial.Ptr isl_pw_qpolynomial_split_dims(PwQpolynomial.Ptr pwqp, int type, int first, int n);
    PwQpolynomial.Ptr isl_pw_qpolynomial_add(PwQpolynomial.Ptr pwqp1, PwQpolynomial.Ptr pwqp2);
    PwQpolynomial.Ptr isl_pw_qpolynomial_sub(PwQpolynomial.Ptr pwqp1, PwQpolynomial.Ptr pwqp2);
    PwQpolynomial.Ptr isl_pw_qpolynomial_add_disjoint(PwQpolynomial.Ptr pwqp1, PwQpolynomial.Ptr pwqp2);
    PwQpolynomial.Ptr isl_pw_qpolynomial_neg(PwQpolynomial.Ptr pwqp);
    PwQpolynomial.Ptr isl_pw_qpolynomial_mul(PwQpolynomial.Ptr pwqp1, PwQpolynomial.Ptr pwqp2);
    PwQpolynomial.Ptr isl_pw_qpolynomial_scale_val(PwQpolynomial.Ptr pwqp, Val.Ptr v);
    PwQpolynomial.Ptr isl_pw_qpolynomial_pow(PwQpolynomial.Ptr pwqp, int exponent);
    PwQpolynomial.Ptr isl_pw_qpolynomial_insert_dims(PwQpolynomial.Ptr pwqp, int type, int first, int n);
    PwQpolynomial.Ptr isl_pw_qpolynomial_add_dims(PwQpolynomial.Ptr pwqp, int type, int n);
    PwQpolynomial.Ptr isl_pw_qpolynomial_move_dims(PwQpolynomial.Ptr pwqp, int dst_type, int dst_pos, int src_type, int src_pos, int n);
    PwQpolynomial.Ptr isl_pw_qpolynomial_fix_val(PwQpolynomial.Ptr pwqp, int type, int n, Val.Ptr v);
    Val.Ptr isl_pw_qpolynomial_eval(PwQpolynomial.Ptr pwqp, Point.Ptr pnt);
    Val.Ptr isl_pw_qpolynomial_max(PwQpolynomial.Ptr pwqp);
    Val.Ptr isl_pw_qpolynomial_min(PwQpolynomial.Ptr pwqp);
    int isl_pw_qpolynomial_foreach_piece(PwQpolynomial.Ptr pwqp, Callback fn, Pointer user);
    int isl_pw_qpolynomial_foreach_lifted_piece(PwQpolynomial.Ptr pwqp, Callback fn, Pointer user);
    PwQpolynomial.Ptr isl_pw_qpolynomial_coalesce(PwQpolynomial.Ptr pwqp);
    PwQpolynomial.Ptr isl_pw_qpolynomial_gist(PwQpolynomial.Ptr pwqp, Set.Ptr context);
    PwQpolynomial.Ptr isl_pw_qpolynomial_gist_params(PwQpolynomial.Ptr pwqp, Set.Ptr context);
    PwQpolynomial.Ptr isl_pw_qpolynomial_split_periods(PwQpolynomial.Ptr pwqp, int max_periods);
    PwQpolynomialFold.Ptr isl_pw_qpolynomial_bound(PwQpolynomial.Ptr pwqp, int type, boolean[] tight);
    PwQpolynomial.Ptr isl_pw_qpolynomial_to_polynomial(PwQpolynomial.Ptr pwqp, int sign);
    void isl_pw_qpolynomial_fold_free(PwQpolynomialFold.Ptr islobject);
    PwQpolynomialFold.Ptr isl_pw_qpolynomial_fold_copy(PwQpolynomialFold.Ptr islobject);
    PwQpolynomialFold.Ptr isl_pw_qpolynomial_fold_from_pw_qpolynomial(int type, PwQpolynomial.Ptr pwqp);
    PwQpolynomialFold.Ptr isl_pw_qpolynomial_fold_alloc(int type, Set.Ptr set, QpolynomialFold.Ptr fold);
    PwQpolynomialFold.Ptr isl_pw_qpolynomial_fold_zero(Space.Ptr dim, int type);
    boolean isl_pw_qpolynomial_fold_plain_is_equal(PwQpolynomialFold.Ptr pwf1, PwQpolynomialFold.Ptr pwf2);
    boolean isl_pw_qpolynomial_fold_is_zero(PwQpolynomialFold.Ptr pwf);
    Space.Ptr isl_pw_qpolynomial_fold_get_domain_space(PwQpolynomialFold.Ptr pwf);
    Space.Ptr isl_pw_qpolynomial_fold_get_space(PwQpolynomialFold.Ptr pwf);
    PwQpolynomialFold.Ptr isl_pw_qpolynomial_fold_reset_space(PwQpolynomialFold.Ptr pwf, Space.Ptr dim);
    int isl_pw_qpolynomial_fold_dim(PwQpolynomialFold.Ptr pwf, int type);
    boolean isl_pw_qpolynomial_fold_has_equal_space(PwQpolynomialFold.Ptr pwf1, PwQpolynomialFold.Ptr pwf2);
    int isl_pw_qpolynomial_fold_size(PwQpolynomialFold.Ptr pwf);
    PwQpolynomialFold.Ptr isl_pw_qpolynomial_fold_set_dim_name(PwQpolynomialFold.Ptr pwf, int type, int pos, String s);
    Set.Ptr isl_pw_qpolynomial_fold_domain(PwQpolynomialFold.Ptr pwf);
    PwQpolynomialFold.Ptr isl_pw_qpolynomial_fold_intersect_domain(PwQpolynomialFold.Ptr pwf, Set.Ptr set);
    PwQpolynomialFold.Ptr isl_pw_qpolynomial_fold_intersect_params(PwQpolynomialFold.Ptr pwf, Set.Ptr set);
    PwQpolynomialFold.Ptr isl_pw_qpolynomial_fold_add(PwQpolynomialFold.Ptr pwf1, PwQpolynomialFold.Ptr pwf2);
    PwQpolynomialFold.Ptr isl_pw_qpolynomial_fold_fold(PwQpolynomialFold.Ptr pwf1, PwQpolynomialFold.Ptr pwf2);
    PwQpolynomialFold.Ptr isl_pw_qpolynomial_fold_add_disjoint(PwQpolynomialFold.Ptr pwf1, PwQpolynomialFold.Ptr pwf2);
    PwQpolynomialFold.Ptr isl_pw_qpolynomial_fold_scale_val(PwQpolynomialFold.Ptr pwf, Val.Ptr v);
    PwQpolynomialFold.Ptr isl_pw_qpolynomial_fold_project_domain_on_params(PwQpolynomialFold.Ptr pwf);
    PwQpolynomialFold.Ptr isl_pw_qpolynomial_fold_drop_dims(PwQpolynomialFold.Ptr pwf, int type, int first, int n);
    PwQpolynomialFold.Ptr isl_pw_qpolynomial_fold_move_dims(PwQpolynomialFold.Ptr pwf, int dst_type, int dst_pos, int src_type, int src_pos, int n);
    Val.Ptr isl_pw_qpolynomial_fold_eval(PwQpolynomialFold.Ptr pwf, Point.Ptr pnt);
    int isl_pw_qpolynomial_fold_foreach_piece(PwQpolynomialFold.Ptr pwf, Callback fn, Pointer user);
    int isl_pw_qpolynomial_fold_foreach_lifted_piece(PwQpolynomialFold.Ptr pwf, Callback fn, Pointer user);
    PwQpolynomialFold.Ptr isl_pw_qpolynomial_fold_coalesce(PwQpolynomialFold.Ptr pwf);
    PwQpolynomialFold.Ptr isl_pw_qpolynomial_fold_gist(PwQpolynomialFold.Ptr pwf, Set.Ptr context);
    PwQpolynomialFold.Ptr isl_pw_qpolynomial_fold_gist_params(PwQpolynomialFold.Ptr pwf, Set.Ptr context);
    Val.Ptr isl_pw_qpolynomial_fold_max(PwQpolynomialFold.Ptr pwf);
    Val.Ptr isl_pw_qpolynomial_fold_min(PwQpolynomialFold.Ptr pwf);
    PwQpolynomialFold.Ptr isl_pw_qpolynomial_fold_bound(PwQpolynomialFold.Ptr pwf, boolean[] tight);
    void isl_qpolynomial_free(Qpolynomial.Ptr islobject);
    Qpolynomial.Ptr isl_qpolynomial_copy(Qpolynomial.Ptr islobject);
    Qpolynomial.Ptr isl_qpolynomial_zero_on_domain(Space.Ptr dim);
    Qpolynomial.Ptr isl_qpolynomial_one_on_domain(Space.Ptr dim);
    Qpolynomial.Ptr isl_qpolynomial_infty_on_domain(Space.Ptr dim);
    Qpolynomial.Ptr isl_qpolynomial_neginfty_on_domain(Space.Ptr dim);
    Qpolynomial.Ptr isl_qpolynomial_nan_on_domain(Space.Ptr dim);
    Qpolynomial.Ptr isl_qpolynomial_val_on_domain(Space.Ptr space, Val.Ptr val);
    Qpolynomial.Ptr isl_qpolynomial_var_on_domain(Space.Ptr dim, int type, int pos);
    Qpolynomial.Ptr isl_qpolynomial_from_constraint(Constraint.Ptr c, int type, int pos);
    Qpolynomial.Ptr isl_qpolynomial_from_term(Term.Ptr term);
    Qpolynomial.Ptr isl_qpolynomial_from_aff(Aff.Ptr aff);
    Space.Ptr isl_qpolynomial_get_domain_space(Qpolynomial.Ptr qp);
    Space.Ptr isl_qpolynomial_get_space(Qpolynomial.Ptr qp);
    int isl_qpolynomial_dim(Qpolynomial.Ptr qp, int type);
    boolean isl_qpolynomial_involves_dims(Qpolynomial.Ptr qp, int type, int first, int n);
    Val.Ptr isl_qpolynomial_get_constant_val(Qpolynomial.Ptr qp);
    Qpolynomial.Ptr isl_qpolynomial_set_dim_name(Qpolynomial.Ptr qp, int type, int pos, String s);
    boolean isl_qpolynomial_plain_is_equal(Qpolynomial.Ptr qp1, Qpolynomial.Ptr qp2);
    boolean isl_qpolynomial_is_zero(Qpolynomial.Ptr qp);
    boolean isl_qpolynomial_is_nan(Qpolynomial.Ptr qp);
    boolean isl_qpolynomial_is_infty(Qpolynomial.Ptr qp);
    boolean isl_qpolynomial_is_neginfty(Qpolynomial.Ptr qp);
    int isl_qpolynomial_sgn(Qpolynomial.Ptr qp);
    Qpolynomial.Ptr isl_qpolynomial_neg(Qpolynomial.Ptr qp);
    Qpolynomial.Ptr isl_qpolynomial_add(Qpolynomial.Ptr qp1, Qpolynomial.Ptr qp2);
    Qpolynomial.Ptr isl_qpolynomial_sub(Qpolynomial.Ptr qp1, Qpolynomial.Ptr qp2);
    Qpolynomial.Ptr isl_qpolynomial_mul(Qpolynomial.Ptr qp1, Qpolynomial.Ptr qp2);
    Qpolynomial.Ptr isl_qpolynomial_pow(Qpolynomial.Ptr qp, int power);
    Qpolynomial.Ptr isl_qpolynomial_scale_val(Qpolynomial.Ptr qp, Val.Ptr v);
    Qpolynomial.Ptr isl_qpolynomial_insert_dims(Qpolynomial.Ptr qp, int type, int first, int n);
    Qpolynomial.Ptr isl_qpolynomial_add_dims(Qpolynomial.Ptr qp, int type, int n);
    Qpolynomial.Ptr isl_qpolynomial_move_dims(Qpolynomial.Ptr qp, int dst_type, int dst_pos, int src_type, int src_pos, int n);
    Qpolynomial.Ptr isl_qpolynomial_project_domain_on_params(Qpolynomial.Ptr qp);
    Qpolynomial.Ptr isl_qpolynomial_drop_dims(Qpolynomial.Ptr qp, int type, int first, int n);
    Qpolynomial.Ptr isl_qpolynomial_substitute(Qpolynomial.Ptr qp, int type, int first, int n, Qpolynomial.Ptr[] subs);
    int isl_qpolynomial_as_polynomial_on_domain(Qpolynomial.Ptr qp, BasicSet.Ptr bset, Callback fn, Pointer user);
    Qpolynomial.Ptr isl_qpolynomial_homogenize(Qpolynomial.Ptr poly);
    Qpolynomial.Ptr isl_qpolynomial_align_params(Qpolynomial.Ptr qp, Space.Ptr model);
    int isl_qpolynomial_foreach_term(Qpolynomial.Ptr qp, Callback fn, Pointer user);
    Val.Ptr isl_qpolynomial_eval(Qpolynomial.Ptr qp, Point.Ptr pnt);
    Qpolynomial.Ptr isl_qpolynomial_gist_params(Qpolynomial.Ptr qp, Set.Ptr context);
    Qpolynomial.Ptr isl_qpolynomial_gist(Qpolynomial.Ptr qp, Set.Ptr context);
    void isl_qpolynomial_fold_free(QpolynomialFold.Ptr islobject);
    QpolynomialFold.Ptr isl_qpolynomial_fold_copy(QpolynomialFold.Ptr islobject);
    QpolynomialFold.Ptr isl_qpolynomial_fold_empty(int type, Space.Ptr dim);
    QpolynomialFold.Ptr isl_qpolynomial_fold_alloc(int type, Qpolynomial.Ptr qp);
    int isl_qpolynomial_fold_get_type(QpolynomialFold.Ptr fold);
    boolean isl_qpolynomial_fold_is_empty(QpolynomialFold.Ptr fold);
    boolean isl_qpolynomial_fold_plain_is_equal(QpolynomialFold.Ptr fold1, QpolynomialFold.Ptr fold2);
    Space.Ptr isl_qpolynomial_fold_get_space(QpolynomialFold.Ptr fold);
    QpolynomialFold.Ptr isl_qpolynomial_fold_fold(QpolynomialFold.Ptr fold1, QpolynomialFold.Ptr fold2);
    QpolynomialFold.Ptr isl_qpolynomial_fold_scale_val(QpolynomialFold.Ptr fold, Val.Ptr v);
    QpolynomialFold.Ptr isl_qpolynomial_fold_move_dims(QpolynomialFold.Ptr fold, int dst_type, int dst_pos, int src_type, int src_pos, int n);
    QpolynomialFold.Ptr isl_qpolynomial_fold_substitute(QpolynomialFold.Ptr fold, int type, int first, int n, Qpolynomial.Ptr[] subs);
    Val.Ptr isl_qpolynomial_fold_eval(QpolynomialFold.Ptr fold, Point.Ptr pnt);
    QpolynomialFold.Ptr isl_qpolynomial_fold_gist_params(QpolynomialFold.Ptr fold, Set.Ptr context);
    QpolynomialFold.Ptr isl_qpolynomial_fold_gist(QpolynomialFold.Ptr fold, Set.Ptr context);
    int isl_qpolynomial_fold_foreach_qpolynomial(QpolynomialFold.Ptr fold, Callback fn, Pointer user);
    void isl_schedule_free(Schedule.Ptr islobject);
    Schedule.Ptr isl_schedule_copy(Schedule.Ptr islobject);
    UnionMap.Ptr isl_schedule_get_map(Schedule.Ptr sched);
    int isl_schedule_foreach_band(Schedule.Ptr sched, Callback fn, Pointer user);
    void isl_set_free(Set.Ptr islobject);
    Set.Ptr isl_set_copy(Set.Ptr islobject);
    Set.Ptr isl_set_from_pw_aff(PwAff.Ptr pwaff);
    Set.Ptr isl_set_from_union_set(UnionSet.Ptr uset);
    Set.Ptr isl_set_read_from_str(Context.Ptr ctx, String str);
    Set.Ptr isl_set_from_basic_set(BasicSet.Ptr bset);
    Set.Ptr isl_set_from_point(Point.Ptr pnt);
    Set.Ptr isl_set_box_from_points(Point.Ptr pnt1, Point.Ptr pnt2);
    PwAff.Ptr isl_set_indicator_function(Set.Ptr set);
    Set.Ptr isl_set_add_constraint(Set.Ptr set, Constraint.Ptr constraint);
    int isl_set_dim(Set.Ptr set, int type);
    boolean isl_set_has_tuple_name(Set.Ptr set);
    String isl_set_get_tuple_name(Set.Ptr set);
    Set.Ptr isl_set_set_tuple_name(Set.Ptr set, String s);
    boolean isl_set_has_dim_name(Set.Ptr set, int type, int pos);
    String isl_set_get_dim_name(Set.Ptr set, int type, int pos);
    Set.Ptr isl_set_set_dim_name(Set.Ptr set, int type, int pos, String s);
    Set.Ptr isl_set_lexmin(Set.Ptr set);
    Set.Ptr isl_set_lexmax(Set.Ptr set);
    Set.Ptr isl_set_params(Set.Ptr set);
    BasicSet.Ptr isl_set_sample(Set.Ptr set);
    Point.Ptr isl_set_sample_point(Set.Ptr set);
    Set.Ptr isl_set_detect_equalities(Set.Ptr set);
    BasicSet.Ptr isl_set_affine_hull(Set.Ptr set);
    BasicSet.Ptr isl_set_convex_hull(Set.Ptr set);
    BasicSet.Ptr isl_set_polyhedral_hull(Set.Ptr set);
    BasicSet.Ptr isl_set_simple_hull(Set.Ptr set);
    BasicSet.Ptr isl_set_unshifted_simple_hull(Set.Ptr set);
    Set.Ptr isl_set_recession_cone(Set.Ptr set);
    Set.Ptr isl_set_union(Set.Ptr set1, Set.Ptr set2);
    Set.Ptr isl_set_product(Set.Ptr set1, Set.Ptr set2);
    Set.Ptr isl_set_flat_product(Set.Ptr set1, Set.Ptr set2);
    Set.Ptr isl_set_intersect(Set.Ptr set1, Set.Ptr set2);
    Set.Ptr isl_set_intersect_params(Set.Ptr set, Set.Ptr params);
    Set.Ptr isl_set_subtract(Set.Ptr set1, Set.Ptr set2);
    Set.Ptr isl_set_complement(Set.Ptr set);
    Set.Ptr isl_set_apply(Set.Ptr set, Map.Ptr map);
    Set.Ptr isl_set_preimage_multi_aff(Set.Ptr set, MultiAff.Ptr ma);
    Set.Ptr isl_set_preimage_pw_multi_aff(Set.Ptr set, PwMultiAff.Ptr pma);
    Set.Ptr isl_set_preimage_multi_pw_aff(Set.Ptr set, MultiPwAff.Ptr mpa);
    Set.Ptr isl_set_insert_dims(Set.Ptr set, int type, int pos, int n);
    Set.Ptr isl_set_add_dims(Set.Ptr set, int type, int n);
    Set.Ptr isl_set_move_dims(Set.Ptr set, int dst_type, int dst_pos, int src_type, int src_pos, int n);
    Set.Ptr isl_set_project_out(Set.Ptr set, int type, int first, int n);
    Set.Ptr isl_set_remove_dims(Set.Ptr bset, int type, int first, int n);
    Set.Ptr isl_set_remove_divs_involving_dims(Set.Ptr set, int type, int first, int n);
    Set.Ptr isl_set_remove_unknown_divs(Set.Ptr set);
    Set.Ptr isl_set_remove_divs(Set.Ptr set);
    Set.Ptr isl_set_split_dims(Set.Ptr set, int type, int first, int n);
    Set.Ptr isl_set_drop_constraints_involving_dims(Set.Ptr set, int type, int first, int n);
    boolean isl_set_involves_dims(Set.Ptr set, int type, int first, int n);
    boolean isl_set_plain_is_empty(Set.Ptr set);
    int isl_set_fast_is_empty(Set.Ptr set);
    boolean isl_set_plain_is_universe(Set.Ptr set);
    int isl_set_fast_is_universe(Set.Ptr set);
    boolean isl_set_is_params(Set.Ptr set);
    boolean isl_set_is_empty(Set.Ptr set);
    boolean isl_set_is_bounded(Set.Ptr set);
    boolean isl_set_is_subset(Set.Ptr set1, Set.Ptr set2);
    boolean isl_set_is_strict_subset(Set.Ptr set1, Set.Ptr set2);
    boolean isl_set_is_equal(Set.Ptr set1, Set.Ptr set2);
    boolean isl_set_is_disjoint(Set.Ptr set1, Set.Ptr set2);
    boolean isl_set_is_singleton(Set.Ptr set);
    boolean isl_set_is_box(Set.Ptr set);
    boolean isl_set_has_equal_space(Set.Ptr set1, Set.Ptr set2);
    Set.Ptr isl_set_sum(Set.Ptr set1, Set.Ptr set2);
    Set.Ptr isl_set_neg(Set.Ptr set);
    Set.Ptr isl_set_make_disjoint(Set.Ptr set);
    Set.Ptr isl_set_compute_divs(Set.Ptr set);
    Set.Ptr isl_set_align_divs(Set.Ptr set);
    int isl_set_dim_is_bounded(Set.Ptr set, int type, int pos);
    int isl_set_dim_has_lower_bound(Set.Ptr set, int type, int pos);
    int isl_set_dim_has_upper_bound(Set.Ptr set, int type, int pos);
    int isl_set_dim_has_any_lower_bound(Set.Ptr set, int type, int pos);
    int isl_set_dim_has_any_upper_bound(Set.Ptr set, int type, int pos);
    Set.Ptr isl_set_gist(Set.Ptr set, Set.Ptr context);
    Set.Ptr isl_set_coalesce(Set.Ptr set);
    int isl_set_n_basic_set(Set.Ptr set);
    int isl_set_foreach_basic_set(Set.Ptr set, Callback fn, Pointer user);
    int isl_set_foreach_point(Set.Ptr set, Callback fn, Pointer user);
    Val.Ptr isl_set_count_val(Set.Ptr set);
    Set.Ptr isl_set_lift(Set.Ptr set);
    Map.Ptr isl_set_lex_le_set(Set.Ptr set1, Set.Ptr set2);
    Map.Ptr isl_set_lex_lt_set(Set.Ptr set1, Set.Ptr set2);
    Map.Ptr isl_set_lex_ge_set(Set.Ptr set1, Set.Ptr set2);
    Map.Ptr isl_set_lex_gt_set(Set.Ptr set1, Set.Ptr set2);
    int isl_set_size(Set.Ptr set);
    Set.Ptr isl_set_align_params(Set.Ptr set, Space.Ptr model);
    BasicSet.Ptr isl_set_coefficients(Set.Ptr set);
    BasicSet.Ptr isl_set_solutions(Set.Ptr set);
    PwAff.Ptr isl_set_dim_max(Set.Ptr set, int pos);
    PwAff.Ptr isl_set_dim_min(Set.Ptr set, int pos);
    Map.Ptr isl_set_identity(Set.Ptr set);
    boolean isl_set_is_wrapping(Set.Ptr set);
    Map.Ptr isl_set_unwrap(Set.Ptr set);
    Set.Ptr isl_set_flatten(Set.Ptr set);
    Map.Ptr isl_set_flatten_map(Set.Ptr set);
    Map.Ptr isl_set_lifting(Set.Ptr set);
    PwQpolynomialFold.Ptr isl_set_apply_pw_qpolynomial_fold(Set.Ptr set, PwQpolynomialFold.Ptr pwf, boolean[] tight);
    void isl_space_free(Space.Ptr islobject);
    Space.Ptr isl_space_copy(Space.Ptr islobject);
    Space.Ptr isl_space_alloc(Context.Ptr ctx, int nparam, int n_in, int n_out);
    Space.Ptr isl_space_set_alloc(Context.Ptr ctx, int nparam, int dim);
    Space.Ptr isl_space_params_alloc(Context.Ptr ctx, int nparam);
    Id.Ptr isl_space_get_dim_id(Space.Ptr dim, int type, int pos);
    int isl_space_find_dim_by_id(Space.Ptr dim, int type, Id.Ptr id);
    int isl_space_find_dim_by_name(Space.Ptr space, int type, String name);
    boolean isl_space_is_params(Space.Ptr space);
    boolean isl_space_is_set(Space.Ptr space);
    boolean isl_space_is_map(Space.Ptr space);
    Space.Ptr isl_space_set_tuple_name(Space.Ptr dim, int type, String s);
    String isl_space_get_tuple_name(Space.Ptr dim, int type);
    Space.Ptr isl_space_set_tuple_id(Space.Ptr dim, int type, Id.Ptr id);
    Space.Ptr isl_space_reset_tuple_id(Space.Ptr dim, int type);
    boolean isl_space_has_tuple_id(Space.Ptr dim, int type);
    Space.Ptr isl_space_set_dim_id(Space.Ptr dim, int type, int pos, Id.Ptr id);
    boolean isl_space_has_dim_id(Space.Ptr dim, int type, int pos);
    boolean isl_space_has_dim_name(Space.Ptr space, int type, int pos);
    Space.Ptr isl_space_set_dim_name(Space.Ptr dim, int type, int pos, String name);
    String isl_space_get_dim_name(Space.Ptr dim, int type, int pos);
    Space.Ptr isl_space_extend(Space.Ptr dim, int nparam, int n_in, int n_out);
    Space.Ptr isl_space_add_dims(Space.Ptr dim, int type, int n);
    Space.Ptr isl_space_move_dims(Space.Ptr dim, int dst_type, int dst_pos, int src_type, int src_pos, int n);
    Space.Ptr isl_space_insert_dims(Space.Ptr dim, int type, int pos, int n);
    Space.Ptr isl_space_join(Space.Ptr left, Space.Ptr right);
    Space.Ptr isl_space_product(Space.Ptr left, Space.Ptr right);
    Space.Ptr isl_space_domain_product(Space.Ptr left, Space.Ptr right);
    Space.Ptr isl_space_range_product(Space.Ptr left, Space.Ptr right);
    Space.Ptr isl_space_map_from_set(Space.Ptr dim);
    Space.Ptr isl_space_map_from_domain_and_range(Space.Ptr domain, Space.Ptr range);
    Space.Ptr isl_space_reverse(Space.Ptr dim);
    Space.Ptr isl_space_drop_dims(Space.Ptr dim, int type, int first, int num);
    Space.Ptr isl_space_drop_inputs(Space.Ptr dim, int first, int n);
    Space.Ptr isl_space_drop_outputs(Space.Ptr dim, int first, int n);
    Space.Ptr isl_space_domain(Space.Ptr dim);
    Space.Ptr isl_space_from_domain(Space.Ptr dim);
    Space.Ptr isl_space_range(Space.Ptr dim);
    Space.Ptr isl_space_from_range(Space.Ptr dim);
    Space.Ptr isl_space_domain_map(Space.Ptr space);
    Space.Ptr isl_space_range_map(Space.Ptr space);
    Space.Ptr isl_space_params(Space.Ptr space);
    Space.Ptr isl_space_set_from_params(Space.Ptr space);
    Space.Ptr isl_space_align_params(Space.Ptr dim1, Space.Ptr dim2);
    boolean isl_space_is_wrapping(Space.Ptr dim);
    Space.Ptr isl_space_wrap(Space.Ptr dim);
    Space.Ptr isl_space_unwrap(Space.Ptr dim);
    boolean isl_space_can_zip(Space.Ptr dim);
    Space.Ptr isl_space_zip(Space.Ptr dim);
    boolean isl_space_can_curry(Space.Ptr space);
    Space.Ptr isl_space_curry(Space.Ptr space);
    boolean isl_space_can_uncurry(Space.Ptr space);
    Space.Ptr isl_space_uncurry(Space.Ptr space);
    boolean isl_space_is_domain(Space.Ptr space1, Space.Ptr space2);
    boolean isl_space_is_range(Space.Ptr space1, Space.Ptr space2);
    boolean isl_space_is_equal(Space.Ptr space1, Space.Ptr space2);
    int isl_space_match(Space.Ptr dim1, int dim1_type, Space.Ptr dim2, int dim2_type);
    int isl_space_tuple_match(Space.Ptr dim1, int dim1_type, Space.Ptr dim2, int dim2_type);
    int isl_space_compatible(Space.Ptr dim1, Space.Ptr dim2);
    int isl_space_dim(Space.Ptr dim, int type);
    void isl_term_free(Term.Ptr islobject);
    Term.Ptr isl_term_copy(Term.Ptr islobject);
    int isl_term_dim(Term.Ptr term, int type);
    int isl_term_get_exp(Term.Ptr term, int type, int pos);
    Aff.Ptr isl_term_get_div(Term.Ptr term, int pos);
    void isl_union_map_free(UnionMap.Ptr islobject);
    UnionMap.Ptr isl_union_map_copy(UnionMap.Ptr islobject);
    UnionMap.Ptr isl_union_map_from_basic_map(BasicMap.Ptr bmap);
    UnionMap.Ptr isl_union_map_from_map(Map.Ptr map);
    UnionMap.Ptr isl_union_map_universe(UnionMap.Ptr umap);
    UnionMap.Ptr isl_union_map_from_domain(UnionSet.Ptr uset);
    UnionMap.Ptr isl_union_map_from_range(UnionSet.Ptr uset);
    UnionMap.Ptr isl_union_map_read_from_str(Context.Ptr ctx, String str);
    Set.Ptr isl_union_map_params(UnionMap.Ptr umap);
    UnionSet.Ptr isl_union_map_domain(UnionMap.Ptr umap);
    UnionSet.Ptr isl_union_map_range(UnionMap.Ptr umap);
    UnionMap.Ptr isl_union_map_domain_map(UnionMap.Ptr umap);
    UnionMap.Ptr isl_union_map_range_map(UnionMap.Ptr umap);
    UnionMap.Ptr isl_union_map_affine_hull(UnionMap.Ptr umap);
    UnionMap.Ptr isl_union_map_polyhedral_hull(UnionMap.Ptr umap);
    UnionMap.Ptr isl_union_map_coalesce(UnionMap.Ptr umap);
    UnionMap.Ptr isl_union_map_compute_divs(UnionMap.Ptr umap);
    UnionMap.Ptr isl_union_map_lexmin(UnionMap.Ptr umap);
    UnionMap.Ptr isl_union_map_lexmax(UnionMap.Ptr umap);
    UnionMap.Ptr isl_union_map_add_map(UnionMap.Ptr umap, Map.Ptr map);
    UnionMap.Ptr isl_union_map_union(UnionMap.Ptr umap1, UnionMap.Ptr umap2);
    UnionMap.Ptr isl_union_map_subtract(UnionMap.Ptr umap1, UnionMap.Ptr umap2);
    UnionMap.Ptr isl_union_map_intersect(UnionMap.Ptr umap1, UnionMap.Ptr umap2);
    UnionMap.Ptr isl_union_map_intersect_params(UnionMap.Ptr umap, Set.Ptr set);
    UnionMap.Ptr isl_union_map_gist(UnionMap.Ptr umap, UnionMap.Ptr context);
    UnionMap.Ptr isl_union_map_gist_params(UnionMap.Ptr umap, Set.Ptr set);
    UnionMap.Ptr isl_union_map_gist_domain(UnionMap.Ptr umap, UnionSet.Ptr uset);
    UnionMap.Ptr isl_union_map_gist_range(UnionMap.Ptr umap, UnionSet.Ptr uset);
    UnionMap.Ptr isl_union_map_intersect_domain(UnionMap.Ptr umap, UnionSet.Ptr uset);
    UnionMap.Ptr isl_union_map_intersect_range(UnionMap.Ptr umap, UnionSet.Ptr uset);
    UnionMap.Ptr isl_union_map_subtract_domain(UnionMap.Ptr umap, UnionSet.Ptr dom);
    UnionMap.Ptr isl_union_map_subtract_range(UnionMap.Ptr umap, UnionSet.Ptr dom);
    UnionMap.Ptr isl_union_map_apply_domain(UnionMap.Ptr umap1, UnionMap.Ptr umap2);
    UnionMap.Ptr isl_union_map_apply_range(UnionMap.Ptr umap1, UnionMap.Ptr umap2);
    UnionMap.Ptr isl_union_map_reverse(UnionMap.Ptr umap);
    UnionMap.Ptr isl_union_map_detect_equalities(UnionMap.Ptr umap);
    UnionSet.Ptr isl_union_map_deltas(UnionMap.Ptr umap);
    boolean isl_union_map_is_empty(UnionMap.Ptr umap);
    boolean isl_union_map_is_single_valued(UnionMap.Ptr umap);
    boolean isl_union_map_is_injective(UnionMap.Ptr umap);
    boolean isl_union_map_is_bijective(UnionMap.Ptr umap);
    boolean isl_union_map_is_subset(UnionMap.Ptr umap1, UnionMap.Ptr umap2);
    boolean isl_union_map_is_equal(UnionMap.Ptr umap1, UnionMap.Ptr umap2);
    boolean isl_union_map_is_strict_subset(UnionMap.Ptr umap1, UnionMap.Ptr umap2);
    int isl_union_map_n_map(UnionMap.Ptr umap);
    int isl_union_map_foreach_map(UnionMap.Ptr umap, Callback fn, Pointer user);
    int isl_union_map_contains(UnionMap.Ptr umap, Space.Ptr dim);
    Map.Ptr isl_union_map_extract_map(UnionMap.Ptr umap, Space.Ptr dim);
    BasicMap.Ptr isl_union_map_sample(UnionMap.Ptr umap);
    UnionMap.Ptr isl_union_map_fixed_power_val(UnionMap.Ptr umap, Val.Ptr exp);
    UnionMap.Ptr isl_union_map_power(UnionMap.Ptr umap, boolean[] exact);
    UnionMap.Ptr isl_union_map_transitive_closure(UnionMap.Ptr umap, boolean[] exact);
    UnionMap.Ptr isl_union_map_lex_lt_union_map(UnionMap.Ptr umap1, UnionMap.Ptr umap2);
    UnionMap.Ptr isl_union_map_lex_le_union_map(UnionMap.Ptr umap1, UnionMap.Ptr umap2);
    UnionMap.Ptr isl_union_map_lex_gt_union_map(UnionMap.Ptr umap1, UnionMap.Ptr umap2);
    UnionMap.Ptr isl_union_map_lex_ge_union_map(UnionMap.Ptr umap1, UnionMap.Ptr umap2);
    UnionSet.Ptr isl_union_map_wrap(UnionMap.Ptr umap);
    UnionMap.Ptr isl_union_map_zip(UnionMap.Ptr umap);
    UnionMap.Ptr isl_union_map_curry(UnionMap.Ptr umap);
    UnionMap.Ptr isl_union_map_uncurry(UnionMap.Ptr umap);
    UnionMap.Ptr isl_union_map_align_params(UnionMap.Ptr umap, Space.Ptr model);
    int isl_union_map_compute_flow(UnionMap.Ptr sink, UnionMap.Ptr must_source, UnionMap.Ptr may_source, UnionMap.Ptr schedule, UnionMap.Ptr[] must_dep, UnionMap.Ptr[] may_dep, UnionMap.Ptr[] must_no_source, UnionMap.Ptr[] may_no_source);
    UnionPwQpolynomialFold.Ptr isl_union_map_apply_union_pw_qpolynomial_fold(UnionMap.Ptr umap, UnionPwQpolynomialFold.Ptr upwf, boolean[] tight);
    void isl_union_pw_multi_aff_free(UnionPwMultiAff.Ptr islobject);
    UnionPwMultiAff.Ptr isl_union_pw_multi_aff_copy(UnionPwMultiAff.Ptr islobject);
    void isl_union_pw_qpolynomial_free(UnionPwQpolynomial.Ptr islobject);
    UnionPwQpolynomial.Ptr isl_union_pw_qpolynomial_copy(UnionPwQpolynomial.Ptr islobject);
    UnionPwQpolynomial.Ptr isl_union_pw_qpolynomial_from_pw_qpolynomial(PwQpolynomial.Ptr pwqp);
    UnionPwQpolynomial.Ptr isl_union_pw_qpolynomial_zero(Space.Ptr dim);
    UnionPwQpolynomial.Ptr isl_union_pw_qpolynomial_read_from_str(Context.Ptr ctx, String str);
    boolean isl_union_pw_qpolynomial_plain_is_equal(UnionPwQpolynomial.Ptr upwqp1, UnionPwQpolynomial.Ptr upwqp2);
    UnionPwQpolynomial.Ptr isl_union_pw_qpolynomial_add_pw_qpolynomial(UnionPwQpolynomial.Ptr upwqp, PwQpolynomial.Ptr pwqp);
    UnionPwQpolynomial.Ptr isl_union_pw_qpolynomial_add(UnionPwQpolynomial.Ptr upwqp1, UnionPwQpolynomial.Ptr upwqp2);
    UnionPwQpolynomial.Ptr isl_union_pw_qpolynomial_sub(UnionPwQpolynomial.Ptr upwqp1, UnionPwQpolynomial.Ptr upwqp2);
    UnionPwQpolynomial.Ptr isl_union_pw_qpolynomial_mul(UnionPwQpolynomial.Ptr upwqp1, UnionPwQpolynomial.Ptr upwqp2);
    UnionPwQpolynomial.Ptr isl_union_pw_qpolynomial_scale_val(UnionPwQpolynomial.Ptr upwqp, Val.Ptr v);
    UnionSet.Ptr isl_union_pw_qpolynomial_domain(UnionPwQpolynomial.Ptr upwqp);
    UnionPwQpolynomial.Ptr isl_union_pw_qpolynomial_intersect_domain(UnionPwQpolynomial.Ptr upwpq, UnionSet.Ptr uset);
    UnionPwQpolynomial.Ptr isl_union_pw_qpolynomial_intersect_params(UnionPwQpolynomial.Ptr upwpq, Set.Ptr set);
    Space.Ptr isl_union_pw_qpolynomial_get_space(UnionPwQpolynomial.Ptr upwqp);
    Val.Ptr isl_union_pw_qpolynomial_eval(UnionPwQpolynomial.Ptr upwqp, Point.Ptr pnt);
    UnionPwQpolynomial.Ptr isl_union_pw_qpolynomial_coalesce(UnionPwQpolynomial.Ptr upwqp);
    UnionPwQpolynomial.Ptr isl_union_pw_qpolynomial_gist(UnionPwQpolynomial.Ptr upwqp, UnionSet.Ptr context);
    UnionPwQpolynomial.Ptr isl_union_pw_qpolynomial_gist_params(UnionPwQpolynomial.Ptr upwqp, Set.Ptr context);
    UnionPwQpolynomial.Ptr isl_union_pw_qpolynomial_align_params(UnionPwQpolynomial.Ptr upwqp, Space.Ptr model);
    int isl_union_pw_qpolynomial_foreach_pw_qpolynomial(UnionPwQpolynomial.Ptr upwqp, Callback fn, Pointer user);
    PwQpolynomial.Ptr isl_union_pw_qpolynomial_extract_pw_qpolynomial(UnionPwQpolynomial.Ptr upwqp, Space.Ptr dim);
    UnionPwQpolynomialFold.Ptr isl_union_pw_qpolynomial_bound(UnionPwQpolynomial.Ptr upwqp, int type, boolean[] tight);
    UnionPwQpolynomial.Ptr isl_union_pw_qpolynomial_to_polynomial(UnionPwQpolynomial.Ptr upwqp, int sign);
    void isl_union_pw_qpolynomial_fold_free(UnionPwQpolynomialFold.Ptr islobject);
    UnionPwQpolynomialFold.Ptr isl_union_pw_qpolynomial_fold_copy(UnionPwQpolynomialFold.Ptr islobject);
    UnionPwQpolynomialFold.Ptr isl_union_pw_qpolynomial_fold_from_pw_qpolynomial_fold(PwQpolynomialFold.Ptr pwf);
    UnionPwQpolynomialFold.Ptr isl_union_pw_qpolynomial_fold_zero(Space.Ptr dim, int type);
    boolean isl_union_pw_qpolynomial_fold_plain_is_equal(UnionPwQpolynomialFold.Ptr upwf1, UnionPwQpolynomialFold.Ptr upwf2);
    UnionPwQpolynomialFold.Ptr isl_union_pw_qpolynomial_fold_fold_pw_qpolynomial_fold(UnionPwQpolynomialFold.Ptr upwqp, PwQpolynomialFold.Ptr pwqp);
    UnionPwQpolynomialFold.Ptr isl_union_pw_qpolynomial_fold_fold(UnionPwQpolynomialFold.Ptr upwf1, UnionPwQpolynomialFold.Ptr upwf2);
    UnionPwQpolynomialFold.Ptr isl_union_pw_qpolynomial_fold_add_union_pw_qpolynomial(UnionPwQpolynomialFold.Ptr upwf, UnionPwQpolynomial.Ptr upwqp);
    UnionPwQpolynomialFold.Ptr isl_union_pw_qpolynomial_fold_scale_val(UnionPwQpolynomialFold.Ptr upwf, Val.Ptr v);
    UnionSet.Ptr isl_union_pw_qpolynomial_fold_domain(UnionPwQpolynomialFold.Ptr upwf);
    UnionPwQpolynomialFold.Ptr isl_union_pw_qpolynomial_fold_intersect_domain(UnionPwQpolynomialFold.Ptr upwf, UnionSet.Ptr uset);
    UnionPwQpolynomialFold.Ptr isl_union_pw_qpolynomial_fold_intersect_params(UnionPwQpolynomialFold.Ptr upwf, Set.Ptr set);
    int isl_union_pw_qpolynomial_fold_get_type(UnionPwQpolynomialFold.Ptr upwf);
    Space.Ptr isl_union_pw_qpolynomial_fold_get_space(UnionPwQpolynomialFold.Ptr upwf);
    Val.Ptr isl_union_pw_qpolynomial_fold_eval(UnionPwQpolynomialFold.Ptr upwf, Point.Ptr pnt);
    UnionPwQpolynomialFold.Ptr isl_union_pw_qpolynomial_fold_coalesce(UnionPwQpolynomialFold.Ptr upwf);
    UnionPwQpolynomialFold.Ptr isl_union_pw_qpolynomial_fold_gist(UnionPwQpolynomialFold.Ptr upwf, UnionSet.Ptr context);
    UnionPwQpolynomialFold.Ptr isl_union_pw_qpolynomial_fold_gist_params(UnionPwQpolynomialFold.Ptr upwf, Set.Ptr context);
    UnionPwQpolynomialFold.Ptr isl_union_pw_qpolynomial_fold_align_params(UnionPwQpolynomialFold.Ptr upwf, Space.Ptr model);
    int isl_union_pw_qpolynomial_fold_foreach_pw_qpolynomial_fold(UnionPwQpolynomialFold.Ptr upwf, Callback fn, Pointer user);
    PwQpolynomialFold.Ptr isl_union_pw_qpolynomial_fold_extract_pw_qpolynomial_fold(UnionPwQpolynomialFold.Ptr upwf, Space.Ptr dim);
    void isl_union_set_free(UnionSet.Ptr islobject);
    UnionSet.Ptr isl_union_set_copy(UnionSet.Ptr islobject);
    UnionSet.Ptr isl_union_set_from_basic_set(BasicSet.Ptr bset);
    UnionSet.Ptr isl_union_set_from_set(Set.Ptr set);
    UnionSet.Ptr isl_union_set_empty(Space.Ptr dim);
    UnionSet.Ptr isl_union_set_read_from_str(Context.Ptr ctx, String str);
    UnionMap.Ptr isl_union_set_identity(UnionSet.Ptr uset);
    UnionMap.Ptr isl_union_set_unwrap(UnionSet.Ptr uset);
    UnionSet.Ptr isl_union_set_align_params(UnionSet.Ptr uset, Space.Ptr model);
    Space.Ptr isl_union_set_get_space(UnionSet.Ptr uset);
    UnionSet.Ptr isl_union_set_universe(UnionSet.Ptr uset);
    Set.Ptr isl_union_set_params(UnionSet.Ptr uset);
    UnionSet.Ptr isl_union_set_detect_equalities(UnionSet.Ptr uset);
    UnionSet.Ptr isl_union_set_affine_hull(UnionSet.Ptr uset);
    UnionSet.Ptr isl_union_set_polyhedral_hull(UnionSet.Ptr uset);
    UnionSet.Ptr isl_union_set_coalesce(UnionSet.Ptr uset);
    UnionSet.Ptr isl_union_set_lexmin(UnionSet.Ptr uset);
    UnionSet.Ptr isl_union_set_lexmax(UnionSet.Ptr uset);
    UnionSet.Ptr isl_union_set_add_set(UnionSet.Ptr uset, Set.Ptr set);
    UnionSet.Ptr isl_union_set_union(UnionSet.Ptr uset1, UnionSet.Ptr uset2);
    UnionSet.Ptr isl_union_set_subtract(UnionSet.Ptr uset1, UnionSet.Ptr uset2);
    UnionSet.Ptr isl_union_set_intersect(UnionSet.Ptr uset1, UnionSet.Ptr uset2);
    UnionSet.Ptr isl_union_set_intersect_params(UnionSet.Ptr uset, Set.Ptr set);
    UnionSet.Ptr isl_union_set_gist(UnionSet.Ptr uset, UnionSet.Ptr context);
    UnionSet.Ptr isl_union_set_gist_params(UnionSet.Ptr uset, Set.Ptr set);
    UnionSet.Ptr isl_union_set_apply(UnionSet.Ptr uset, UnionMap.Ptr umap);
    boolean isl_union_set_is_params(UnionSet.Ptr uset);
    boolean isl_union_set_is_empty(UnionSet.Ptr uset);
    boolean isl_union_set_is_subset(UnionSet.Ptr uset1, UnionSet.Ptr uset2);
    boolean isl_union_set_is_equal(UnionSet.Ptr uset1, UnionSet.Ptr uset2);
    boolean isl_union_set_is_strict_subset(UnionSet.Ptr uset1, UnionSet.Ptr uset2);
    int isl_union_set_n_set(UnionSet.Ptr uset);
    int isl_union_set_foreach_set(UnionSet.Ptr uset, Callback fn, Pointer user);
    int isl_union_set_contains(UnionSet.Ptr uset, Space.Ptr dim);
    Set.Ptr isl_union_set_extract_set(UnionSet.Ptr uset, Space.Ptr dim);
    int isl_union_set_foreach_point(UnionSet.Ptr uset, Callback fn, Pointer user);
    BasicSet.Ptr isl_union_set_sample(UnionSet.Ptr uset);
    UnionSet.Ptr isl_union_set_lift(UnionSet.Ptr uset);
    UnionMap.Ptr isl_union_set_lex_lt_union_set(UnionSet.Ptr uset1, UnionSet.Ptr uset2);
    UnionMap.Ptr isl_union_set_lex_le_union_set(UnionSet.Ptr uset1, UnionSet.Ptr uset2);
    UnionMap.Ptr isl_union_set_lex_gt_union_set(UnionSet.Ptr uset1, UnionSet.Ptr uset2);
    UnionMap.Ptr isl_union_set_lex_ge_union_set(UnionSet.Ptr uset1, UnionSet.Ptr uset2);
    UnionSet.Ptr isl_union_set_coefficients(UnionSet.Ptr bset);
    UnionSet.Ptr isl_union_set_solutions(UnionSet.Ptr bset);
    Schedule.Ptr isl_union_set_compute_schedule(UnionSet.Ptr domain, UnionMap.Ptr validity, UnionMap.Ptr proximity);
    UnionPwQpolynomialFold.Ptr isl_union_set_apply_union_pw_qpolynomial_fold(UnionSet.Ptr uset, UnionPwQpolynomialFold.Ptr upwf, boolean[] tight);
    void isl_val_free(Val.Ptr islobject);
    Val.Ptr isl_val_copy(Val.Ptr islobject);
    Val.Ptr isl_val_zero(Context.Ptr ctx);
    Val.Ptr isl_val_one(Context.Ptr ctx);
    Val.Ptr isl_val_nan(Context.Ptr ctx);
    Val.Ptr isl_val_infty(Context.Ptr ctx);
    Val.Ptr isl_val_neginfty(Context.Ptr ctx);
    Val.Ptr isl_val_read_from_str(Context.Ptr ctx, String str);
    Val.Ptr isl_val_abs(Val.Ptr v);
    Val.Ptr isl_val_neg(Val.Ptr v);
    Val.Ptr isl_val_floor(Val.Ptr v);
    Val.Ptr isl_val_ceil(Val.Ptr v);
    Val.Ptr isl_val_trunc(Val.Ptr v);
    Val.Ptr isl_val_min(Val.Ptr v1, Val.Ptr v2);
    Val.Ptr isl_val_max(Val.Ptr v1, Val.Ptr v2);
    Val.Ptr isl_val_add(Val.Ptr v1, Val.Ptr v2);
    Val.Ptr isl_val_sub(Val.Ptr v1, Val.Ptr v2);
    Val.Ptr isl_val_mul(Val.Ptr v1, Val.Ptr v2);
    Val.Ptr isl_val_mul_ui(Val.Ptr v1, int v2);
    Val.Ptr isl_val_div(Val.Ptr v1, Val.Ptr v2);
    Val.Ptr isl_val_mod(Val.Ptr v1, Val.Ptr v2);
    Val.Ptr isl_val_gcd(Val.Ptr v1, Val.Ptr v2);
    int isl_val_sgn(Val.Ptr v);
    boolean isl_val_is_zero(Val.Ptr v);
    boolean isl_val_is_one(Val.Ptr v);
    boolean isl_val_is_negone(Val.Ptr v);
    boolean isl_val_is_nonneg(Val.Ptr v);
    boolean isl_val_is_nonpos(Val.Ptr v);
    boolean isl_val_is_pos(Val.Ptr v);
    boolean isl_val_is_neg(Val.Ptr v);
    boolean isl_val_is_int(Val.Ptr v);
    boolean isl_val_is_rat(Val.Ptr v);
    boolean isl_val_is_nan(Val.Ptr v);
    boolean isl_val_is_infty(Val.Ptr v);
    boolean isl_val_is_neginfty(Val.Ptr v);
    int isl_val_lt(Val.Ptr v1, Val.Ptr v2);
    int isl_val_le(Val.Ptr v1, Val.Ptr v2);
    int isl_val_gt(Val.Ptr v1, Val.Ptr v2);
    int isl_val_ge(Val.Ptr v1, Val.Ptr v2);
    int isl_val_eq(Val.Ptr v1, Val.Ptr v2);
    int isl_val_ne(Val.Ptr v1, Val.Ptr v2);
    boolean isl_val_is_divisible_by(Val.Ptr v1, Val.Ptr v2);
    void isl_vec_free(Vec.Ptr islobject);
    Vec.Ptr isl_vec_copy(Vec.Ptr islobject);
    Vec.Ptr isl_vec_alloc(Context.Ptr ctx, int size);
    int isl_vec_size(Vec.Ptr vec);
    Val.Ptr isl_vec_get_element_val(Vec.Ptr vec, int pos);
    Vec.Ptr isl_vec_set_element_val(Vec.Ptr vec, int pos, Val.Ptr v);
    boolean isl_vec_is_equal(Vec.Ptr vec1, Vec.Ptr vec2);
    int isl_vec_cmp_element(Vec.Ptr vec1, Vec.Ptr vec2, int pos);
    Vec.Ptr isl_vec_set_val(Vec.Ptr vec, Val.Ptr v);
    Vec.Ptr isl_vec_clr(Vec.Ptr vec);
    Vec.Ptr isl_vec_neg(Vec.Ptr vec);
    Vec.Ptr isl_vec_add(Vec.Ptr vec1, Vec.Ptr vec2);
    Vec.Ptr isl_vec_extend(Vec.Ptr vec, int size);
    Vec.Ptr isl_vec_zero_extend(Vec.Ptr vec, int size);
    Vec.Ptr isl_vec_concat(Vec.Ptr vec1, Vec.Ptr vec2);
    Vec.Ptr isl_vec_sort(Vec.Ptr vec);
    Vec.Ptr isl_vec_drop_els(Vec.Ptr vec, int pos, int n);
    Vec.Ptr isl_vec_insert_els(Vec.Ptr vec, int pos, int n);
    Vec.Ptr isl_vec_insert_zero_els(Vec.Ptr vec, int pos, int n);
    Vec.Ptr isl_vec_move_els(Vec.Ptr vec, int dst_col, int src_col, int n);
}
